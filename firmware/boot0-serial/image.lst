
image:     formato del fichero elf32-lm32

Secciones:
Ind Nombre        Tama침o    VMA       LMA       Desp fich Alin
  0 .text         0000051c  00860000  00860000  00000054  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  1 .rodata       0000002c  0086051c  0086051c  00000570  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000014  00860548  00860548  0000059c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000084  0086055c  0086055c  000005b0  2**2
                  ALLOC
  4 .debug_abbrev 000002d8  00000000  00000000  000005b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006ca  00000000  00000000  00000888  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000548  00000000  00000000  00000f52  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000180  00000000  00000000  0000149c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000001e7  00000000  00000000  0000161c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_pubnames 000001aa  00000000  00000000  00001803  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_pubtypes 00000085  00000000  00000000  000019ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000040  00000000  00000000  00001a32  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0000021b  00000000  00000000  00001a72  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .comment      00000011  00000000  00000000  00001c8d  2**0
                  CONTENTS, READONLY

Desensamblado de la secci칩n .text:

00860000 <_ftext>:
  860000:	98 00 00 00 	xor r0,r0,r0
  860004:	d0 00 00 00 	wcsr IE,r0
  860008:	78 01 00 86 	mvhi r1,0x86
  86000c:	38 21 00 00 	ori r1,r1,0x0
  860010:	d0 e1 00 00 	wcsr EBA,r1
  860014:	f8 00 00 03 	calli 860020 <_crt0>
  860018:	34 00 00 00 	nop
  86001c:	34 00 00 00 	nop

00860020 <_crt0>:
  860020:	78 1c 00 86 	mvhi sp,0x86
  860024:	3b 9c 0f fc 	ori sp,sp,0xffc
  860028:	78 1a 00 86 	mvhi gp,0x86
  86002c:	3b 5a 05 60 	ori gp,gp,0x560
  860030:	78 01 00 86 	mvhi r1,0x86
  860034:	38 21 05 5c 	ori r1,r1,0x55c
  860038:	78 03 00 86 	mvhi r3,0x86
  86003c:	38 63 05 e0 	ori r3,r3,0x5e0

00860040 <.clearBSS>:
  860040:	44 23 00 04 	be r1,r3,860050 <.callMain>
  860044:	58 20 00 00 	sw (r1+0),r0
  860048:	34 21 00 04 	addi r1,r1,4
  86004c:	e3 ff ff fd 	bi 860040 <.clearBSS>

00860050 <.callMain>:
  860050:	34 01 00 00 	mvi r1,0
  860054:	34 02 00 00 	mvi r2,0
  860058:	34 03 00 00 	mvi r3,0
  86005c:	f8 00 00 0c 	calli 86008c <main>

00860060 <irq_enable>:
  860060:	34 01 00 01 	mvi r1,1
  860064:	d0 01 00 00 	wcsr IE,r1
  860068:	c3 a0 00 00 	ret

0086006c <irq_mask>:
  86006c:	34 01 00 0f 	mvi r1,15
  860070:	d0 21 00 00 	wcsr IM,r1
  860074:	c3 a0 00 00 	ret

00860078 <irq_disable>:
  860078:	34 01 00 00 	mvi r1,0
  86007c:	d0 01 00 00 	wcsr IE,r1
  860080:	c3 a0 00 00 	ret

00860084 <jump>:
  860084:	c0 20 00 00 	b r1

00860088 <halt>:
  860088:	e0 00 00 00 	bi 860088 <halt>

0086008c <main>:
// Funci칩n principal del codigo - se obtiene el valor del tiempo, del flanco positivo
//**************************************************************************************************


int main()
{
  86008c:	37 9c ff f4 	addi sp,sp,-12
  860090:	5b 8b 00 0c 	sw (sp+12),r11
  860094:	5b 8c 00 08 	sw (sp+8),r12
  860098:	5b 9d 00 04 	sw (sp+4),ra
        uint32_t x2=0;                           // valor del contador en segundos flanco negativo
        uint32_t tiempo;                         // valor del contador
        uint32_t i=0;
 
	c='u';                                   // Initialize UART
        gpio0->dir=0x00; 
  86009c:	78 0b 00 86 	mvhi r11,0x86
  8600a0:	39 6b 05 50 	ori r11,r11,0x550
  8600a4:	29 61 00 00 	lw r1,(r11+0)
  8600a8:	58 20 00 08 	sw (r1+8),r0
    

	//for(;;)
        //prueba();

isr_init();
  8600ac:	f8 00 00 36 	calli 860184 <isr_init>
irq_enable();
  8600b0:	fb ff ff ec 	calli 860060 <irq_enable>
// Funci칩n principal del codigo - se obtiene el valor del tiempo, del flanco positivo
//**************************************************************************************************


int main()
{
  8600b4:	34 01 00 00 	mvi r1,0
  8600b8:	e0 00 00 04 	bi 8600c8 <main+0x3c>
        
        flancopos();
    	hbe=1;
       
  }
  if(hbe==1 && !(flag == 0x01)){
  8600bc:	7d 8c 00 01 	cmpnei r12,r12,1
  8600c0:	a0 4c 10 00 	and r2,r2,r12
  8600c4:	5c 40 00 0e 	bne r2,r0,8600fc <main+0x70>
irq_enable();

  
for(;;)                                           // prueba lectura del tiempo de duracion flanco positivo
{
 flag=gpio0->read;
  8600c8:	29 63 00 00 	lw r3,(r11+0)

 if(hbe==0 && (flag && 0x01)){
  8600cc:	64 24 00 00 	cmpei r4,r1,0
  8600d0:	20 22 00 ff 	andi r2,r1,0xff
irq_enable();

  
for(;;)                                           // prueba lectura del tiempo de duracion flanco positivo
{
 flag=gpio0->read;
  8600d4:	28 6c 00 00 	lw r12,(r3+0)

 if(hbe==0 && (flag && 0x01)){
  8600d8:	7d 83 00 00 	cmpnei r3,r12,0
  8600dc:	a0 83 18 00 	and r3,r4,r3
  8600e0:	44 60 ff f7 	be r3,r0,8600bc <main+0x30>
        
        flancopos();
  8600e4:	f8 00 00 6a 	calli 86028c <flancopos>
    	hbe=1;
       
  }
  if(hbe==1 && !(flag == 0x01)){
  8600e8:	7d 8c 00 01 	cmpnei r12,r12,1
{
 flag=gpio0->read;

 if(hbe==0 && (flag && 0x01)){
        
        flancopos();
  8600ec:	34 02 00 01 	mvi r2,1
    	hbe=1;
       
  }
  if(hbe==1 && !(flag == 0x01)){
  8600f0:	a0 4c 10 00 	and r2,r2,r12
 flag=gpio0->read;

 if(hbe==0 && (flag && 0x01)){
        
        flancopos();
    	hbe=1;
  8600f4:	34 01 00 01 	mvi r1,1
       
  }
  if(hbe==1 && !(flag == 0x01)){
  8600f8:	44 40 ff f4 	be r2,r0,8600c8 <main+0x3c>
  

  	tiempo=flanconeg();
  8600fc:	f8 00 00 6b 	calli 8602a8 <flanconeg>
  860100:	b8 20 60 00 	mv r12,r1
        
	uart_putchar(tiempo);
  860104:	20 21 00 ff 	andi r1,r1,0xff
  860108:	f8 00 00 a4 	calli 860398 <uart_putchar>
        uart_putchar(tiempo>>8);
  86010c:	01 81 00 08 	srui r1,r12,8
  860110:	20 21 00 ff 	andi r1,r1,0xff
  860114:	f8 00 00 a1 	calli 860398 <uart_putchar>
  860118:	e3 ff ff e7 	bi 8600b4 <main+0x28>

0086011c <isr_null>:
/***************************************************************************
 * IRQ handling
 */
void isr_null()
{
}
  86011c:	c3 a0 00 00 	ret

00860120 <irq_handler>:

void irq_handler(uint32_t pending)
{
  860120:	37 9c ff f0 	addi sp,sp,-16
  860124:	5b 8b 00 10 	sw (sp+16),r11
  860128:	5b 8c 00 0c 	sw (sp+12),r12
  86012c:	5b 8d 00 08 	sw (sp+8),r13
  860130:	5b 9d 00 04 	sw (sp+4),ra
  860134:	78 0b 00 86 	mvhi r11,0x86
  860138:	39 6b 05 60 	ori r11,r11,0x560
  86013c:	b8 20 60 00 	mv r12,r1
 */
void isr_null()
{
}

void irq_handler(uint32_t pending)
  860140:	35 6d 00 80 	addi r13,r11,128
  860144:	e0 00 00 04 	bi 860154 <irq_handler+0x34>
{
	int i;

	for(i=0; i<32; i++) {
		if (pending & 0x01) (*isr_table[i])();
  860148:	35 6b 00 04 	addi r11,r11,4

void irq_handler(uint32_t pending)
{
	int i;

	for(i=0; i<32; i++) {
  86014c:	45 6d 00 08 	be r11,r13,86016c <irq_handler+0x4c>
		if (pending & 0x01) (*isr_table[i])();
		pending >>= 1;
  860150:	01 8c 00 01 	srui r12,r12,1
void irq_handler(uint32_t pending)
{
	int i;

	for(i=0; i<32; i++) {
		if (pending & 0x01) (*isr_table[i])();
  860154:	21 81 00 01 	andi r1,r12,0x1
  860158:	44 20 ff fc 	be r1,r0,860148 <irq_handler+0x28>
  86015c:	29 61 00 00 	lw r1,(r11+0)
  860160:	35 6b 00 04 	addi r11,r11,4
  860164:	d8 20 00 00 	call r1

void irq_handler(uint32_t pending)
{
	int i;

	for(i=0; i<32; i++) {
  860168:	5d 6d ff fa 	bne r11,r13,860150 <irq_handler+0x30>
		if (pending & 0x01) (*isr_table[i])();
		pending >>= 1;
	}
}
  86016c:	2b 9d 00 04 	lw ra,(sp+4)
  860170:	2b 8b 00 10 	lw r11,(sp+16)
  860174:	2b 8c 00 0c 	lw r12,(sp+12)
  860178:	2b 8d 00 08 	lw r13,(sp+8)
  86017c:	37 9c 00 10 	addi sp,sp,16
  860180:	c3 a0 00 00 	ret

00860184 <isr_init>:

void isr_init()
{
  860184:	78 01 00 86 	mvhi r1,0x86
  860188:	78 02 00 86 	mvhi r2,0x86
  86018c:	38 21 05 60 	ori r1,r1,0x560
  860190:	38 42 01 1c 	ori r2,r2,0x11c
		if (pending & 0x01) (*isr_table[i])();
		pending >>= 1;
	}
}

void isr_init()
  860194:	34 23 00 80 	addi r3,r1,128
{
	int i;
	for(i=0; i<32; i++)
		isr_table[i] = &isr_null;
  860198:	58 22 00 00 	sw (r1+0),r2
  86019c:	34 21 00 04 	addi r1,r1,4
}

void isr_init()
{
	int i;
	for(i=0; i<32; i++)
  8601a0:	5c 23 ff fe 	bne r1,r3,860198 <isr_init+0x14>
		isr_table[i] = &isr_null;
}
  8601a4:	c3 a0 00 00 	ret

008601a8 <isr_register>:

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
  8601a8:	78 03 00 86 	mvhi r3,0x86
  8601ac:	3c 21 00 02 	sli r1,r1,2
  8601b0:	38 63 05 60 	ori r3,r3,0x560
  8601b4:	b4 61 18 00 	add r3,r3,r1
  8601b8:	58 62 00 00 	sw (r3+0),r2
}
  8601bc:	c3 a0 00 00 	ret

008601c0 <isr_unregister>:

void isr_unregister(int irq)
{
	isr_table[irq] = &isr_null;
  8601c0:	78 03 00 86 	mvhi r3,0x86
  8601c4:	3c 21 00 02 	sli r1,r1,2
  8601c8:	38 63 05 60 	ori r3,r3,0x560
  8601cc:	78 02 00 86 	mvhi r2,0x86
  8601d0:	b4 61 18 00 	add r3,r3,r1
  8601d4:	38 42 01 1c 	ori r2,r2,0x11c
  8601d8:	58 62 00 00 	sw (r3+0),r2
}
  8601dc:	c3 a0 00 00 	ret

008601e0 <msleep>:
void msleep(uint32_t msec)
{
	uint32_t tcr;

	// Use timer0.1
	timer0->compare1 = (FCPU/1000)*msec;
  8601e0:	78 04 00 86 	mvhi r4,0x86
  8601e4:	38 84 05 1c 	ori r4,r4,0x51c
  8601e8:	28 83 00 00 	lw r3,(r4+0)
  8601ec:	78 02 00 86 	mvhi r2,0x86
  8601f0:	38 42 05 58 	ori r2,r2,0x558
  8601f4:	28 42 00 00 	lw r2,(r2+0)
  8601f8:	88 23 08 00 	mul r1,r1,r3
  8601fc:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
  860200:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
  860204:	34 01 00 08 	mvi r1,8
  860208:	58 41 00 0c 	sw (r2+12),r1

	do {
		//halt();
 		tcr = timer0->tcr1;
  86020c:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
  860210:	20 21 00 01 	andi r1,r1,0x1
  860214:	44 20 ff fe 	be r1,r0,86020c <msleep+0x2c>
}
  860218:	c3 a0 00 00 	ret

0086021c <nsleep>:
uint32_t nsleep(uint32_t nsec)
{
	uint32_t tcr;

	// Use timer0.1    
	timer0->compare1 = (FCPU/1000000)*nsec;
  86021c:	78 02 00 86 	mvhi r2,0x86
  860220:	38 42 05 58 	ori r2,r2,0x558
  860224:	28 42 00 00 	lw r2,(r2+0)
  860228:	08 21 00 64 	muli r1,r1,100
  86022c:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
  860230:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
  860234:	34 01 00 08 	mvi r1,8
  860238:	58 41 00 0c 	sw (r2+12),r1

	do {
		//halt();
 		tcr = timer0->tcr1;
  86023c:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
  860240:	20 21 00 01 	andi r1,r1,0x1
  860244:	44 20 ff fe 	be r1,r0,86023c <nsleep+0x20>

  return timer0->counter1;
  860248:	28 41 00 14 	lw r1,(r2+20)
}
  86024c:	c3 a0 00 00 	ret

00860250 <m1sleep>:
void m1sleep(uint32_t msec)
{
	uint32_t tcr;

	// Use timer0.1
	timer1->compare1 = (FCPU/1000)*msec;
  860250:	78 04 00 86 	mvhi r4,0x86
  860254:	38 84 05 1c 	ori r4,r4,0x51c
  860258:	28 83 00 00 	lw r3,(r4+0)
  86025c:	78 02 00 86 	mvhi r2,0x86
  860260:	38 42 05 54 	ori r2,r2,0x554
  860264:	28 42 00 00 	lw r2,(r2+0)
  860268:	88 23 08 00 	mul r1,r1,r3
  86026c:	58 41 00 10 	sw (r2+16),r1
	timer1->counter1 = 0;
  860270:	58 40 00 14 	sw (r2+20),r0
	timer1->tcr1 = TIMER_EN;
  860274:	34 01 00 08 	mvi r1,8
  860278:	58 41 00 0c 	sw (r2+12),r1

	do {
		//halt();
 		tcr = timer1->tcr1;
  86027c:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
  860280:	20 21 00 01 	andi r1,r1,0x1
  860284:	44 20 ff fe 	be r1,r0,86027c <m1sleep+0x2c>
}
  860288:	c3 a0 00 00 	ret

0086028c <flancopos>:

void flancopos()                                // devuelve el valor del flanco negativo
{
	uint32_t tcr;
	// Use timer0.1
	timer0->counter1 = 0;                       // pone el contador en 0 
  86028c:	78 01 00 86 	mvhi r1,0x86
  860290:	38 21 05 58 	ori r1,r1,0x558
  860294:	28 21 00 00 	lw r1,(r1+0)
	timer0->tcr1 = TIMER_EN;                    // habilita el timer 0 
  860298:	34 02 00 08 	mvi r2,8

void flancopos()                                // devuelve el valor del flanco negativo
{
	uint32_t tcr;
	// Use timer0.1
	timer0->counter1 = 0;                       // pone el contador en 0 
  86029c:	58 20 00 14 	sw (r1+20),r0
	timer0->tcr1 = TIMER_EN;                    // habilita el timer 0 
  8602a0:	58 22 00 0c 	sw (r1+12),r2
                 
   
}
  8602a4:	c3 a0 00 00 	ret

008602a8 <flanconeg>:
uint32_t flanconeg()                                // devuelve el valor del flanco positivo
{
	uint32_t tiempo;
	// Use timer0.1
        timer0->tcr1 = 0;                           // pone tcrq del timer 0 en cero  
  8602a8:	78 01 00 86 	mvhi r1,0x86
  8602ac:	38 21 05 58 	ori r1,r1,0x558
  8602b0:	28 21 00 00 	lw r1,(r1+0)
  8602b4:	58 20 00 0c 	sw (r1+12),r0
       	
	return timer0->counter1;                    // devuelve el contador1 del timer0    
  8602b8:	28 21 00 14 	lw r1,(r1+20)
	
}
  8602bc:	c3 a0 00 00 	ret

008602c0 <uart_init>:
	//uart0->lcr = 0x03;  // Line Control Register:    8N1
	//uart0->mcr = 0x00;  // Modem Control Register

	// Setup Divisor register (Fclk / Baud)
	//uart0->div = (FCPU/(57600*16));
}
  8602c0:	c3 a0 00 00 	ret

008602c4 <prueba1>:
         }          

}

void prueba1()                         // genera un tren de pulsos flanco positivo y negativo 4 ms
{
  8602c4:	37 9c ff f8 	addi sp,sp,-8
  8602c8:	5b 8b 00 08 	sw (sp+8),r11
  8602cc:	5b 9d 00 04 	sw (sp+4),ra
      gpio0->write=0x00;   
  8602d0:	78 0b 00 86 	mvhi r11,0x86
  8602d4:	39 6b 05 50 	ori r11,r11,0x550
  8602d8:	29 62 00 00 	lw r2,(r11+0)
      msleep(19);
  8602dc:	34 01 00 13 	mvi r1,19

}

void prueba1()                         // genera un tren de pulsos flanco positivo y negativo 4 ms
{
      gpio0->write=0x00;   
  8602e0:	58 40 00 04 	sw (r2+4),r0
      msleep(19);
  8602e4:	fb ff ff bf 	calli 8601e0 <msleep>
      gpio0->write=0x01;
  8602e8:	29 62 00 00 	lw r2,(r11+0)
  8602ec:	34 03 00 01 	mvi r3,1
      msleep(6);
  8602f0:	34 01 00 06 	mvi r1,6

void prueba1()                         // genera un tren de pulsos flanco positivo y negativo 4 ms
{
      gpio0->write=0x00;   
      msleep(19);
      gpio0->write=0x01;
  8602f4:	58 43 00 04 	sw (r2+4),r3
      msleep(6);
  8602f8:	fb ff ff ba 	calli 8601e0 <msleep>
}
  8602fc:	2b 9d 00 04 	lw ra,(sp+4)
  860300:	2b 8b 00 08 	lw r11,(sp+8)
  860304:	37 9c 00 08 	addi sp,sp,8
  860308:	c3 a0 00 00 	ret

0086030c <uart_getchar>:
/***************************************************************************
 * UART Functions
 */

char uart_getchar()
{   
  86030c:	78 01 00 86 	mvhi r1,0x86
  860310:	38 21 05 48 	ori r1,r1,0x548
  860314:	28 22 00 00 	lw r2,(r1+0)
	while (! (uart0->ucr & UART_DR)) ;
  860318:	28 41 00 00 	lw r1,(r2+0)
  86031c:	20 21 00 01 	andi r1,r1,0x1
  860320:	44 20 ff fe 	be r1,r0,860318 <uart_getchar+0xc>
	return uart0->rxtx;
  860324:	28 41 00 04 	lw r1,(r2+4)
}
  860328:	20 21 00 ff 	andi r1,r1,0xff
  86032c:	c3 a0 00 00 	ret

00860330 <uart_getint>:
int uart_getint()
{
  860330:	78 01 00 86 	mvhi r1,0x86
  860334:	38 21 05 48 	ori r1,r1,0x548
  860338:	28 22 00 00 	lw r2,(r1+0)
 while (! (uart0->ucr & UART_DR)) ;
  86033c:	28 41 00 00 	lw r1,(r2+0)
  860340:	20 21 00 01 	andi r1,r1,0x1
  860344:	44 20 ff fe 	be r1,r0,86033c <uart_getint+0xc>
	return uart0->rxtx;
  860348:	28 41 00 04 	lw r1,(r2+4)

}
  86034c:	c3 a0 00 00 	ret

00860350 <uart_putchar1>:

void uart_putchar1(char f) //obtener caracter de la variable 
{
  860350:	78 02 00 86 	mvhi r2,0x86
  860354:	38 42 05 4c 	ori r2,r2,0x54c
  860358:	28 43 00 00 	lw r3,(r2+0)
  86035c:	20 21 00 ff 	andi r1,r1,0xff
	while (uart1->ucr & UART_BUSY) ;
  860360:	28 62 00 00 	lw r2,(r3+0)
  860364:	20 42 00 10 	andi r2,r2,0x10
  860368:	5c 40 ff fe 	bne r2,r0,860360 <uart_putchar1+0x10>
	uart1->rxtx = f;
  86036c:	58 61 00 04 	sw (r3+4),r1
}
  860370:	c3 a0 00 00 	ret

00860374 <uart_getchar1>:

char uart_getchar1()
{   
  860374:	78 01 00 86 	mvhi r1,0x86
  860378:	38 21 05 4c 	ori r1,r1,0x54c
  86037c:	28 22 00 00 	lw r2,(r1+0)
	while (! (uart1->ucr & UART_DR)) ;
  860380:	28 41 00 00 	lw r1,(r2+0)
  860384:	20 21 00 01 	andi r1,r1,0x1
  860388:	44 20 ff fe 	be r1,r0,860380 <uart_getchar1+0xc>
	return uart1->rxtx;
  86038c:	28 41 00 04 	lw r1,(r2+4)
}
  860390:	20 21 00 ff 	andi r1,r1,0xff
  860394:	c3 a0 00 00 	ret

00860398 <uart_putchar>:

void uart_putchar(char c)
{
  860398:	78 02 00 86 	mvhi r2,0x86
  86039c:	38 42 05 48 	ori r2,r2,0x548
  8603a0:	28 43 00 00 	lw r3,(r2+0)
  8603a4:	20 21 00 ff 	andi r1,r1,0xff
	while (uart0->ucr & UART_BUSY) ;
  8603a8:	28 62 00 00 	lw r2,(r3+0)
  8603ac:	20 42 00 10 	andi r2,r2,0x10
  8603b0:	5c 40 ff fe 	bne r2,r0,8603a8 <uart_putchar+0x10>
	uart0->rxtx = c;
  8603b4:	58 61 00 04 	sw (r3+4),r1
}
  8603b8:	c3 a0 00 00 	ret

008603bc <uart_putint>:
void uart_putint(int d)
{
  8603bc:	78 02 00 86 	mvhi r2,0x86
  8603c0:	38 42 05 48 	ori r2,r2,0x548
  8603c4:	28 43 00 00 	lw r3,(r2+0)
	while (uart0->ucr & UART_BUSY) ;
  8603c8:	28 62 00 00 	lw r2,(r3+0)
  8603cc:	20 42 00 10 	andi r2,r2,0x10
  8603d0:	5c 40 ff fe 	bne r2,r0,8603c8 <uart_putint+0xc>
	uart0->rxtx = d;
  8603d4:	58 61 00 04 	sw (r3+4),r1
}
  8603d8:	c3 a0 00 00 	ret

008603dc <uart_putstr>:

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
  8603dc:	40 24 00 00 	lbu r4,(r1+0)
  8603e0:	44 80 00 0b 	be r4,r0,86040c <uart_putstr+0x30>
  8603e4:	78 02 00 86 	mvhi r2,0x86
  8603e8:	38 42 05 48 	ori r2,r2,0x548
  8603ec:	28 43 00 00 	lw r3,(r2+0)
	return uart1->rxtx;
}

void uart_putchar(char c)
{
	while (uart0->ucr & UART_BUSY) ;
  8603f0:	28 62 00 00 	lw r2,(r3+0)
  8603f4:	20 42 00 10 	andi r2,r2,0x10
  8603f8:	5c 40 ff fe 	bne r2,r0,8603f0 <uart_putstr+0x14>
	uart0->rxtx = c;
  8603fc:	58 64 00 04 	sw (r3+4),r4
void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
		uart_putchar(*c);
		c++;
  860400:	34 21 00 01 	addi r1,r1,1
}

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
  860404:	40 24 00 00 	lbu r4,(r1+0)
  860408:	5c 82 ff fa 	bne r4,r2,8603f0 <uart_putstr+0x14>
  86040c:	c3 a0 00 00 	ret

00860410 <prueba>:
/***************************************************************************
 * GPIO Funciones pruebas
 */

void prueba()                          // Si se activa el pin6 del GPIO prenda el led1
{ 
  860410:	37 9c ff f4 	addi sp,sp,-12
  860414:	5b 8b 00 0c 	sw (sp+12),r11
  860418:	5b 8c 00 08 	sw (sp+8),r12
  86041c:	5b 9d 00 04 	sw (sp+4),ra
     uint32_t out1;
     uint32_t entrada;
                          
     entrada = gpio0->read;
  860420:	78 0b 00 86 	mvhi r11,0x86
  860424:	39 6b 05 50 	ori r11,r11,0x550
  860428:	29 62 00 00 	lw r2,(r11+0)
     uart_putstr('a');
  86042c:	34 01 00 61 	mvi r1,97
void prueba()                          // Si se activa el pin6 del GPIO prenda el led1
{ 
     uint32_t out1;
     uint32_t entrada;
                          
     entrada = gpio0->read;
  860430:	28 4c 00 00 	lw r12,(r2+0)
     uart_putstr('a');
  860434:	fb ff ff ea 	calli 8603dc <uart_putstr>
     gpio0->write=0x00;   
  860438:	29 61 00 00 	lw r1,(r11+0)
                        
      if(entrada==0x40)
  86043c:	34 02 00 40 	mvi r2,64
     uint32_t out1;
     uint32_t entrada;
                          
     entrada = gpio0->read;
     uart_putstr('a');
     gpio0->write=0x00;   
  860440:	58 20 00 04 	sw (r1+4),r0
                        
      if(entrada==0x40)
  860444:	45 82 00 06 	be r12,r2,86045c <prueba+0x4c>
            out1 = 0x01;
            gpio0->write = out1;                     
            msleep(100);
         }          

}
  860448:	2b 9d 00 04 	lw ra,(sp+4)
  86044c:	2b 8b 00 0c 	lw r11,(sp+12)
  860450:	2b 8c 00 08 	lw r12,(sp+8)
  860454:	37 9c 00 0c 	addi sp,sp,12
  860458:	c3 a0 00 00 	ret
     gpio0->write=0x00;   
                        
      if(entrada==0x40)
         {
            out1 = 0x01;
            gpio0->write = out1;                     
  86045c:	34 02 00 01 	mvi r2,1
  860460:	58 22 00 04 	sw (r1+4),r2
            msleep(100);
  860464:	34 01 00 64 	mvi r1,100
  860468:	fb ff ff 5e 	calli 8601e0 <msleep>
         }          

}
  86046c:	2b 9d 00 04 	lw ra,(sp+4)
  860470:	2b 8b 00 0c 	lw r11,(sp+12)
  860474:	2b 8c 00 08 	lw r12,(sp+8)
  860478:	37 9c 00 0c 	addi sp,sp,12
  86047c:	c3 a0 00 00 	ret

00860480 <sensor>:
/***************************************************************************
 *Sensor functions
 */

void sensor()
{
  860480:	37 9c ff ec 	addi sp,sp,-20
  860484:	5b 8b 00 14 	sw (sp+20),r11
  860488:	5b 8c 00 10 	sw (sp+16),r12
  86048c:	5b 8d 00 0c 	sw (sp+12),r13
  860490:	5b 8e 00 08 	sw (sp+8),r14
  860494:	5b 9d 00 04 	sw (sp+4),ra



t=18;                                       //milisegundos se침al low  
        
gpio0->write = 0x00;                        //se침al de reset
  860498:	78 0c 00 86 	mvhi r12,0x86
  86049c:	39 8c 05 50 	ori r12,r12,0x550
  8604a0:	29 82 00 00 	lw r2,(r12+0)
msleep(t);
  8604a4:	34 01 00 12 	mvi r1,18



t=18;                                       //milisegundos se침al low  
        
gpio0->write = 0x00;                        //se침al de reset
  8604a8:	58 40 00 04 	sw (r2+4),r0
msleep(t);
  8604ac:	fb ff ff 4d 	calli 8601e0 <msleep>
gpio0->write = 0x40;                         
  8604b0:	29 82 00 00 	lw r2,(r12+0)
  8604b4:	34 01 00 40 	mvi r1,64
gpio0->dir=0x0F;
  8604b8:	34 03 00 0f 	mvi r3,15

t=18;                                       //milisegundos se침al low  
        
gpio0->write = 0x00;                        //se침al de reset
msleep(t);
gpio0->write = 0x40;                         
  8604bc:	58 41 00 04 	sw (r2+4),r1
gpio0->dir=0x0F;
  8604c0:	58 43 00 08 	sw (r2+8),r3
l=gpio0->read;
  8604c4:	28 4b 00 00 	lw r11,(r2+0)

while (l == 0x40)                          // espera hasta que el sensor responda
  8604c8:	5d 61 00 0a 	bne r11,r1,8604f0 <sensor+0x70>
  8604cc:	78 0d 00 86 	mvhi r13,0x86
  8604d0:	39 ad 05 20 	ori r13,r13,0x520
  8604d4:	34 0e 00 40 	mvi r14,64
  8604d8:	e0 00 00 02 	bi 8604e0 <sensor+0x60>
  8604dc:	29 82 00 00 	lw r2,(r12+0)
{
  l=gpio0->read;
  8604e0:	28 4b 00 00 	lw r11,(r2+0)
  uart_putstr("esperando respuesta");
  8604e4:	b9 a0 08 00 	mv r1,r13
  8604e8:	fb ff ff bd 	calli 8603dc <uart_putstr>
msleep(t);
gpio0->write = 0x40;                         
gpio0->dir=0x0F;
l=gpio0->read;

while (l == 0x40)                          // espera hasta que el sensor responda
  8604ec:	45 6e ff fc 	be r11,r14,8604dc <sensor+0x5c>
{
  l=gpio0->read;
  uart_putstr("esperando respuesta");
}
if(l==0x00)
  8604f0:	5d 60 00 04 	bne r11,r0,860500 <sensor+0x80>
uart_putstr("responde el sensor"); 
  8604f4:	78 01 00 86 	mvhi r1,0x86
  8604f8:	38 21 05 34 	ori r1,r1,0x534
  8604fc:	fb ff ff b8 	calli 8603dc <uart_putstr>

} 
  860500:	2b 9d 00 04 	lw ra,(sp+4)
  860504:	2b 8b 00 14 	lw r11,(sp+20)
  860508:	2b 8c 00 10 	lw r12,(sp+16)
  86050c:	2b 8d 00 0c 	lw r13,(sp+12)
  860510:	2b 8e 00 08 	lw r14,(sp+8)
  860514:	37 9c 00 14 	addi sp,sp,20
  860518:	c3 a0 00 00 	ret
