
image:     file format elf32-lm32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000218  00860000  00860000  00000054  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  1 .rodata       00000040  00860218  00860218  0000026c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         0000000c  00860258  00860258  000002ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000004  00860264  00860264  000002b8  2**2
                  ALLOC
  4 .debug_abbrev 000001d5  00000000  00000000  000002b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000334  00000000  00000000  0000048d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000212  00000000  00000000  000007c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000a0  00000000  00000000  000009d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000070  00000000  00000000  00000a74  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_pubnames 000000c6  00000000  00000000  00000ae4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_pubtypes 00000060  00000000  00000000  00000baa  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000040  00000000  00000000  00000c0a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000138  00000000  00000000  00000c4a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .comment      00000011  00000000  00000000  00000d82  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00860000 <_ftext>:
  860000:	98 00 00 00 	xor r0,r0,r0
  860004:	d0 00 00 00 	wcsr IE,r0
  860008:	78 01 00 86 	mvhi r1,0x86
  86000c:	38 21 00 00 	ori r1,r1,0x0
  860010:	d0 e1 00 00 	wcsr EBA,r1
  860014:	f8 00 00 03 	calli 860020 <_crt0>
  860018:	34 00 00 00 	nop
  86001c:	34 00 00 00 	nop

00860020 <_crt0>:
  860020:	78 1c 00 86 	mvhi sp,0x86
  860024:	3b 9c 0f fc 	ori sp,sp,0xffc
  860028:	78 1a 00 86 	mvhi gp,0x86
  86002c:	3b 5a 02 70 	ori gp,gp,0x270
  860030:	78 01 00 86 	mvhi r1,0x86
  860034:	38 21 02 64 	ori r1,r1,0x264
  860038:	78 03 00 86 	mvhi r3,0x86
  86003c:	38 63 02 68 	ori r3,r3,0x268

00860040 <.clearBSS>:
  860040:	44 23 00 04 	be r1,r3,860050 <.callMain>
  860044:	58 20 00 00 	sw (r1+0),r0
  860048:	34 21 00 04 	addi r1,r1,4
  86004c:	e3 ff ff fd 	bi 860040 <.clearBSS>

00860050 <.callMain>:
  860050:	34 01 00 00 	mvi r1,0
  860054:	34 02 00 00 	mvi r2,0
  860058:	34 03 00 00 	mvi r3,0
  86005c:	f8 00 00 0c 	calli 86008c <main>

00860060 <irq_enable>:
  860060:	34 01 00 01 	mvi r1,1
  860064:	d0 01 00 00 	wcsr IE,r1
  860068:	c3 a0 00 00 	ret

0086006c <irq_mask>:
  86006c:	34 01 00 0f 	mvi r1,15
  860070:	d0 21 00 00 	wcsr IM,r1
  860074:	c3 a0 00 00 	ret

00860078 <irq_disable>:
  860078:	34 01 00 00 	mvi r1,0
  86007c:	d0 01 00 00 	wcsr IE,r1
  860080:	c3 a0 00 00 	ret

00860084 <jump>:
  860084:	c0 20 00 00 	b r1

00860088 <halt>:
  860088:	e0 00 00 00 	bi 860088 <halt>

0086008c <main>:
 *
 */
#include "soc-hw.h"

int main()
{
  86008c:	37 9c ff e0 	addi sp,sp,-32
  860090:	5b 8b 00 20 	sw (sp+32),r11
  860094:	5b 8c 00 1c 	sw (sp+28),r12
  860098:	5b 8d 00 18 	sw (sp+24),r13
  86009c:	5b 8e 00 14 	sw (sp+20),r14
  8600a0:	5b 8f 00 10 	sw (sp+16),r15
  8600a4:	5b 90 00 0c 	sw (sp+12),r16
  8600a8:	5b 91 00 08 	sw (sp+8),r17
  8600ac:	5b 9d 00 04 	sw (sp+4),ra
  8600b0:	78 10 00 86 	mvhi r16,0x86
	uint8_t  c;

	// Initialize UART

	c='u';
          x= uart_getchar();
  8600b4:	f8 00 00 21 	calli 860138 <uart_getchar>
  8600b8:	78 0f 00 86 	mvhi r15,0x86
  8600bc:	78 0e 00 86 	mvhi r14,0x86

           uart_putchar1(x);
  8600c0:	f8 00 00 2f 	calli 86017c <uart_putchar1>
  8600c4:	3a 10 02 18 	ori r16,r16,0x218
  8600c8:	39 ef 02 30 	ori r15,r15,0x230
  8600cc:	39 ce 02 3c 	ori r14,r14,0x23c

	for(;;) {
		uint32_t start, size; 
	       c = uart_getchar();

		switch (c) {
  8600d0:	34 0b 00 6f 	mvi r11,111
  8600d4:	34 0d 00 73 	mvi r13,115
  8600d8:	34 11 00 75 	mvi r17,117
  8600dc:	34 0c 00 64 	mvi r12,100

           uart_putchar1(x);

	for(;;) {
		uint32_t start, size; 
	       c = uart_getchar();
  8600e0:	f8 00 00 16 	calli 860138 <uart_getchar>

		switch (c) {
  8600e4:	44 2b 00 07 	be r1,r11,860100 <main+0x74>
  8600e8:	54 2b 00 09 	bgu r1,r11,86010c <main+0x80>
  8600ec:	44 2c 00 0f 	be r1,r12,860128 <main+0x9c>
                        uart_putchar(c);
                         break; 
              
   
		default:
			uart_putstr("**SAKC/bootloader** > \r\n");
  8600f0:	b9 c0 08 00 	mv r1,r14
  8600f4:	f8 00 00 3c 	calli 8601e4 <uart_putstr>

           uart_putchar1(x);

	for(;;) {
		uint32_t start, size; 
	       c = uart_getchar();
  8600f8:	f8 00 00 10 	calli 860138 <uart_getchar>

		switch (c) {
  8600fc:	5c 2b ff fb 	bne r1,r11,8600e8 <main+0x5c>
    		case 'u': // upload 
    			uart_putstr("**tengo sueño** > \r\n");
    			break;
		case 'o': // enviar una cadena 
    			
                       uart_putstr("jajaja \r\n");
  860100:	b9 e0 08 00 	mv r1,r15
  860104:	f8 00 00 38 	calli 8601e4 <uart_putstr>
                         break;
  860108:	e3 ff ff f6 	bi 8600e0 <main+0x54>

	for(;;) {
		uint32_t start, size; 
	       c = uart_getchar();

		switch (c) {
  86010c:	44 2d 00 05 	be r1,r13,860120 <main+0x94>
  860110:	5c 31 ff f8 	bne r1,r17,8600f0 <main+0x64>
    		case 'u': // upload 
    			uart_putstr("**tengo sueño** > \r\n");
  860114:	ba 00 08 00 	mv r1,r16
  860118:	f8 00 00 33 	calli 8601e4 <uart_putstr>
    			break;
  86011c:	e3 ff ff f1 	bi 8600e0 <main+0x54>
				   uart_putchar('o');
    			break;
    		
                case 's' ://echo int
                           
                        uart_putchar(c);
  860120:	f8 00 00 20 	calli 8601a0 <uart_putchar>
                         break; 
  860124:	e3 ff ff ef 	bi 8600e0 <main+0x54>
                       uart_putstr("jajaja \r\n");
                         break;

		case 'd': // enviar un caracter
    			
				   uart_putchar('o');
  860128:	34 01 00 6f 	mvi r1,111
  86012c:	f8 00 00 1d 	calli 8601a0 <uart_putchar>
    			break;
  860130:	e3 ff ff ec 	bi 8600e0 <main+0x54>

00860134 <uart_init>:
	//uart0->lcr = 0x03;  // Line Control Register:    8N1
	//uart0->mcr = 0x00;  // Modem Control Register

	// Setup Divisor register (Fclk / Baud)
	//uart0->div = (FCPU/(57600*16));
}
  860134:	c3 a0 00 00 	ret

00860138 <uart_getchar>:

char uart_getchar()
{   
  860138:	78 01 00 86 	mvhi r1,0x86
  86013c:	38 21 02 58 	ori r1,r1,0x258
  860140:	28 22 00 00 	lw r2,(r1+0)
	while (! (uart0->ucr & UART_DR)) ;
  860144:	28 41 00 00 	lw r1,(r2+0)
  860148:	20 21 00 01 	andi r1,r1,0x1
  86014c:	44 20 ff fe 	be r1,r0,860144 <uart_getchar+0xc>
	return uart0->rxtx;
  860150:	28 41 00 04 	lw r1,(r2+4)
}
  860154:	20 21 00 ff 	andi r1,r1,0xff
  860158:	c3 a0 00 00 	ret

0086015c <uart_getint>:
int uart_getint()
{
  86015c:	78 01 00 86 	mvhi r1,0x86
  860160:	38 21 02 58 	ori r1,r1,0x258
  860164:	28 22 00 00 	lw r2,(r1+0)
 while (! (uart0->ucr & UART_DR)) ;
  860168:	28 41 00 00 	lw r1,(r2+0)
  86016c:	20 21 00 01 	andi r1,r1,0x1
  860170:	44 20 ff fe 	be r1,r0,860168 <uart_getint+0xc>
	return uart0->rxtx;
  860174:	28 41 00 04 	lw r1,(r2+4)

}
  860178:	c3 a0 00 00 	ret

0086017c <uart_putchar1>:

void uart_putchar1(char f)
{
  86017c:	78 02 00 86 	mvhi r2,0x86
  860180:	38 42 02 5c 	ori r2,r2,0x25c
  860184:	28 43 00 00 	lw r3,(r2+0)
  860188:	20 21 00 ff 	andi r1,r1,0xff
	while (uart1->ucr & UART_BUSY) ;
  86018c:	28 62 00 00 	lw r2,(r3+0)
  860190:	20 42 00 10 	andi r2,r2,0x10
  860194:	5c 40 ff fe 	bne r2,r0,86018c <uart_putchar1+0x10>
	uart1->rxtx = f;
  860198:	58 61 00 04 	sw (r3+4),r1
}
  86019c:	c3 a0 00 00 	ret

008601a0 <uart_putchar>:

void uart_putchar(char c)
{
  8601a0:	78 02 00 86 	mvhi r2,0x86
  8601a4:	38 42 02 58 	ori r2,r2,0x258
  8601a8:	28 43 00 00 	lw r3,(r2+0)
  8601ac:	20 21 00 ff 	andi r1,r1,0xff
	while (uart0->ucr & UART_BUSY) ;
  8601b0:	28 62 00 00 	lw r2,(r3+0)
  8601b4:	20 42 00 10 	andi r2,r2,0x10
  8601b8:	5c 40 ff fe 	bne r2,r0,8601b0 <uart_putchar+0x10>
	uart0->rxtx = c;
  8601bc:	58 61 00 04 	sw (r3+4),r1
}
  8601c0:	c3 a0 00 00 	ret

008601c4 <uart_putint>:
void uart_putint(int d)
{
  8601c4:	78 02 00 86 	mvhi r2,0x86
  8601c8:	38 42 02 58 	ori r2,r2,0x258
  8601cc:	28 43 00 00 	lw r3,(r2+0)
	while (uart0->ucr & UART_BUSY) ;
  8601d0:	28 62 00 00 	lw r2,(r3+0)
  8601d4:	20 42 00 10 	andi r2,r2,0x10
  8601d8:	5c 40 ff fe 	bne r2,r0,8601d0 <uart_putint+0xc>
	uart0->rxtx = d;
  8601dc:	58 61 00 04 	sw (r3+4),r1
}
  8601e0:	c3 a0 00 00 	ret

008601e4 <uart_putstr>:

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
  8601e4:	40 24 00 00 	lbu r4,(r1+0)
  8601e8:	44 80 00 0b 	be r4,r0,860214 <uart_putstr+0x30>
  8601ec:	78 02 00 86 	mvhi r2,0x86
  8601f0:	38 42 02 58 	ori r2,r2,0x258
  8601f4:	28 43 00 00 	lw r3,(r2+0)
	uart1->rxtx = f;
}

void uart_putchar(char c)
{
	while (uart0->ucr & UART_BUSY) ;
  8601f8:	28 62 00 00 	lw r2,(r3+0)
  8601fc:	20 42 00 10 	andi r2,r2,0x10
  860200:	5c 40 ff fe 	bne r2,r0,8601f8 <uart_putstr+0x14>
	uart0->rxtx = c;
  860204:	58 64 00 04 	sw (r3+4),r4
void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
		uart_putchar(*c);
		c++;
  860208:	34 21 00 01 	addi r1,r1,1
}

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
  86020c:	40 24 00 00 	lbu r4,(r1+0)
  860210:	5c 82 ff fa 	bne r4,r2,8601f8 <uart_putstr+0x14>
  860214:	c3 a0 00 00 	ret
