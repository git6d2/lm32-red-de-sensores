
image:     file format elf32-lm32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000668  00860000  00860000  00000054  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  1 .rodata       0000002c  00860668  00860668  000006bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000014  00860694  00860694  000006e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          0000008c  008606a8  008606a8  000006fc  2**2
                  ALLOC
  4 .debug_abbrev 00000378  00000000  00000000  000006fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000750  00000000  00000000  00000a74  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000557  00000000  00000000  000011c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000180  00000000  00000000  0000171c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 000001cc  00000000  00000000  0000189c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_pubtypes 00000085  00000000  00000000  00001a68  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000040  00000000  00000000  00001aed  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000267  00000000  00000000  00001b2d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .comment      00000011  00000000  00000000  00001d94  2**0
                  CONTENTS, READONLY
 13 .debug_loc    00000152  00000000  00000000  00001da5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000018  00000000  00000000  00001ef7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00860000 <_ftext>:
  860000:	98 00 00 00 	xor r0,r0,r0
  860004:	d0 00 00 00 	wcsr IE,r0
  860008:	78 01 00 86 	mvhi r1,0x86
  86000c:	38 21 00 00 	ori r1,r1,0x0
  860010:	d0 e1 00 00 	wcsr EBA,r1
  860014:	f8 00 00 3b 	calli 860100 <_crt0>
  860018:	34 00 00 00 	nop
  86001c:	34 00 00 00 	nop

00860020 <_breakpoint_handler>:
  860020:	34 00 00 00 	nop
  860024:	34 00 00 00 	nop
  860028:	34 00 00 00 	nop
  86002c:	34 00 00 00 	nop
  860030:	34 00 00 00 	nop
  860034:	34 00 00 00 	nop
  860038:	34 00 00 00 	nop
  86003c:	34 00 00 00 	nop

00860040 <_ibuserror_handler>:
  860040:	34 00 00 00 	nop
  860044:	34 00 00 00 	nop
  860048:	34 00 00 00 	nop
  86004c:	34 00 00 00 	nop
  860050:	34 00 00 00 	nop
  860054:	34 00 00 00 	nop
  860058:	34 00 00 00 	nop
  86005c:	34 00 00 00 	nop

00860060 <_watchpoint_handler>:
  860060:	34 00 00 00 	nop
  860064:	34 00 00 00 	nop
  860068:	34 00 00 00 	nop
  86006c:	34 00 00 00 	nop
  860070:	34 00 00 00 	nop
  860074:	34 00 00 00 	nop
  860078:	34 00 00 00 	nop
  86007c:	34 00 00 00 	nop

00860080 <_dbuserror_handler>:
  860080:	34 00 00 00 	nop
  860084:	34 00 00 00 	nop
  860088:	34 00 00 00 	nop
  86008c:	34 00 00 00 	nop
  860090:	34 00 00 00 	nop
  860094:	34 00 00 00 	nop
  860098:	34 00 00 00 	nop
  86009c:	34 00 00 00 	nop

008600a0 <_divzero_handler>:
  8600a0:	34 00 00 00 	nop
  8600a4:	34 00 00 00 	nop
  8600a8:	34 00 00 00 	nop
  8600ac:	34 00 00 00 	nop
  8600b0:	34 00 00 00 	nop
  8600b4:	34 00 00 00 	nop
  8600b8:	34 00 00 00 	nop
  8600bc:	34 00 00 00 	nop

008600c0 <_interrupt_handler>:
  8600c0:	5b 9d 00 00 	sw (sp+0),ra
  8600c4:	f8 00 00 2b 	calli 860170 <_save_all>
  8600c8:	90 40 08 00 	rcsr r1,IP
  8600cc:	f8 00 00 5c 	calli 86023c <irq_handler>
  8600d0:	78 01 ff ff 	mvhi r1,0xffff
  8600d4:	38 21 ff ff 	ori r1,r1,0xffff
  8600d8:	d0 41 00 00 	wcsr IP,r1
  8600dc:	e0 00 00 38 	bi 8601bc <_restore_all_and_eret>

008600e0 <_scall_handler>:
  8600e0:	34 00 00 00 	nop
  8600e4:	34 00 00 00 	nop
  8600e8:	34 00 00 00 	nop
  8600ec:	34 00 00 00 	nop
  8600f0:	34 00 00 00 	nop
  8600f4:	34 00 00 00 	nop
  8600f8:	34 00 00 00 	nop
  8600fc:	34 00 00 00 	nop

00860100 <_crt0>:
  860100:	78 1c 00 86 	mvhi sp,0x86
  860104:	3b 9c 0f fc 	ori sp,sp,0xffc
  860108:	78 1a 00 86 	mvhi gp,0x86
  86010c:	3b 5a 06 b0 	ori gp,gp,0x6b0
  860110:	78 01 00 86 	mvhi r1,0x86
  860114:	38 21 06 a8 	ori r1,r1,0x6a8
  860118:	78 03 00 86 	mvhi r3,0x86
  86011c:	38 63 07 34 	ori r3,r3,0x734

00860120 <.clearBSS>:
  860120:	44 23 00 04 	be r1,r3,860130 <.callMain>
  860124:	58 20 00 00 	sw (r1+0),r0
  860128:	34 21 00 04 	addi r1,r1,4
  86012c:	e3 ff ff fd 	bi 860120 <.clearBSS>

00860130 <.callMain>:
  860130:	34 01 00 00 	mvi r1,0
  860134:	34 02 00 00 	mvi r2,0
  860138:	34 03 00 00 	mvi r3,0
  86013c:	f8 00 00 33 	calli 860208 <main>

00860140 <irq_enable>:
  860140:	34 01 00 01 	mvi r1,1
  860144:	d0 01 00 00 	wcsr IE,r1
  860148:	c3 a0 00 00 	ret

0086014c <irq_disable>:
  86014c:	34 01 00 00 	mvi r1,0
  860150:	d0 01 00 00 	wcsr IE,r1
  860154:	c3 a0 00 00 	ret

00860158 <irq_set_mask>:
  860158:	d0 21 00 00 	wcsr IM,r1
  86015c:	c3 a0 00 00 	ret

00860160 <irq_get_mask>:
  860160:	90 20 08 00 	rcsr r1,IM
  860164:	c3 a0 00 00 	ret

00860168 <jump>:
  860168:	c0 20 00 00 	b r1

0086016c <halt>:
  86016c:	e0 00 00 00 	bi 86016c <halt>

00860170 <_save_all>:
  860170:	37 9c ff 80 	addi sp,sp,-128
  860174:	5b 81 00 04 	sw (sp+4),r1
  860178:	5b 82 00 08 	sw (sp+8),r2
  86017c:	5b 83 00 0c 	sw (sp+12),r3
  860180:	5b 84 00 10 	sw (sp+16),r4
  860184:	5b 85 00 14 	sw (sp+20),r5
  860188:	5b 86 00 18 	sw (sp+24),r6
  86018c:	5b 87 00 1c 	sw (sp+28),r7
  860190:	5b 88 00 20 	sw (sp+32),r8
  860194:	5b 89 00 24 	sw (sp+36),r9
  860198:	5b 8a 00 28 	sw (sp+40),r10
  86019c:	5b 9e 00 78 	sw (sp+120),ea
  8601a0:	5b 9f 00 7c 	sw (sp+124),ba
  8601a4:	2b 81 00 80 	lw r1,(sp+128)
  8601a8:	5b 81 00 74 	sw (sp+116),r1
  8601ac:	bb 80 08 00 	mv r1,sp
  8601b0:	34 21 00 80 	addi r1,r1,128
  8601b4:	5b 81 00 70 	sw (sp+112),r1
  8601b8:	c3 a0 00 00 	ret

008601bc <_restore_all_and_eret>:
  8601bc:	2b 81 00 04 	lw r1,(sp+4)
  8601c0:	2b 82 00 08 	lw r2,(sp+8)
  8601c4:	2b 83 00 0c 	lw r3,(sp+12)
  8601c8:	2b 84 00 10 	lw r4,(sp+16)
  8601cc:	2b 85 00 14 	lw r5,(sp+20)
  8601d0:	2b 86 00 18 	lw r6,(sp+24)
  8601d4:	2b 87 00 1c 	lw r7,(sp+28)
  8601d8:	2b 88 00 20 	lw r8,(sp+32)
  8601dc:	2b 89 00 24 	lw r9,(sp+36)
  8601e0:	2b 8a 00 28 	lw r10,(sp+40)
  8601e4:	2b 9d 00 74 	lw ra,(sp+116)
  8601e8:	2b 9e 00 78 	lw ea,(sp+120)
  8601ec:	2b 9f 00 7c 	lw ba,(sp+124)
  8601f0:	2b 9c 00 70 	lw sp,(sp+112)
  8601f4:	c3 c0 00 00 	eret

008601f8 <get_sp>:
  8601f8:	bb 80 08 00 	mv r1,sp
  8601fc:	c3 a0 00 00 	ret

00860200 <get_gp>:
  860200:	bb 40 08 00 	mv r1,gp
  860204:	c3 a0 00 00 	ret

00860208 <main>:
//**************************************************************************************************



int main()
{
  860208:	37 9c ff fc 	addi sp,sp,-4
  86020c:	5b 9d 00 04 	sw (sp+4),ra
        uint32_t x2=0;                           // valor del contador en segundos flanco negativo
        uint32_t tiempo;                         // valor del contador
        uint32_t i=0;
 
	c='u';                                   // Initialize UART
        gpio0->dir=0x00; 
  860210:	78 01 00 86 	mvhi r1,0x86
  860214:	38 21 06 9c 	ori r1,r1,0x69c
  860218:	28 21 00 00 	lw r1,(r1+0)
       gpio0->write=0xFF;
  86021c:	34 02 00 ff 	mvi r2,255
        uint32_t x2=0;                           // valor del contador en segundos flanco negativo
        uint32_t tiempo;                         // valor del contador
        uint32_t i=0;
 
	c='u';                                   // Initialize UART
        gpio0->dir=0x00; 
  860220:	58 20 00 08 	sw (r1+8),r0
       gpio0->write=0xFF;
  860224:	58 22 00 04 	sw (r1+4),r2
       //for(;;)
        //prueba();
      
	
        irq_enable();
  860228:	fb ff ff c6 	calli 860140 <irq_enable>
        irq_set_mask(0x02);
  86022c:	34 01 00 02 	mvi r1,2
  860230:	fb ff ff ca 	calli 860158 <irq_set_mask>
  860234:	e0 00 00 00 	bi 860234 <main+0x2c>

00860238 <isr_null>:
/***************************************************************************
 * IRQ handling
 */
void isr_null()
{
}
  860238:	c3 a0 00 00 	ret

0086023c <irq_handler>:
        uint32_t tcr;



        tem=0;
        if(gpio0->read==0x01)
  86023c:	78 01 00 86 	mvhi r1,0x86
  860240:	38 21 06 9c 	ori r1,r1,0x69c
  860244:	28 21 00 00 	lw r1,(r1+0)
{
        uint32_t tcr;



        tem=0;
  860248:	78 02 00 86 	mvhi r2,0x86
  86024c:	38 42 06 ac 	ori r2,r2,0x6ac
        if(gpio0->read==0x01)
  860250:	28 23 00 00 	lw r3,(r1+0)
{
        uint32_t tcr;



        tem=0;
  860254:	58 40 00 00 	sw (r2+0),r0
        if(gpio0->read==0x01)
  860258:	34 01 00 01 	mvi r1,1
  86025c:	44 61 00 16 	be r3,r1,8602b4 <irq_handler+0x78>
              {
        timer0->counter1 = 0;                       // pone el contador en 0
	timer0->tcr1 = TIMER_EN;
                    }                                // habilita el timer 0
        else {
                    timer0->tcr1 = 0;
  860260:	78 01 00 86 	mvhi r1,0x86
  860264:	38 21 06 a4 	ori r1,r1,0x6a4
  860268:	28 23 00 00 	lw r3,(r1+0)
                    tem=timer0->counter1;

                    uart_putchar(tem);
  86026c:	78 01 00 86 	mvhi r1,0x86
  860270:	38 21 06 94 	ori r1,r1,0x694
              {
        timer0->counter1 = 0;                       // pone el contador en 0
	timer0->tcr1 = TIMER_EN;
                    }                                // habilita el timer 0
        else {
                    timer0->tcr1 = 0;
  860274:	58 60 00 0c 	sw (r3+12),r0
                    tem=timer0->counter1;
  860278:	28 63 00 14 	lw r3,(r3+20)

                    uart_putchar(tem);
  86027c:	28 21 00 00 	lw r1,(r1+0)
        timer0->counter1 = 0;                       // pone el contador en 0
	timer0->tcr1 = TIMER_EN;
                    }                                // habilita el timer 0
        else {
                    timer0->tcr1 = 0;
                    tem=timer0->counter1;
  860280:	58 43 00 00 	sw (r2+0),r3

                    uart_putchar(tem);
  860284:	20 64 00 ff 	andi r4,r3,0xff
	return uart1->rxtx;
}

void uart_putchar(char c)
{
	while (uart0->ucr & UART_BUSY) ;
  860288:	28 22 00 00 	lw r2,(r1+0)
  86028c:	20 42 00 10 	andi r2,r2,0x10
  860290:	5c 40 ff fe 	bne r2,r0,860288 <irq_handler+0x4c>
        else {
                    timer0->tcr1 = 0;
                    tem=timer0->counter1;

                    uart_putchar(tem);
                    uart_putchar(tem>>8);
  860294:	00 63 00 08 	srui r3,r3,8
}

void uart_putchar(char c)
{
	while (uart0->ucr & UART_BUSY) ;
	uart0->rxtx = c;
  860298:	58 24 00 04 	sw (r1+4),r4
        else {
                    timer0->tcr1 = 0;
                    tem=timer0->counter1;

                    uart_putchar(tem);
                    uart_putchar(tem>>8);
  86029c:	20 63 00 ff 	andi r3,r3,0xff
	return uart1->rxtx;
}

void uart_putchar(char c)
{
	while (uart0->ucr & UART_BUSY) ;
  8602a0:	28 22 00 00 	lw r2,(r1+0)
  8602a4:	20 42 00 10 	andi r2,r2,0x10
  8602a8:	5c 40 ff fe 	bne r2,r0,8602a0 <irq_handler+0x64>
	uart0->rxtx = c;
  8602ac:	58 23 00 04 	sw (r1+4),r3
  8602b0:	c3 a0 00 00 	ret


        tem=0;
        if(gpio0->read==0x01)
              {
        timer0->counter1 = 0;                       // pone el contador en 0
  8602b4:	78 01 00 86 	mvhi r1,0x86
  8602b8:	38 21 06 a4 	ori r1,r1,0x6a4
  8602bc:	28 21 00 00 	lw r1,(r1+0)
	timer0->tcr1 = TIMER_EN;
  8602c0:	34 02 00 08 	mvi r2,8


        tem=0;
        if(gpio0->read==0x01)
              {
        timer0->counter1 = 0;                       // pone el contador en 0
  8602c4:	58 20 00 14 	sw (r1+20),r0
	timer0->tcr1 = TIMER_EN;
  8602c8:	58 22 00 0c 	sw (r1+12),r2
  8602cc:	c3 a0 00 00 	ret

008602d0 <isr_init>:
              }
             
 }

void isr_init()
{
  8602d0:	78 01 00 86 	mvhi r1,0x86
  8602d4:	78 02 00 86 	mvhi r2,0x86
  8602d8:	38 21 06 b4 	ori r1,r1,0x6b4
  8602dc:	38 42 02 38 	ori r2,r2,0x238

              }
             
 }

void isr_init()
  8602e0:	34 23 00 80 	addi r3,r1,128
{
	int i;
	for(i=0; i<32; i++)
		isr_table[i] = &isr_null;
  8602e4:	58 22 00 00 	sw (r1+0),r2
  8602e8:	34 21 00 04 	addi r1,r1,4
 }

void isr_init()
{
	int i;
	for(i=0; i<32; i++)
  8602ec:	5c 23 ff fe 	bne r1,r3,8602e4 <isr_init+0x14>
		isr_table[i] = &isr_null;
}
  8602f0:	c3 a0 00 00 	ret

008602f4 <isr_register>:

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
  8602f4:	78 03 00 86 	mvhi r3,0x86
  8602f8:	3c 21 00 02 	sli r1,r1,2
  8602fc:	38 63 06 b4 	ori r3,r3,0x6b4
  860300:	b4 61 18 00 	add r3,r3,r1
  860304:	58 62 00 00 	sw (r3+0),r2
}
  860308:	c3 a0 00 00 	ret

0086030c <isr_unregister>:

void isr_unregister(int irq)
{
	isr_table[irq] = &isr_null;
  86030c:	78 03 00 86 	mvhi r3,0x86
  860310:	3c 21 00 02 	sli r1,r1,2
  860314:	38 63 06 b4 	ori r3,r3,0x6b4
  860318:	78 02 00 86 	mvhi r2,0x86
  86031c:	b4 61 18 00 	add r3,r3,r1
  860320:	38 42 02 38 	ori r2,r2,0x238
  860324:	58 62 00 00 	sw (r3+0),r2
}
  860328:	c3 a0 00 00 	ret

0086032c <msleep>:
void msleep(uint32_t msec)
{
	uint32_t tcr;

	// Use timer0.1
	timer0->compare1 = (FCPU/1000)*msec;
  86032c:	78 04 00 86 	mvhi r4,0x86
  860330:	38 84 06 68 	ori r4,r4,0x668
  860334:	28 83 00 00 	lw r3,(r4+0)
  860338:	78 02 00 86 	mvhi r2,0x86
  86033c:	38 42 06 a4 	ori r2,r2,0x6a4
  860340:	28 42 00 00 	lw r2,(r2+0)
  860344:	88 23 08 00 	mul r1,r1,r3
  860348:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
  86034c:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
  860350:	34 01 00 08 	mvi r1,8
  860354:	58 41 00 0c 	sw (r2+12),r1

	do {
		//halt();
 		tcr = timer0->tcr1;
  860358:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
  86035c:	20 21 00 01 	andi r1,r1,0x1
  860360:	44 20 ff fe 	be r1,r0,860358 <msleep+0x2c>
}
  860364:	c3 a0 00 00 	ret

00860368 <nsleep>:
uint32_t nsleep(uint32_t nsec)
{
	uint32_t tcr;

	// Use timer0.1    
	timer0->compare1 = (FCPU/1000000)*nsec;
  860368:	78 02 00 86 	mvhi r2,0x86
  86036c:	38 42 06 a4 	ori r2,r2,0x6a4
  860370:	28 42 00 00 	lw r2,(r2+0)
  860374:	08 21 00 64 	muli r1,r1,100
  860378:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
  86037c:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
  860380:	34 01 00 08 	mvi r1,8
  860384:	58 41 00 0c 	sw (r2+12),r1

	do {
		//halt();
 		tcr = timer0->tcr1;
  860388:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
  86038c:	20 21 00 01 	andi r1,r1,0x1
  860390:	44 20 ff fe 	be r1,r0,860388 <nsleep+0x20>

  return timer0->counter1;
  860394:	28 41 00 14 	lw r1,(r2+20)
}
  860398:	c3 a0 00 00 	ret

0086039c <m1sleep>:
void m1sleep(uint32_t msec)
{
	uint32_t tcr;

	// Use timer0.1
	timer1->compare1 = (FCPU/1000)*msec;
  86039c:	78 04 00 86 	mvhi r4,0x86
  8603a0:	38 84 06 68 	ori r4,r4,0x668
  8603a4:	28 83 00 00 	lw r3,(r4+0)
  8603a8:	78 02 00 86 	mvhi r2,0x86
  8603ac:	38 42 06 a0 	ori r2,r2,0x6a0
  8603b0:	28 42 00 00 	lw r2,(r2+0)
  8603b4:	88 23 08 00 	mul r1,r1,r3
  8603b8:	58 41 00 10 	sw (r2+16),r1
	timer1->counter1 = 0;
  8603bc:	58 40 00 14 	sw (r2+20),r0
	timer1->tcr1 = TIMER_EN;
  8603c0:	34 01 00 08 	mvi r1,8
  8603c4:	58 41 00 0c 	sw (r2+12),r1

	do {
		//halt();
 		tcr = timer1->tcr1;
  8603c8:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
  8603cc:	20 21 00 01 	andi r1,r1,0x1
  8603d0:	44 20 ff fe 	be r1,r0,8603c8 <m1sleep+0x2c>
}
  8603d4:	c3 a0 00 00 	ret

008603d8 <flancopos>:

void flancopos()                                // devuelve el valor del flanco negativo
{
	uint32_t tcr;
	// Use timer0.1
	timer0->counter1 = 0;                       // pone el contador en 0 
  8603d8:	78 01 00 86 	mvhi r1,0x86
  8603dc:	38 21 06 a4 	ori r1,r1,0x6a4
  8603e0:	28 21 00 00 	lw r1,(r1+0)
	timer0->tcr1 = TIMER_EN;                    // habilita el timer 0 
  8603e4:	34 02 00 08 	mvi r2,8

void flancopos()                                // devuelve el valor del flanco negativo
{
	uint32_t tcr;
	// Use timer0.1
	timer0->counter1 = 0;                       // pone el contador en 0 
  8603e8:	58 20 00 14 	sw (r1+20),r0
	timer0->tcr1 = TIMER_EN;                    // habilita el timer 0 
  8603ec:	58 22 00 0c 	sw (r1+12),r2
                 
   
}
  8603f0:	c3 a0 00 00 	ret

008603f4 <flanconeg>:
uint32_t flanconeg()                                // devuelve el valor del flanco positivo
{
	uint32_t tiempo;
	// Use timer0.1
        timer0->tcr1 = 0;                           // pone tcrq del timer 0 en cero  
  8603f4:	78 01 00 86 	mvhi r1,0x86
  8603f8:	38 21 06 a4 	ori r1,r1,0x6a4
  8603fc:	28 21 00 00 	lw r1,(r1+0)
  860400:	58 20 00 0c 	sw (r1+12),r0
       	
	return timer0->counter1;                    // devuelve el contador1 del timer0    
  860404:	28 21 00 14 	lw r1,(r1+20)
	
}
  860408:	c3 a0 00 00 	ret

0086040c <uart_init>:
	//uart0->lcr = 0x03;  // Line Control Register:    8N1
	//uart0->mcr = 0x00;  // Modem Control Register

	// Setup Divisor register (Fclk / Baud)
	//uart0->div = (FCPU/(57600*16));
}
  86040c:	c3 a0 00 00 	ret

00860410 <prueba1>:
         }          

}

void prueba1()                         // genera un tren de pulsos flanco positivo y negativo 4 ms
{
  860410:	37 9c ff f8 	addi sp,sp,-8
  860414:	5b 8b 00 08 	sw (sp+8),r11
  860418:	5b 9d 00 04 	sw (sp+4),ra
      gpio0->write=0x00;   
  86041c:	78 0b 00 86 	mvhi r11,0x86
  860420:	39 6b 06 9c 	ori r11,r11,0x69c
  860424:	29 62 00 00 	lw r2,(r11+0)
      msleep(19);
  860428:	34 01 00 13 	mvi r1,19

}

void prueba1()                         // genera un tren de pulsos flanco positivo y negativo 4 ms
{
      gpio0->write=0x00;   
  86042c:	58 40 00 04 	sw (r2+4),r0
      msleep(19);
  860430:	fb ff ff bf 	calli 86032c <msleep>
      gpio0->write=0x01;
  860434:	29 62 00 00 	lw r2,(r11+0)
  860438:	34 03 00 01 	mvi r3,1
      msleep(6);
  86043c:	34 01 00 06 	mvi r1,6

void prueba1()                         // genera un tren de pulsos flanco positivo y negativo 4 ms
{
      gpio0->write=0x00;   
      msleep(19);
      gpio0->write=0x01;
  860440:	58 43 00 04 	sw (r2+4),r3
      msleep(6);
  860444:	fb ff ff ba 	calli 86032c <msleep>
}
  860448:	2b 9d 00 04 	lw ra,(sp+4)
  86044c:	2b 8b 00 08 	lw r11,(sp+8)
  860450:	37 9c 00 08 	addi sp,sp,8
  860454:	c3 a0 00 00 	ret

00860458 <uart_getchar>:
/***************************************************************************
 * UART Functions
 */

char uart_getchar()
{   
  860458:	78 01 00 86 	mvhi r1,0x86
  86045c:	38 21 06 94 	ori r1,r1,0x694
  860460:	28 22 00 00 	lw r2,(r1+0)
	while (! (uart0->ucr & UART_DR)) ;
  860464:	28 41 00 00 	lw r1,(r2+0)
  860468:	20 21 00 01 	andi r1,r1,0x1
  86046c:	44 20 ff fe 	be r1,r0,860464 <uart_getchar+0xc>
	return uart0->rxtx;
  860470:	28 41 00 04 	lw r1,(r2+4)
}
  860474:	20 21 00 ff 	andi r1,r1,0xff
  860478:	c3 a0 00 00 	ret

0086047c <uart_getint>:
int uart_getint()
{
  86047c:	78 01 00 86 	mvhi r1,0x86
  860480:	38 21 06 94 	ori r1,r1,0x694
  860484:	28 22 00 00 	lw r2,(r1+0)
 while (! (uart0->ucr & UART_DR)) ;
  860488:	28 41 00 00 	lw r1,(r2+0)
  86048c:	20 21 00 01 	andi r1,r1,0x1
  860490:	44 20 ff fe 	be r1,r0,860488 <uart_getint+0xc>
	return uart0->rxtx;
  860494:	28 41 00 04 	lw r1,(r2+4)

}
  860498:	c3 a0 00 00 	ret

0086049c <uart_putchar1>:

void uart_putchar1(char f) //obtener caracter de la variable 
{
  86049c:	78 02 00 86 	mvhi r2,0x86
  8604a0:	38 42 06 98 	ori r2,r2,0x698
  8604a4:	28 43 00 00 	lw r3,(r2+0)
  8604a8:	20 21 00 ff 	andi r1,r1,0xff
	while (uart1->ucr & UART_BUSY) ;
  8604ac:	28 62 00 00 	lw r2,(r3+0)
  8604b0:	20 42 00 10 	andi r2,r2,0x10
  8604b4:	5c 40 ff fe 	bne r2,r0,8604ac <uart_putchar1+0x10>
	uart1->rxtx = f;
  8604b8:	58 61 00 04 	sw (r3+4),r1
}
  8604bc:	c3 a0 00 00 	ret

008604c0 <uart_getchar1>:

char uart_getchar1()
{   
  8604c0:	78 01 00 86 	mvhi r1,0x86
  8604c4:	38 21 06 98 	ori r1,r1,0x698
  8604c8:	28 22 00 00 	lw r2,(r1+0)
	while (! (uart1->ucr & UART_DR)) ;
  8604cc:	28 41 00 00 	lw r1,(r2+0)
  8604d0:	20 21 00 01 	andi r1,r1,0x1
  8604d4:	44 20 ff fe 	be r1,r0,8604cc <uart_getchar1+0xc>
	return uart1->rxtx;
  8604d8:	28 41 00 04 	lw r1,(r2+4)
}
  8604dc:	20 21 00 ff 	andi r1,r1,0xff
  8604e0:	c3 a0 00 00 	ret

008604e4 <uart_putchar>:

void uart_putchar(char c)
{
  8604e4:	78 02 00 86 	mvhi r2,0x86
  8604e8:	38 42 06 94 	ori r2,r2,0x694
  8604ec:	28 43 00 00 	lw r3,(r2+0)
  8604f0:	20 21 00 ff 	andi r1,r1,0xff
	while (uart0->ucr & UART_BUSY) ;
  8604f4:	28 62 00 00 	lw r2,(r3+0)
  8604f8:	20 42 00 10 	andi r2,r2,0x10
  8604fc:	5c 40 ff fe 	bne r2,r0,8604f4 <uart_putchar+0x10>
	uart0->rxtx = c;
  860500:	58 61 00 04 	sw (r3+4),r1
}
  860504:	c3 a0 00 00 	ret

00860508 <uart_putint>:
void uart_putint(int d)
{
  860508:	78 02 00 86 	mvhi r2,0x86
  86050c:	38 42 06 94 	ori r2,r2,0x694
  860510:	28 43 00 00 	lw r3,(r2+0)
	while (uart0->ucr & UART_BUSY) ;
  860514:	28 62 00 00 	lw r2,(r3+0)
  860518:	20 42 00 10 	andi r2,r2,0x10
  86051c:	5c 40 ff fe 	bne r2,r0,860514 <uart_putint+0xc>
	uart0->rxtx = d;
  860520:	58 61 00 04 	sw (r3+4),r1
}
  860524:	c3 a0 00 00 	ret

00860528 <uart_putstr>:

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
  860528:	40 24 00 00 	lbu r4,(r1+0)
  86052c:	44 80 00 0b 	be r4,r0,860558 <uart_putstr+0x30>
  860530:	78 02 00 86 	mvhi r2,0x86
  860534:	38 42 06 94 	ori r2,r2,0x694
  860538:	28 43 00 00 	lw r3,(r2+0)
	return uart1->rxtx;
}

void uart_putchar(char c)
{
	while (uart0->ucr & UART_BUSY) ;
  86053c:	28 62 00 00 	lw r2,(r3+0)
  860540:	20 42 00 10 	andi r2,r2,0x10
  860544:	5c 40 ff fe 	bne r2,r0,86053c <uart_putstr+0x14>
	uart0->rxtx = c;
  860548:	58 64 00 04 	sw (r3+4),r4
void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
		uart_putchar(*c);
		c++;
  86054c:	34 21 00 01 	addi r1,r1,1
}

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
  860550:	40 24 00 00 	lbu r4,(r1+0)
  860554:	5c 82 ff fa 	bne r4,r2,86053c <uart_putstr+0x14>
  860558:	c3 a0 00 00 	ret

0086055c <prueba>:
/***************************************************************************
 * GPIO Funciones pruebas
 */

void prueba()                          // Si se activa el pin6 del GPIO prenda el led1
{ 
  86055c:	37 9c ff f4 	addi sp,sp,-12
  860560:	5b 8b 00 0c 	sw (sp+12),r11
  860564:	5b 8c 00 08 	sw (sp+8),r12
  860568:	5b 9d 00 04 	sw (sp+4),ra
     uint32_t out1;
     uint32_t entrada;
                          
     entrada = gpio0->read;
  86056c:	78 0b 00 86 	mvhi r11,0x86
  860570:	39 6b 06 9c 	ori r11,r11,0x69c
  860574:	29 62 00 00 	lw r2,(r11+0)
     uart_putstr('a');
  860578:	34 01 00 61 	mvi r1,97
void prueba()                          // Si se activa el pin6 del GPIO prenda el led1
{ 
     uint32_t out1;
     uint32_t entrada;
                          
     entrada = gpio0->read;
  86057c:	28 4c 00 00 	lw r12,(r2+0)
     uart_putstr('a');
  860580:	fb ff ff ea 	calli 860528 <uart_putstr>
     gpio0->write=0x00;   
  860584:	29 61 00 00 	lw r1,(r11+0)
                        
      if(entrada==0x40)
  860588:	34 02 00 40 	mvi r2,64
     uint32_t out1;
     uint32_t entrada;
                          
     entrada = gpio0->read;
     uart_putstr('a');
     gpio0->write=0x00;   
  86058c:	58 20 00 04 	sw (r1+4),r0
                        
      if(entrada==0x40)
  860590:	45 82 00 06 	be r12,r2,8605a8 <prueba+0x4c>
            out1 = 0x01;
            gpio0->write = out1;                     
            msleep(100);
         }          

}
  860594:	2b 9d 00 04 	lw ra,(sp+4)
  860598:	2b 8b 00 0c 	lw r11,(sp+12)
  86059c:	2b 8c 00 08 	lw r12,(sp+8)
  8605a0:	37 9c 00 0c 	addi sp,sp,12
  8605a4:	c3 a0 00 00 	ret
     gpio0->write=0x00;   
                        
      if(entrada==0x40)
         {
            out1 = 0x01;
            gpio0->write = out1;                     
  8605a8:	34 02 00 01 	mvi r2,1
  8605ac:	58 22 00 04 	sw (r1+4),r2
            msleep(100);
  8605b0:	34 01 00 64 	mvi r1,100
  8605b4:	fb ff ff 5e 	calli 86032c <msleep>
         }          

}
  8605b8:	2b 9d 00 04 	lw ra,(sp+4)
  8605bc:	2b 8b 00 0c 	lw r11,(sp+12)
  8605c0:	2b 8c 00 08 	lw r12,(sp+8)
  8605c4:	37 9c 00 0c 	addi sp,sp,12
  8605c8:	c3 a0 00 00 	ret

008605cc <sensor>:
/***************************************************************************
 *Sensor functions
 */

void sensor()
{
  8605cc:	37 9c ff ec 	addi sp,sp,-20
  8605d0:	5b 8b 00 14 	sw (sp+20),r11
  8605d4:	5b 8c 00 10 	sw (sp+16),r12
  8605d8:	5b 8d 00 0c 	sw (sp+12),r13
  8605dc:	5b 8e 00 08 	sw (sp+8),r14
  8605e0:	5b 9d 00 04 	sw (sp+4),ra



t=18;                                       //milisegundos señal low  
        
gpio0->write = 0x00;                        //señal de reset
  8605e4:	78 0c 00 86 	mvhi r12,0x86
  8605e8:	39 8c 06 9c 	ori r12,r12,0x69c
  8605ec:	29 82 00 00 	lw r2,(r12+0)
msleep(t);
  8605f0:	34 01 00 12 	mvi r1,18



t=18;                                       //milisegundos señal low  
        
gpio0->write = 0x00;                        //señal de reset
  8605f4:	58 40 00 04 	sw (r2+4),r0
msleep(t);
  8605f8:	fb ff ff 4d 	calli 86032c <msleep>
gpio0->write = 0x40;                         
  8605fc:	29 82 00 00 	lw r2,(r12+0)
  860600:	34 01 00 40 	mvi r1,64
gpio0->dir=0x0F;
  860604:	34 03 00 0f 	mvi r3,15

t=18;                                       //milisegundos señal low  
        
gpio0->write = 0x00;                        //señal de reset
msleep(t);
gpio0->write = 0x40;                         
  860608:	58 41 00 04 	sw (r2+4),r1
gpio0->dir=0x0F;
  86060c:	58 43 00 08 	sw (r2+8),r3
l=gpio0->read;
  860610:	28 4b 00 00 	lw r11,(r2+0)

while (l == 0x40)                          // espera hasta que el sensor responda
  860614:	5d 61 00 0a 	bne r11,r1,86063c <sensor+0x70>
  860618:	78 0d 00 86 	mvhi r13,0x86
  86061c:	39 ad 06 6c 	ori r13,r13,0x66c
  860620:	34 0e 00 40 	mvi r14,64
  860624:	e0 00 00 02 	bi 86062c <sensor+0x60>
  860628:	29 82 00 00 	lw r2,(r12+0)
{
  l=gpio0->read;
  86062c:	28 4b 00 00 	lw r11,(r2+0)
  uart_putstr("esperando respuesta");
  860630:	b9 a0 08 00 	mv r1,r13
  860634:	fb ff ff bd 	calli 860528 <uart_putstr>
msleep(t);
gpio0->write = 0x40;                         
gpio0->dir=0x0F;
l=gpio0->read;

while (l == 0x40)                          // espera hasta que el sensor responda
  860638:	45 6e ff fc 	be r11,r14,860628 <sensor+0x5c>
{
  l=gpio0->read;
  uart_putstr("esperando respuesta");
}
if(l==0x00)
  86063c:	5d 60 00 04 	bne r11,r0,86064c <sensor+0x80>
uart_putstr("responde el sensor"); 
  860640:	78 01 00 86 	mvhi r1,0x86
  860644:	38 21 06 80 	ori r1,r1,0x680
  860648:	fb ff ff b8 	calli 860528 <uart_putstr>

} 
  86064c:	2b 9d 00 04 	lw ra,(sp+4)
  860650:	2b 8b 00 14 	lw r11,(sp+20)
  860654:	2b 8c 00 10 	lw r12,(sp+16)
  860658:	2b 8d 00 0c 	lw r13,(sp+12)
  86065c:	2b 8e 00 08 	lw r14,(sp+8)
  860660:	37 9c 00 14 	addi sp,sp,20
  860664:	c3 a0 00 00 	ret
