
image:     formato del fichero elf32-lm32

Secciones:
Ind Nombre        Tamaño    VMA       LMA       Desp fich Alin
  0 .text         000003a0  00860000  00860000  00000054  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  1 .data         00000010  008603a0  008603a0  000003f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000084  008603b0  008603b0  00000404  2**2
                  ALLOC
  3 .debug_abbrev 0000025f  00000000  00000000  00000404  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000005b2  00000000  00000000  00000663  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000393  00000000  00000000  00000c15  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000140  00000000  00000000  00000fa8  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 0000016c  00000000  00000000  000010e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubtypes 00000085  00000000  00000000  00001254  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000040  00000000  00000000  000012d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001dd  00000000  00000000  00001319  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .comment      00000011  00000000  00000000  000014f6  2**0
                  CONTENTS, READONLY
 12 .debug_loc    0000011a  00000000  00000000  00001507  2**0
                  CONTENTS, READONLY, DEBUGGING

Desensamblado de la sección .text:

00860000 <_ftext>:
  860000:	98 00 00 00 	xor r0,r0,r0
  860004:	d0 00 00 00 	wcsr IE,r0
  860008:	78 01 00 86 	mvhi r1,0x86
  86000c:	38 21 00 00 	ori r1,r1,0x0
  860010:	d0 e1 00 00 	wcsr EBA,r1
  860014:	f8 00 00 03 	calli 860020 <_crt0>
  860018:	34 00 00 00 	nop
  86001c:	34 00 00 00 	nop

00860020 <_crt0>:
  860020:	78 1c 00 86 	mvhi sp,0x86
  860024:	3b 9c 0f fc 	ori sp,sp,0xffc
  860028:	78 1a 00 86 	mvhi gp,0x86
  86002c:	3b 5a 03 b0 	ori gp,gp,0x3b0
  860030:	78 01 00 86 	mvhi r1,0x86
  860034:	38 21 03 b0 	ori r1,r1,0x3b0
  860038:	78 03 00 86 	mvhi r3,0x86
  86003c:	38 63 04 34 	ori r3,r3,0x434

00860040 <.clearBSS>:
  860040:	44 23 00 04 	be r1,r3,860050 <.callMain>
  860044:	58 20 00 00 	sw (r1+0),r0
  860048:	34 21 00 04 	addi r1,r1,4
  86004c:	e3 ff ff fd 	bi 860040 <.clearBSS>

00860050 <.callMain>:
  860050:	34 01 00 00 	mvi r1,0
  860054:	34 02 00 00 	mvi r2,0
  860058:	34 03 00 00 	mvi r3,0
  86005c:	f8 00 00 0c 	calli 86008c <main>

00860060 <irq_enable>:
  860060:	34 01 00 01 	mvi r1,1
  860064:	d0 01 00 00 	wcsr IE,r1
  860068:	c3 a0 00 00 	ret

0086006c <irq_mask>:
  86006c:	34 01 00 0f 	mvi r1,15
  860070:	d0 21 00 00 	wcsr IM,r1
  860074:	c3 a0 00 00 	ret

00860078 <irq_disable>:
  860078:	34 01 00 00 	mvi r1,0
  86007c:	d0 01 00 00 	wcsr IE,r1
  860080:	c3 a0 00 00 	ret

00860084 <jump>:
  860084:	c0 20 00 00 	b r1

00860088 <halt>:
  860088:	e0 00 00 00 	bi 860088 <halt>

0086008c <main>:
 *
 */
#include "soc-hw.h"

int main()
{
  86008c:	37 9c ff fc 	addi sp,sp,-4
  860090:	5b 9d 00 04 	sw (sp+4),ra
	uint8_t  c;

	// Initialize UART

	c='u';
uart_putchar('i');
  860094:	34 01 00 69 	mvi r1,105
  860098:	f8 00 00 88 	calli 8602b8 <uart_putchar>

gpio0->dir=0x0F;
  86009c:	78 01 00 86 	mvhi r1,0x86
  8600a0:	38 21 03 a8 	ori r1,r1,0x3a8
  8600a4:	28 21 00 00 	lw r1,(r1+0)
  8600a8:	34 02 00 0f 	mvi r2,15
  8600ac:	58 22 00 08 	sw (r1+8),r2

//for(;;)
prueba1();
  8600b0:	f8 00 00 4f 	calli 8601ec <prueba1>
{
  uart_putchar(uart_getchar1());

}*/
	
}
  8600b4:	2b 9d 00 04 	lw ra,(sp+4)
  8600b8:	37 9c 00 04 	addi sp,sp,4
  8600bc:	c3 a0 00 00 	ret

008600c0 <isr_null>:
/***************************************************************************
 * IRQ handling
 */
void isr_null()
{
}
  8600c0:	c3 a0 00 00 	ret

008600c4 <irq_handler>:

void irq_handler(uint32_t pending)
{
  8600c4:	37 9c ff f0 	addi sp,sp,-16
  8600c8:	5b 8b 00 10 	sw (sp+16),r11
  8600cc:	5b 8c 00 0c 	sw (sp+12),r12
  8600d0:	5b 8d 00 08 	sw (sp+8),r13
  8600d4:	5b 9d 00 04 	sw (sp+4),ra
  8600d8:	78 0b 00 86 	mvhi r11,0x86
  8600dc:	39 6b 03 b4 	ori r11,r11,0x3b4
  8600e0:	b8 20 60 00 	mv r12,r1
 */
void isr_null()
{
}

void irq_handler(uint32_t pending)
  8600e4:	35 6d 00 80 	addi r13,r11,128
  8600e8:	e0 00 00 04 	bi 8600f8 <irq_handler+0x34>
{
	int i;

	for(i=0; i<32; i++) {
		if (pending & 0x01) (*isr_table[i])();
  8600ec:	35 6b 00 04 	addi r11,r11,4

void irq_handler(uint32_t pending)
{
	int i;

	for(i=0; i<32; i++) {
  8600f0:	45 6d 00 08 	be r11,r13,860110 <irq_handler+0x4c>
		if (pending & 0x01) (*isr_table[i])();
		pending >>= 1;
  8600f4:	01 8c 00 01 	srui r12,r12,1
void irq_handler(uint32_t pending)
{
	int i;

	for(i=0; i<32; i++) {
		if (pending & 0x01) (*isr_table[i])();
  8600f8:	21 81 00 01 	andi r1,r12,0x1
  8600fc:	44 20 ff fc 	be r1,r0,8600ec <irq_handler+0x28>
  860100:	29 61 00 00 	lw r1,(r11+0)
  860104:	35 6b 00 04 	addi r11,r11,4
  860108:	d8 20 00 00 	call r1

void irq_handler(uint32_t pending)
{
	int i;

	for(i=0; i<32; i++) {
  86010c:	5d 6d ff fa 	bne r11,r13,8600f4 <irq_handler+0x30>
		if (pending & 0x01) (*isr_table[i])();
		pending >>= 1;
	}
}
  860110:	2b 9d 00 04 	lw ra,(sp+4)
  860114:	2b 8b 00 10 	lw r11,(sp+16)
  860118:	2b 8c 00 0c 	lw r12,(sp+12)
  86011c:	2b 8d 00 08 	lw r13,(sp+8)
  860120:	37 9c 00 10 	addi sp,sp,16
  860124:	c3 a0 00 00 	ret

00860128 <isr_init>:

void isr_init()
{
  860128:	78 01 00 86 	mvhi r1,0x86
  86012c:	78 02 00 86 	mvhi r2,0x86
  860130:	38 21 03 b4 	ori r1,r1,0x3b4
  860134:	38 42 00 c0 	ori r2,r2,0xc0
		if (pending & 0x01) (*isr_table[i])();
		pending >>= 1;
	}
}

void isr_init()
  860138:	34 23 00 80 	addi r3,r1,128
{
	int i;
	for(i=0; i<32; i++)
		isr_table[i] = &isr_null;
  86013c:	58 22 00 00 	sw (r1+0),r2
  860140:	34 21 00 04 	addi r1,r1,4
}

void isr_init()
{
	int i;
	for(i=0; i<32; i++)
  860144:	5c 23 ff fe 	bne r1,r3,86013c <isr_init+0x14>
		isr_table[i] = &isr_null;
}
  860148:	c3 a0 00 00 	ret

0086014c <isr_register>:

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
  86014c:	78 03 00 86 	mvhi r3,0x86
  860150:	3c 21 00 02 	sli r1,r1,2
  860154:	38 63 03 b4 	ori r3,r3,0x3b4
  860158:	b4 61 18 00 	add r3,r3,r1
  86015c:	58 62 00 00 	sw (r3+0),r2
}
  860160:	c3 a0 00 00 	ret

00860164 <isr_unregister>:

void isr_unregister(int irq)
{
	isr_table[irq] = &isr_null;
  860164:	78 03 00 86 	mvhi r3,0x86
  860168:	3c 21 00 02 	sli r1,r1,2
  86016c:	38 63 03 b4 	ori r3,r3,0x3b4
  860170:	78 02 00 86 	mvhi r2,0x86
  860174:	b4 61 18 00 	add r3,r3,r1
  860178:	38 42 00 c0 	ori r2,r2,0xc0
  86017c:	58 62 00 00 	sw (r3+0),r2
}
  860180:	c3 a0 00 00 	ret

00860184 <msleep>:
void msleep(uint32_t msec)
{
	uint32_t tcr;

	// Use timer0.1
	timer0->compare1 = (FCPU/1000)*msec;
  860184:	78 02 00 86 	mvhi r2,0x86
  860188:	38 42 03 ac 	ori r2,r2,0x3ac
  86018c:	38 03 c3 50 	mvu r3,0xc350
  860190:	28 42 00 00 	lw r2,(r2+0)
  860194:	88 23 08 00 	mul r1,r1,r3
  860198:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
  86019c:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
  8601a0:	34 01 00 08 	mvi r1,8
  8601a4:	58 41 00 0c 	sw (r2+12),r1

	do {
		//halt();
 		tcr = timer0->tcr1;
  8601a8:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
  8601ac:	20 21 00 01 	andi r1,r1,0x1
  8601b0:	44 20 ff fe 	be r1,r0,8601a8 <msleep+0x24>
}
  8601b4:	c3 a0 00 00 	ret

008601b8 <nsleep>:
void nsleep(uint32_t nsec)
{
	uint32_t tcr;

	// Use timer0.1
	timer0->compare1 = (FCPU/1000000)*nsec;
  8601b8:	78 02 00 86 	mvhi r2,0x86
  8601bc:	38 42 03 ac 	ori r2,r2,0x3ac
  8601c0:	28 42 00 00 	lw r2,(r2+0)
  8601c4:	08 21 00 32 	muli r1,r1,50
  8601c8:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
  8601cc:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
  8601d0:	34 01 00 08 	mvi r1,8
  8601d4:	58 41 00 0c 	sw (r2+12),r1

	do {
		//halt();
 		tcr = timer0->tcr1;
  8601d8:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
  8601dc:	20 21 00 01 	andi r1,r1,0x1
  8601e0:	44 20 ff fe 	be r1,r0,8601d8 <nsleep+0x20>
}
  8601e4:	c3 a0 00 00 	ret

008601e8 <uart_init>:
	//uart0->lcr = 0x03;  // Line Control Register:    8N1
	//uart0->mcr = 0x00;  // Modem Control Register

	// Setup Divisor register (Fclk / Baud)
	//uart0->div = (FCPU/(57600*16));
}
  8601e8:	c3 a0 00 00 	ret

008601ec <prueba1>:


          
}
void prueba1()
{
  8601ec:	37 9c ff f8 	addi sp,sp,-8
  8601f0:	5b 8b 00 08 	sw (sp+8),r11
  8601f4:	5b 9d 00 04 	sw (sp+4),ra
                         gpio0->write=0x00;   
  8601f8:	78 0b 00 86 	mvhi r11,0x86
  8601fc:	39 6b 03 a8 	ori r11,r11,0x3a8
  860200:	29 62 00 00 	lw r2,(r11+0)
                         msleep(5);
  860204:	34 01 00 05 	mvi r1,5

          
}
void prueba1()
{
                         gpio0->write=0x00;   
  860208:	58 40 00 04 	sw (r2+4),r0
                         msleep(5);
  86020c:	fb ff ff de 	calli 860184 <msleep>
                         gpio0->write=0x01;
  860210:	29 61 00 00 	lw r1,(r11+0)
  860214:	34 02 00 01 	mvi r2,1
  860218:	58 22 00 04 	sw (r1+4),r2


}
  86021c:	2b 9d 00 04 	lw ra,(sp+4)
  860220:	2b 8b 00 08 	lw r11,(sp+8)
  860224:	37 9c 00 08 	addi sp,sp,8
  860228:	c3 a0 00 00 	ret

0086022c <uart_getchar>:
char uart_getchar()
{   
  86022c:	78 01 00 86 	mvhi r1,0x86
  860230:	38 21 03 a0 	ori r1,r1,0x3a0
  860234:	28 22 00 00 	lw r2,(r1+0)
	while (! (uart0->ucr & UART_DR)) ;
  860238:	28 41 00 00 	lw r1,(r2+0)
  86023c:	20 21 00 01 	andi r1,r1,0x1
  860240:	44 20 ff fe 	be r1,r0,860238 <uart_getchar+0xc>
	return uart0->rxtx;
  860244:	28 41 00 04 	lw r1,(r2+4)
}
  860248:	20 21 00 ff 	andi r1,r1,0xff
  86024c:	c3 a0 00 00 	ret

00860250 <uart_getint>:
int uart_getint()
{
  860250:	78 01 00 86 	mvhi r1,0x86
  860254:	38 21 03 a0 	ori r1,r1,0x3a0
  860258:	28 22 00 00 	lw r2,(r1+0)
 while (! (uart0->ucr & UART_DR)) ;
  86025c:	28 41 00 00 	lw r1,(r2+0)
  860260:	20 21 00 01 	andi r1,r1,0x1
  860264:	44 20 ff fe 	be r1,r0,86025c <uart_getint+0xc>
	return uart0->rxtx;
  860268:	28 41 00 04 	lw r1,(r2+4)

}
  86026c:	c3 a0 00 00 	ret

00860270 <uart_putchar1>:

void uart_putchar1(char f) //obtener caracter de la variavle 
{
  860270:	78 02 00 86 	mvhi r2,0x86
  860274:	38 42 03 a4 	ori r2,r2,0x3a4
  860278:	28 43 00 00 	lw r3,(r2+0)
  86027c:	20 21 00 ff 	andi r1,r1,0xff
	while (uart1->ucr & UART_BUSY) ;
  860280:	28 62 00 00 	lw r2,(r3+0)
  860284:	20 42 00 10 	andi r2,r2,0x10
  860288:	5c 40 ff fe 	bne r2,r0,860280 <uart_putchar1+0x10>
	uart1->rxtx = f;
  86028c:	58 61 00 04 	sw (r3+4),r1
}
  860290:	c3 a0 00 00 	ret

00860294 <uart_getchar1>:

char uart_getchar1()
{   
  860294:	78 01 00 86 	mvhi r1,0x86
  860298:	38 21 03 a4 	ori r1,r1,0x3a4
  86029c:	28 22 00 00 	lw r2,(r1+0)
	while (! (uart1->ucr & UART_DR)) ;
  8602a0:	28 41 00 00 	lw r1,(r2+0)
  8602a4:	20 21 00 01 	andi r1,r1,0x1
  8602a8:	44 20 ff fe 	be r1,r0,8602a0 <uart_getchar1+0xc>
	return uart1->rxtx;
  8602ac:	28 41 00 04 	lw r1,(r2+4)
}
  8602b0:	20 21 00 ff 	andi r1,r1,0xff
  8602b4:	c3 a0 00 00 	ret

008602b8 <uart_putchar>:

void uart_putchar(char c)
{
  8602b8:	78 02 00 86 	mvhi r2,0x86
  8602bc:	38 42 03 a0 	ori r2,r2,0x3a0
  8602c0:	28 43 00 00 	lw r3,(r2+0)
  8602c4:	20 21 00 ff 	andi r1,r1,0xff
	while (uart0->ucr & UART_BUSY) ;
  8602c8:	28 62 00 00 	lw r2,(r3+0)
  8602cc:	20 42 00 10 	andi r2,r2,0x10
  8602d0:	5c 40 ff fe 	bne r2,r0,8602c8 <uart_putchar+0x10>
	uart0->rxtx = c;
  8602d4:	58 61 00 04 	sw (r3+4),r1
}
  8602d8:	c3 a0 00 00 	ret

008602dc <uart_putint>:
void uart_putint(int d)
{
  8602dc:	78 02 00 86 	mvhi r2,0x86
  8602e0:	38 42 03 a0 	ori r2,r2,0x3a0
  8602e4:	28 43 00 00 	lw r3,(r2+0)
	while (uart0->ucr & UART_BUSY) ;
  8602e8:	28 62 00 00 	lw r2,(r3+0)
  8602ec:	20 42 00 10 	andi r2,r2,0x10
  8602f0:	5c 40 ff fe 	bne r2,r0,8602e8 <uart_putint+0xc>
	uart0->rxtx = d;
  8602f4:	58 61 00 04 	sw (r3+4),r1
}
  8602f8:	c3 a0 00 00 	ret

008602fc <uart_putstr>:

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
  8602fc:	40 24 00 00 	lbu r4,(r1+0)
  860300:	44 80 00 0b 	be r4,r0,86032c <uart_putstr+0x30>
  860304:	78 02 00 86 	mvhi r2,0x86
  860308:	38 42 03 a0 	ori r2,r2,0x3a0
  86030c:	28 43 00 00 	lw r3,(r2+0)
	return uart1->rxtx;
}

void uart_putchar(char c)
{
	while (uart0->ucr & UART_BUSY) ;
  860310:	28 62 00 00 	lw r2,(r3+0)
  860314:	20 42 00 10 	andi r2,r2,0x10
  860318:	5c 40 ff fe 	bne r2,r0,860310 <uart_putstr+0x14>
	uart0->rxtx = c;
  86031c:	58 64 00 04 	sw (r3+4),r4
void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
		uart_putchar(*c);
		c++;
  860320:	34 21 00 01 	addi r1,r1,1
}

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
  860324:	40 24 00 00 	lbu r4,(r1+0)
  860328:	5c 82 ff fa 	bne r4,r2,860310 <uart_putstr+0x14>
  86032c:	c3 a0 00 00 	ret

00860330 <prueba>:
	// Setup Divisor register (Fclk / Baud)
	//uart0->div = (FCPU/(57600*16));
}

void prueba()
{ 
  860330:	37 9c ff f4 	addi sp,sp,-12
  860334:	5b 8b 00 0c 	sw (sp+12),r11
  860338:	5b 8c 00 08 	sw (sp+8),r12
  86033c:	5b 9d 00 04 	sw (sp+4),ra
                uint32_t out1;
                uint32_t i;
                uint32_t entrada;
       
                   
                         entrada = gpio0->read;
  860340:	78 0b 00 86 	mvhi r11,0x86
  860344:	39 6b 03 a8 	ori r11,r11,0x3a8
  860348:	29 61 00 00 	lw r1,(r11+0)
  86034c:	28 2c 00 00 	lw r12,(r1+0)
                         uart_putstr(entrada);
  860350:	b9 80 08 00 	mv r1,r12
  860354:	fb ff ff ea 	calli 8602fc <uart_putstr>
                         gpio0->write=0x00;   
  860358:	29 61 00 00 	lw r1,(r11+0)
                        

                  if(entrada==0x40)
  86035c:	34 02 00 40 	mvi r2,64
                uint32_t entrada;
       
                   
                         entrada = gpio0->read;
                         uart_putstr(entrada);
                         gpio0->write=0x00;   
  860360:	58 20 00 04 	sw (r1+4),r0
                        

                  if(entrada==0x40)
  860364:	45 82 00 06 	be r12,r2,86037c <prueba+0x4c>
                        msleep(100);
                       }


          
}
  860368:	2b 9d 00 04 	lw ra,(sp+4)
  86036c:	2b 8b 00 0c 	lw r11,(sp+12)
  860370:	2b 8c 00 08 	lw r12,(sp+8)
  860374:	37 9c 00 0c 	addi sp,sp,12
  860378:	c3 a0 00 00 	ret
                        

                  if(entrada==0x40)
                      {
                        out1 = 0x01;
                       gpio0->write = out1;                     
  86037c:	34 02 00 01 	mvi r2,1
  860380:	58 22 00 04 	sw (r1+4),r2
                        msleep(100);
  860384:	34 01 00 64 	mvi r1,100
  860388:	fb ff ff 7f 	calli 860184 <msleep>
                       }


          
}
  86038c:	2b 9d 00 04 	lw ra,(sp+4)
  860390:	2b 8b 00 0c 	lw r11,(sp+12)
  860394:	2b 8c 00 08 	lw r12,(sp+8)
  860398:	37 9c 00 0c 	addi sp,sp,12
  86039c:	c3 a0 00 00 	ret
