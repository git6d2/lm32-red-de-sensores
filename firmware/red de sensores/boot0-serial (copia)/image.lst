
image:     formato del fichero elf32-lm32

Secciones:
Ind Nombre        Tamaño    VMA       LMA       Desp fich Alin
  0 .text         000003e0  00860000  00860000  00000054  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  1 .rodata       00000004  008603e0  008603e0  00000434  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000010  008603e4  008603e4  00000438  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000084  008603f4  008603f4  00000448  2**2
                  ALLOC
  4 .debug_abbrev 00000283  00000000  00000000  00000448  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000607  00000000  00000000  000006cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000003f3  00000000  00000000  00000cd2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000160  00000000  00000000  000010c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00000188  00000000  00000000  00001228  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_pubtypes 00000085  00000000  00000000  000013b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000040  00000000  00000000  00001435  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000001f6  00000000  00000000  00001475  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .comment      00000011  00000000  00000000  0000166b  2**0
                  CONTENTS, READONLY
 13 .debug_loc    0000011a  00000000  00000000  0000167c  2**0
                  CONTENTS, READONLY, DEBUGGING

Desensamblado de la sección .text:

00860000 <_ftext>:
  860000:	98 00 00 00 	xor r0,r0,r0
  860004:	d0 00 00 00 	wcsr IE,r0
  860008:	78 01 00 86 	mvhi r1,0x86
  86000c:	38 21 00 00 	ori r1,r1,0x0
  860010:	d0 e1 00 00 	wcsr EBA,r1
  860014:	f8 00 00 03 	calli 860020 <_crt0>
  860018:	34 00 00 00 	nop
  86001c:	34 00 00 00 	nop

00860020 <_crt0>:
  860020:	78 1c 00 86 	mvhi sp,0x86
  860024:	3b 9c 0f fc 	ori sp,sp,0xffc
  860028:	78 1a 00 86 	mvhi gp,0x86
  86002c:	3b 5a 04 00 	ori gp,gp,0x400
  860030:	78 01 00 86 	mvhi r1,0x86
  860034:	38 21 03 f4 	ori r1,r1,0x3f4
  860038:	78 03 00 86 	mvhi r3,0x86
  86003c:	38 63 04 78 	ori r3,r3,0x478

00860040 <.clearBSS>:
  860040:	44 23 00 04 	be r1,r3,860050 <.callMain>
  860044:	58 20 00 00 	sw (r1+0),r0
  860048:	34 21 00 04 	addi r1,r1,4
  86004c:	e3 ff ff fd 	bi 860040 <.clearBSS>

00860050 <.callMain>:
  860050:	34 01 00 00 	mvi r1,0
  860054:	34 02 00 00 	mvi r2,0
  860058:	34 03 00 00 	mvi r3,0
  86005c:	f8 00 00 0c 	calli 86008c <main>

00860060 <irq_enable>:
  860060:	34 01 00 01 	mvi r1,1
  860064:	d0 01 00 00 	wcsr IE,r1
  860068:	c3 a0 00 00 	ret

0086006c <irq_mask>:
  86006c:	34 01 00 0f 	mvi r1,15
  860070:	d0 21 00 00 	wcsr IM,r1
  860074:	c3 a0 00 00 	ret

00860078 <irq_disable>:
  860078:	34 01 00 00 	mvi r1,0
  86007c:	d0 01 00 00 	wcsr IE,r1
  860080:	c3 a0 00 00 	ret

00860084 <jump>:
  860084:	c0 20 00 00 	b r1

00860088 <halt>:
  860088:	e0 00 00 00 	bi 860088 <halt>

0086008c <main>:
 *
 */
#include "soc-hw.h"

int main()
{
  86008c:	37 9c ff fc 	addi sp,sp,-4
  860090:	5b 9d 00 04 	sw (sp+4),ra
        uint8_t  flag;

	// Initialize UART

	c='u';
uart_putchar('i');
  860094:	34 01 00 69 	mvi r1,105
  860098:	f8 00 00 98 	calli 8602f8 <uart_putchar>

gpio0->dir=0x0F;
  86009c:	78 01 00 86 	mvhi r1,0x86
  8600a0:	38 21 03 ec 	ori r1,r1,0x3ec
  8600a4:	28 21 00 00 	lw r1,(r1+0)
  8600a8:	34 02 00 0f 	mvi r2,15
  8600ac:	58 22 00 08 	sw (r1+8),r2
//{
   flancopos();

}*/
for(;;)
prueba1();
  8600b0:	f8 00 00 5d 	calli 860224 <prueba1>
  8600b4:	f8 00 00 5c 	calli 860224 <prueba1>
  8600b8:	e3 ff ff fe 	bi 8600b0 <main+0x24>

008600bc <isr_null>:
/***************************************************************************
 * IRQ handling
 */
void isr_null()
{
}
  8600bc:	c3 a0 00 00 	ret

008600c0 <irq_handler>:

void irq_handler(uint32_t pending)
{
  8600c0:	37 9c ff f0 	addi sp,sp,-16
  8600c4:	5b 8b 00 10 	sw (sp+16),r11
  8600c8:	5b 8c 00 0c 	sw (sp+12),r12
  8600cc:	5b 8d 00 08 	sw (sp+8),r13
  8600d0:	5b 9d 00 04 	sw (sp+4),ra
  8600d4:	78 0b 00 86 	mvhi r11,0x86
  8600d8:	39 6b 03 f8 	ori r11,r11,0x3f8
  8600dc:	b8 20 60 00 	mv r12,r1
 */
void isr_null()
{
}

void irq_handler(uint32_t pending)
  8600e0:	35 6d 00 80 	addi r13,r11,128
  8600e4:	e0 00 00 04 	bi 8600f4 <irq_handler+0x34>
{
	int i;

	for(i=0; i<32; i++) {
		if (pending & 0x01) (*isr_table[i])();
  8600e8:	35 6b 00 04 	addi r11,r11,4

void irq_handler(uint32_t pending)
{
	int i;

	for(i=0; i<32; i++) {
  8600ec:	45 6d 00 08 	be r11,r13,86010c <irq_handler+0x4c>
		if (pending & 0x01) (*isr_table[i])();
		pending >>= 1;
  8600f0:	01 8c 00 01 	srui r12,r12,1
void irq_handler(uint32_t pending)
{
	int i;

	for(i=0; i<32; i++) {
		if (pending & 0x01) (*isr_table[i])();
  8600f4:	21 81 00 01 	andi r1,r12,0x1
  8600f8:	44 20 ff fc 	be r1,r0,8600e8 <irq_handler+0x28>
  8600fc:	29 61 00 00 	lw r1,(r11+0)
  860100:	35 6b 00 04 	addi r11,r11,4
  860104:	d8 20 00 00 	call r1

void irq_handler(uint32_t pending)
{
	int i;

	for(i=0; i<32; i++) {
  860108:	5d 6d ff fa 	bne r11,r13,8600f0 <irq_handler+0x30>
		if (pending & 0x01) (*isr_table[i])();
		pending >>= 1;
	}
}
  86010c:	2b 9d 00 04 	lw ra,(sp+4)
  860110:	2b 8b 00 10 	lw r11,(sp+16)
  860114:	2b 8c 00 0c 	lw r12,(sp+12)
  860118:	2b 8d 00 08 	lw r13,(sp+8)
  86011c:	37 9c 00 10 	addi sp,sp,16
  860120:	c3 a0 00 00 	ret

00860124 <isr_init>:

void isr_init()
{
  860124:	78 01 00 86 	mvhi r1,0x86
  860128:	78 02 00 86 	mvhi r2,0x86
  86012c:	38 21 03 f8 	ori r1,r1,0x3f8
  860130:	38 42 00 bc 	ori r2,r2,0xbc
		if (pending & 0x01) (*isr_table[i])();
		pending >>= 1;
	}
}

void isr_init()
  860134:	34 23 00 80 	addi r3,r1,128
{
	int i;
	for(i=0; i<32; i++)
		isr_table[i] = &isr_null;
  860138:	58 22 00 00 	sw (r1+0),r2
  86013c:	34 21 00 04 	addi r1,r1,4
}

void isr_init()
{
	int i;
	for(i=0; i<32; i++)
  860140:	5c 23 ff fe 	bne r1,r3,860138 <isr_init+0x14>
		isr_table[i] = &isr_null;
}
  860144:	c3 a0 00 00 	ret

00860148 <isr_register>:

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
  860148:	78 03 00 86 	mvhi r3,0x86
  86014c:	3c 21 00 02 	sli r1,r1,2
  860150:	38 63 03 f8 	ori r3,r3,0x3f8
  860154:	b4 61 18 00 	add r3,r3,r1
  860158:	58 62 00 00 	sw (r3+0),r2
}
  86015c:	c3 a0 00 00 	ret

00860160 <isr_unregister>:

void isr_unregister(int irq)
{
	isr_table[irq] = &isr_null;
  860160:	78 03 00 86 	mvhi r3,0x86
  860164:	3c 21 00 02 	sli r1,r1,2
  860168:	38 63 03 f8 	ori r3,r3,0x3f8
  86016c:	78 02 00 86 	mvhi r2,0x86
  860170:	b4 61 18 00 	add r3,r3,r1
  860174:	38 42 00 bc 	ori r2,r2,0xbc
  860178:	58 62 00 00 	sw (r3+0),r2
}
  86017c:	c3 a0 00 00 	ret

00860180 <msleep>:
void msleep(uint32_t msec)
{
	uint32_t tcr;

	// Use timer0.1
	timer0->compare1 = (FCPU/1000)*msec;
  860180:	78 04 00 86 	mvhi r4,0x86
  860184:	38 84 03 e0 	ori r4,r4,0x3e0
  860188:	28 83 00 00 	lw r3,(r4+0)
  86018c:	78 02 00 86 	mvhi r2,0x86
  860190:	38 42 03 f0 	ori r2,r2,0x3f0
  860194:	28 42 00 00 	lw r2,(r2+0)
  860198:	88 23 08 00 	mul r1,r1,r3
  86019c:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
  8601a0:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
  8601a4:	34 01 00 08 	mvi r1,8
  8601a8:	58 41 00 0c 	sw (r2+12),r1

	do {
		//halt();
 		tcr = timer0->tcr1;
  8601ac:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
  8601b0:	20 21 00 01 	andi r1,r1,0x1
  8601b4:	44 20 ff fe 	be r1,r0,8601ac <msleep+0x2c>
}
  8601b8:	c3 a0 00 00 	ret

008601bc <nsleep>:
void nsleep(uint32_t nsec)
{
	uint32_t tcr;

	// Use timer0.1
	timer0->compare1 = (FCPU/1000000)*nsec;
  8601bc:	78 02 00 86 	mvhi r2,0x86
  8601c0:	38 42 03 f0 	ori r2,r2,0x3f0
  8601c4:	28 42 00 00 	lw r2,(r2+0)
  8601c8:	08 21 00 64 	muli r1,r1,100
  8601cc:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
  8601d0:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
  8601d4:	34 01 00 08 	mvi r1,8
  8601d8:	58 41 00 0c 	sw (r2+12),r1

	do {
		//halt();
 		tcr = timer0->tcr1;
  8601dc:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
  8601e0:	20 21 00 01 	andi r1,r1,0x1
  8601e4:	44 20 ff fe 	be r1,r0,8601dc <nsleep+0x20>
}
  8601e8:	c3 a0 00 00 	ret

008601ec <flancopos>:
{
	uint32_t tcr;

	// Use timer0.1

	timer0->counter1 = 0;
  8601ec:	78 01 00 86 	mvhi r1,0x86
  8601f0:	38 21 03 f0 	ori r1,r1,0x3f0
  8601f4:	28 21 00 00 	lw r1,(r1+0)
	timer0->tcr1 = TIMER_EN;
  8601f8:	34 02 00 08 	mvi r2,8
{
	uint32_t tcr;

	// Use timer0.1

	timer0->counter1 = 0;
  8601fc:	58 20 00 14 	sw (r1+20),r0
	timer0->tcr1 = TIMER_EN;
  860200:	58 22 00 0c 	sw (r1+12),r2

	
}
  860204:	c3 a0 00 00 	ret

00860208 <flanconeg>:
{
	uint32_t tcr;

	// Use timer0.1

	timer0->tcr1 = 0;
  860208:	78 01 00 86 	mvhi r1,0x86
  86020c:	38 21 03 f0 	ori r1,r1,0x3f0
  860210:	28 21 00 00 	lw r1,(r1+0)
  860214:	58 20 00 0c 	sw (r1+12),r0
	

 return timer0->counter1;
  860218:	28 21 00 14 	lw r1,(r1+20)
	
}
  86021c:	c3 a0 00 00 	ret

00860220 <uart_init>:
	//uart0->lcr = 0x03;  // Line Control Register:    8N1
	//uart0->mcr = 0x00;  // Modem Control Register

	// Setup Divisor register (Fclk / Baud)
	//uart0->div = (FCPU/(57600*16));
}
  860220:	c3 a0 00 00 	ret

00860224 <prueba1>:


          
}
void prueba1()
{
  860224:	37 9c ff f8 	addi sp,sp,-8
  860228:	5b 8b 00 08 	sw (sp+8),r11
  86022c:	5b 9d 00 04 	sw (sp+4),ra
                         gpio0->write=0x00;   
  860230:	78 0b 00 86 	mvhi r11,0x86
  860234:	39 6b 03 ec 	ori r11,r11,0x3ec
  860238:	29 62 00 00 	lw r2,(r11+0)
                         msleep(4);
  86023c:	34 01 00 04 	mvi r1,4

          
}
void prueba1()
{
                         gpio0->write=0x00;   
  860240:	58 40 00 04 	sw (r2+4),r0
                         msleep(4);
  860244:	fb ff ff cf 	calli 860180 <msleep>
                         gpio0->write=0x01;
  860248:	29 62 00 00 	lw r2,(r11+0)
  86024c:	34 03 00 01 	mvi r3,1
                         msleep(4);
  860250:	34 01 00 04 	mvi r1,4
}
void prueba1()
{
                         gpio0->write=0x00;   
                         msleep(4);
                         gpio0->write=0x01;
  860254:	58 43 00 04 	sw (r2+4),r3
                         msleep(4);
  860258:	fb ff ff ca 	calli 860180 <msleep>

}
  86025c:	2b 9d 00 04 	lw ra,(sp+4)
  860260:	2b 8b 00 08 	lw r11,(sp+8)
  860264:	37 9c 00 08 	addi sp,sp,8
  860268:	c3 a0 00 00 	ret

0086026c <uart_getchar>:
char uart_getchar()
{   
  86026c:	78 01 00 86 	mvhi r1,0x86
  860270:	38 21 03 e4 	ori r1,r1,0x3e4
  860274:	28 22 00 00 	lw r2,(r1+0)
	while (! (uart0->ucr & UART_DR)) ;
  860278:	28 41 00 00 	lw r1,(r2+0)
  86027c:	20 21 00 01 	andi r1,r1,0x1
  860280:	44 20 ff fe 	be r1,r0,860278 <uart_getchar+0xc>
	return uart0->rxtx;
  860284:	28 41 00 04 	lw r1,(r2+4)
}
  860288:	20 21 00 ff 	andi r1,r1,0xff
  86028c:	c3 a0 00 00 	ret

00860290 <uart_getint>:
int uart_getint()
{
  860290:	78 01 00 86 	mvhi r1,0x86
  860294:	38 21 03 e4 	ori r1,r1,0x3e4
  860298:	28 22 00 00 	lw r2,(r1+0)
 while (! (uart0->ucr & UART_DR)) ;
  86029c:	28 41 00 00 	lw r1,(r2+0)
  8602a0:	20 21 00 01 	andi r1,r1,0x1
  8602a4:	44 20 ff fe 	be r1,r0,86029c <uart_getint+0xc>
	return uart0->rxtx;
  8602a8:	28 41 00 04 	lw r1,(r2+4)

}
  8602ac:	c3 a0 00 00 	ret

008602b0 <uart_putchar1>:

void uart_putchar1(char f) //obtener caracter de la variavle 
{
  8602b0:	78 02 00 86 	mvhi r2,0x86
  8602b4:	38 42 03 e8 	ori r2,r2,0x3e8
  8602b8:	28 43 00 00 	lw r3,(r2+0)
  8602bc:	20 21 00 ff 	andi r1,r1,0xff
	while (uart1->ucr & UART_BUSY) ;
  8602c0:	28 62 00 00 	lw r2,(r3+0)
  8602c4:	20 42 00 10 	andi r2,r2,0x10
  8602c8:	5c 40 ff fe 	bne r2,r0,8602c0 <uart_putchar1+0x10>
	uart1->rxtx = f;
  8602cc:	58 61 00 04 	sw (r3+4),r1
}
  8602d0:	c3 a0 00 00 	ret

008602d4 <uart_getchar1>:

char uart_getchar1()
{   
  8602d4:	78 01 00 86 	mvhi r1,0x86
  8602d8:	38 21 03 e8 	ori r1,r1,0x3e8
  8602dc:	28 22 00 00 	lw r2,(r1+0)
	while (! (uart1->ucr & UART_DR)) ;
  8602e0:	28 41 00 00 	lw r1,(r2+0)
  8602e4:	20 21 00 01 	andi r1,r1,0x1
  8602e8:	44 20 ff fe 	be r1,r0,8602e0 <uart_getchar1+0xc>
	return uart1->rxtx;
  8602ec:	28 41 00 04 	lw r1,(r2+4)
}
  8602f0:	20 21 00 ff 	andi r1,r1,0xff
  8602f4:	c3 a0 00 00 	ret

008602f8 <uart_putchar>:

void uart_putchar(char c)
{
  8602f8:	78 02 00 86 	mvhi r2,0x86
  8602fc:	38 42 03 e4 	ori r2,r2,0x3e4
  860300:	28 43 00 00 	lw r3,(r2+0)
  860304:	20 21 00 ff 	andi r1,r1,0xff
	while (uart0->ucr & UART_BUSY) ;
  860308:	28 62 00 00 	lw r2,(r3+0)
  86030c:	20 42 00 10 	andi r2,r2,0x10
  860310:	5c 40 ff fe 	bne r2,r0,860308 <uart_putchar+0x10>
	uart0->rxtx = c;
  860314:	58 61 00 04 	sw (r3+4),r1
}
  860318:	c3 a0 00 00 	ret

0086031c <uart_putint>:
void uart_putint(int d)
{
  86031c:	78 02 00 86 	mvhi r2,0x86
  860320:	38 42 03 e4 	ori r2,r2,0x3e4
  860324:	28 43 00 00 	lw r3,(r2+0)
	while (uart0->ucr & UART_BUSY) ;
  860328:	28 62 00 00 	lw r2,(r3+0)
  86032c:	20 42 00 10 	andi r2,r2,0x10
  860330:	5c 40 ff fe 	bne r2,r0,860328 <uart_putint+0xc>
	uart0->rxtx = d;
  860334:	58 61 00 04 	sw (r3+4),r1
}
  860338:	c3 a0 00 00 	ret

0086033c <uart_putstr>:

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
  86033c:	40 24 00 00 	lbu r4,(r1+0)
  860340:	44 80 00 0b 	be r4,r0,86036c <uart_putstr+0x30>
  860344:	78 02 00 86 	mvhi r2,0x86
  860348:	38 42 03 e4 	ori r2,r2,0x3e4
  86034c:	28 43 00 00 	lw r3,(r2+0)
	return uart1->rxtx;
}

void uart_putchar(char c)
{
	while (uart0->ucr & UART_BUSY) ;
  860350:	28 62 00 00 	lw r2,(r3+0)
  860354:	20 42 00 10 	andi r2,r2,0x10
  860358:	5c 40 ff fe 	bne r2,r0,860350 <uart_putstr+0x14>
	uart0->rxtx = c;
  86035c:	58 64 00 04 	sw (r3+4),r4
void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
		uart_putchar(*c);
		c++;
  860360:	34 21 00 01 	addi r1,r1,1
}

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
  860364:	40 24 00 00 	lbu r4,(r1+0)
  860368:	5c 82 ff fa 	bne r4,r2,860350 <uart_putstr+0x14>
  86036c:	c3 a0 00 00 	ret

00860370 <prueba>:
	// Setup Divisor register (Fclk / Baud)
	//uart0->div = (FCPU/(57600*16));
}

void prueba()
{ 
  860370:	37 9c ff f4 	addi sp,sp,-12
  860374:	5b 8b 00 0c 	sw (sp+12),r11
  860378:	5b 8c 00 08 	sw (sp+8),r12
  86037c:	5b 9d 00 04 	sw (sp+4),ra
                uint32_t out1;
                uint32_t i;
                uint32_t entrada;
       
                   
                         entrada = gpio0->read;
  860380:	78 0b 00 86 	mvhi r11,0x86
  860384:	39 6b 03 ec 	ori r11,r11,0x3ec
  860388:	29 61 00 00 	lw r1,(r11+0)
  86038c:	28 2c 00 00 	lw r12,(r1+0)
                         uart_putstr(entrada);
  860390:	b9 80 08 00 	mv r1,r12
  860394:	fb ff ff ea 	calli 86033c <uart_putstr>
                         gpio0->write=0x00;   
  860398:	29 61 00 00 	lw r1,(r11+0)
                        

                  if(entrada==0x40)
  86039c:	34 02 00 40 	mvi r2,64
                uint32_t entrada;
       
                   
                         entrada = gpio0->read;
                         uart_putstr(entrada);
                         gpio0->write=0x00;   
  8603a0:	58 20 00 04 	sw (r1+4),r0
                        

                  if(entrada==0x40)
  8603a4:	45 82 00 06 	be r12,r2,8603bc <prueba+0x4c>
                        msleep(100);
                       }


          
}
  8603a8:	2b 9d 00 04 	lw ra,(sp+4)
  8603ac:	2b 8b 00 0c 	lw r11,(sp+12)
  8603b0:	2b 8c 00 08 	lw r12,(sp+8)
  8603b4:	37 9c 00 0c 	addi sp,sp,12
  8603b8:	c3 a0 00 00 	ret
                        

                  if(entrada==0x40)
                      {
                        out1 = 0x01;
                       gpio0->write = out1;                     
  8603bc:	34 02 00 01 	mvi r2,1
  8603c0:	58 22 00 04 	sw (r1+4),r2
                        msleep(100);
  8603c4:	34 01 00 64 	mvi r1,100
  8603c8:	fb ff ff 6e 	calli 860180 <msleep>
                       }


          
}
  8603cc:	2b 9d 00 04 	lw ra,(sp+4)
  8603d0:	2b 8b 00 0c 	lw r11,(sp+12)
  8603d4:	2b 8c 00 08 	lw r12,(sp+8)
  8603d8:	37 9c 00 0c 	addi sp,sp,12
  8603dc:	c3 a0 00 00 	ret
