
image:     formato del fichero elf32-lm32

Secciones:
Ind Nombre        Tamaño    VMA       LMA       Desp fich Alin
  0 .text         0000057c  00860000  00860000  00000054  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  1 .rodata       00000030  0086057c  0086057c  000005d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000014  008605ac  008605ac  00000600  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000084  008605c0  008605c0  00000614  2**2
                  ALLOC
  4 .debug_abbrev 000002c9  00000000  00000000  00000614  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006d7  00000000  00000000  000008dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000005e4  00000000  00000000  00000fb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000180  00000000  00000000  00001598  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000223  00000000  00000000  00001718  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_pubnames 000001aa  00000000  00000000  0000193b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_pubtypes 00000085  00000000  00000000  00001ae5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000040  00000000  00000000  00001b6a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0000021b  00000000  00000000  00001baa  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .comment      00000011  00000000  00000000  00001dc5  2**0
                  CONTENTS, READONLY

Desensamblado de la sección .text:

00860000 <_ftext>:
  860000:	98 00 00 00 	xor r0,r0,r0
  860004:	d0 00 00 00 	wcsr IE,r0
  860008:	78 01 00 86 	mvhi r1,0x86
  86000c:	38 21 00 00 	ori r1,r1,0x0
  860010:	d0 e1 00 00 	wcsr EBA,r1
  860014:	f8 00 00 03 	calli 860020 <_crt0>
  860018:	34 00 00 00 	nop
  86001c:	34 00 00 00 	nop

00860020 <_crt0>:
  860020:	78 1c 00 86 	mvhi sp,0x86
  860024:	3b 9c 0f fc 	ori sp,sp,0xffc
  860028:	78 1a 00 86 	mvhi gp,0x86
  86002c:	3b 5a 05 c0 	ori gp,gp,0x5c0
  860030:	78 01 00 86 	mvhi r1,0x86
  860034:	38 21 05 c0 	ori r1,r1,0x5c0
  860038:	78 03 00 86 	mvhi r3,0x86
  86003c:	38 63 06 44 	ori r3,r3,0x644

00860040 <.clearBSS>:
  860040:	44 23 00 04 	be r1,r3,860050 <.callMain>
  860044:	58 20 00 00 	sw (r1+0),r0
  860048:	34 21 00 04 	addi r1,r1,4
  86004c:	e3 ff ff fd 	bi 860040 <.clearBSS>

00860050 <.callMain>:
  860050:	34 01 00 00 	mvi r1,0
  860054:	34 02 00 00 	mvi r2,0
  860058:	34 03 00 00 	mvi r3,0
  86005c:	f8 00 00 0c 	calli 86008c <main>

00860060 <irq_enable>:
  860060:	34 01 00 01 	mvi r1,1
  860064:	d0 01 00 00 	wcsr IE,r1
  860068:	c3 a0 00 00 	ret

0086006c <irq_mask>:
  86006c:	34 01 00 0f 	mvi r1,15
  860070:	d0 21 00 00 	wcsr IM,r1
  860074:	c3 a0 00 00 	ret

00860078 <irq_disable>:
  860078:	34 01 00 00 	mvi r1,0
  86007c:	d0 01 00 00 	wcsr IE,r1
  860080:	c3 a0 00 00 	ret

00860084 <jump>:
  860084:	c0 20 00 00 	b r1

00860088 <halt>:
  860088:	e0 00 00 00 	bi 860088 <halt>

0086008c <main>:
// Función principal del codigo - se obtiene el valor del tiempo, del flanco positivo
//**************************************************************************************************


int main()
{
  86008c:	37 9c ff ec 	addi sp,sp,-20
  860090:	5b 8b 00 14 	sw (sp+20),r11
  860094:	5b 8c 00 10 	sw (sp+16),r12
  860098:	5b 8d 00 0c 	sw (sp+12),r13
  86009c:	5b 8e 00 08 	sw (sp+8),r14
  8600a0:	5b 9d 00 04 	sw (sp+4),ra
        uint32_t i=0;
 
	c='u';                                   // Initialize UART

	
        m1sleep(1);                              //prueba con el timer1 
  8600a4:	34 01 00 01 	mvi r1,1



        //gpio0->dir=0x0F;                       // dirección GPIO
        gpio0->dir=0xFF;                         
  8600a8:	78 0b 00 86 	mvhi r11,0x86
        uint32_t i=0;
 
	c='u';                                   // Initialize UART

	
        m1sleep(1);                              //prueba con el timer1 
  8600ac:	f8 00 00 76 	calli 860284 <m1sleep>



        //gpio0->dir=0x0F;                       // dirección GPIO
        gpio0->dir=0xFF;                         
  8600b0:	39 6b 05 b4 	ori r11,r11,0x5b4
  8600b4:	29 62 00 00 	lw r2,(r11+0)
  8600b8:	34 01 00 ff 	mvi r1,255
        gpio0->write = 0x40;                     // escritura GPIO    
  8600bc:	34 03 00 40 	mvi r3,64
        m1sleep(1);                              //prueba con el timer1 



        //gpio0->dir=0x0F;                       // dirección GPIO
        gpio0->dir=0xFF;                         
  8600c0:	58 41 00 08 	sw (r2+8),r1
  }
  if(hbe==1 && !(flag == 0x80)){
  

  	tiempo=flanconeg();
        x1=(tiempo*1000)/(FCPU);                  // se convierte el valor del contador a milisegundos;     
  8600c4:	78 01 00 86 	mvhi r1,0x86
  8600c8:	38 21 05 7c 	ori r1,r1,0x57c
  8600cc:	28 2e 00 00 	lw r14,(r1+0)



        //gpio0->dir=0x0F;                       // dirección GPIO
        gpio0->dir=0xFF;                         
        gpio0->write = 0x40;                     // escritura GPIO    
  8600d0:	58 43 00 04 	sw (r2+4),r3
        msleep(100);                             // milisegundos timer0
  8600d4:	34 01 00 64 	mvi r1,100
  8600d8:	f8 00 00 4f 	calli 860214 <msleep>
	uint32_t x=1;
	uint8_t  c;
        uint32_t  flag;
        uint32_t pruebah=0;
        uint32_t hbe=0;                          //el enable ha sido activado
        uint32_t x1=0;                           // valor del contador en segundos flanco positivo
  8600dc:	34 0c 00 00 	mvi r12,0

        //gpio0->dir=0x0F;                       // dirección GPIO
        gpio0->dir=0xFF;                         
        gpio0->write = 0x40;                     // escritura GPIO    
        msleep(100);                             // milisegundos timer0
        sensor();                                // lectura del sensor   
  8600e0:	f8 00 01 00 	calli 8604e0 <sensor>
	uint32_t x=1;
	uint8_t  c;
        uint32_t  flag;
        uint32_t pruebah=0;
        uint32_t hbe=0;                          //el enable ha sido activado
        uint32_t x1=0;                           // valor del contador en segundos flanco positivo
  8600e4:	34 02 00 00 	mvi r2,0
 flag=gpio0->read;
 if(hbe==0 && (flag == 0x80)){
        
        pruebah=flancopos();
        x2=(pruebah*1000)/(FCPU);                  // se convierte el valor del contador a milisegundos;     
	uart_putchar(x1);
  8600e8:	21 8d 00 ff 	andi r13,r12,0xff
  8600ec:	e0 00 00 04 	bi 8600fc <main+0x70>
	hbe=1;
       
  }
  if(hbe==1 && !(flag == 0x80)){
  8600f0:	7d 8c 00 80 	cmpnei r12,r12,128
  8600f4:	a0 6c 18 00 	and r3,r3,r12
  8600f8:	5c 60 00 10 	bne r3,r0,860138 <main+0xac>
        sensor();                                // lectura del sensor   
   
       
for(;;)                                           // prueba lectura del tiempo de duracion flanco positivo
{
 flag=gpio0->read;
  8600fc:	29 64 00 00 	lw r4,(r11+0)
 if(hbe==0 && (flag == 0x80)){
  860100:	64 45 00 00 	cmpei r5,r2,0
  860104:	20 43 00 ff 	andi r3,r2,0xff
        sensor();                                // lectura del sensor   
   
       
for(;;)                                           // prueba lectura del tiempo de duracion flanco positivo
{
 flag=gpio0->read;
  860108:	28 8c 00 00 	lw r12,(r4+0)
 if(hbe==0 && (flag == 0x80)){
  86010c:	65 84 00 80 	cmpei r4,r12,128
  860110:	a0 a4 20 00 	and r4,r5,r4
  860114:	44 80 ff f7 	be r4,r0,8600f0 <main+0x64>
        
        pruebah=flancopos();
  860118:	f8 00 00 6a 	calli 8602c0 <flancopos>
        x2=(pruebah*1000)/(FCPU);                  // se convierte el valor del contador a milisegundos;     
	uart_putchar(x1);
  86011c:	b9 a0 08 00 	mv r1,r13
  860120:	f8 00 00 b6 	calli 8603f8 <uart_putchar>
	hbe=1;
       
  }
  if(hbe==1 && !(flag == 0x80)){
  860124:	7d 8c 00 80 	cmpnei r12,r12,128
 flag=gpio0->read;
 if(hbe==0 && (flag == 0x80)){
        
        pruebah=flancopos();
        x2=(pruebah*1000)/(FCPU);                  // se convierte el valor del contador a milisegundos;     
	uart_putchar(x1);
  860128:	34 03 00 01 	mvi r3,1
	hbe=1;
       
  }
  if(hbe==1 && !(flag == 0x80)){
  86012c:	a0 6c 18 00 	and r3,r3,r12
 if(hbe==0 && (flag == 0x80)){
        
        pruebah=flancopos();
        x2=(pruebah*1000)/(FCPU);                  // se convierte el valor del contador a milisegundos;     
	uart_putchar(x1);
	hbe=1;
  860130:	34 02 00 01 	mvi r2,1
       
  }
  if(hbe==1 && !(flag == 0x80)){
  860134:	44 60 ff f2 	be r3,r0,8600fc <main+0x70>
  

  	tiempo=flanconeg();
  860138:	f8 00 00 6e 	calli 8602f0 <flanconeg>
        x1=(tiempo*1000)/(FCPU);                  // se convierte el valor del contador a milisegundos;     
  86013c:	08 21 03 e8 	muli r1,r1,1000
  860140:	8c 2e 60 00 	divu r12,r1,r14
	uart_putchar(x1);
  860144:	21 81 00 ff 	andi r1,r12,0xff
  860148:	f8 00 00 ac 	calli 8603f8 <uart_putchar>
  86014c:	e3 ff ff e6 	bi 8600e4 <main+0x58>

00860150 <isr_null>:
/***************************************************************************
 * IRQ handling
 */
void isr_null()
{
}
  860150:	c3 a0 00 00 	ret

00860154 <irq_handler>:

void irq_handler(uint32_t pending)
{
  860154:	37 9c ff f0 	addi sp,sp,-16
  860158:	5b 8b 00 10 	sw (sp+16),r11
  86015c:	5b 8c 00 0c 	sw (sp+12),r12
  860160:	5b 8d 00 08 	sw (sp+8),r13
  860164:	5b 9d 00 04 	sw (sp+4),ra
  860168:	78 0b 00 86 	mvhi r11,0x86
  86016c:	39 6b 05 c4 	ori r11,r11,0x5c4
  860170:	b8 20 60 00 	mv r12,r1
 */
void isr_null()
{
}

void irq_handler(uint32_t pending)
  860174:	35 6d 00 80 	addi r13,r11,128
  860178:	e0 00 00 04 	bi 860188 <irq_handler+0x34>
{
	int i;

	for(i=0; i<32; i++) {
		if (pending & 0x01) (*isr_table[i])();
  86017c:	35 6b 00 04 	addi r11,r11,4

void irq_handler(uint32_t pending)
{
	int i;

	for(i=0; i<32; i++) {
  860180:	45 6d 00 08 	be r11,r13,8601a0 <irq_handler+0x4c>
		if (pending & 0x01) (*isr_table[i])();
		pending >>= 1;
  860184:	01 8c 00 01 	srui r12,r12,1
void irq_handler(uint32_t pending)
{
	int i;

	for(i=0; i<32; i++) {
		if (pending & 0x01) (*isr_table[i])();
  860188:	21 81 00 01 	andi r1,r12,0x1
  86018c:	44 20 ff fc 	be r1,r0,86017c <irq_handler+0x28>
  860190:	29 61 00 00 	lw r1,(r11+0)
  860194:	35 6b 00 04 	addi r11,r11,4
  860198:	d8 20 00 00 	call r1

void irq_handler(uint32_t pending)
{
	int i;

	for(i=0; i<32; i++) {
  86019c:	5d 6d ff fa 	bne r11,r13,860184 <irq_handler+0x30>
		if (pending & 0x01) (*isr_table[i])();
		pending >>= 1;
	}
}
  8601a0:	2b 9d 00 04 	lw ra,(sp+4)
  8601a4:	2b 8b 00 10 	lw r11,(sp+16)
  8601a8:	2b 8c 00 0c 	lw r12,(sp+12)
  8601ac:	2b 8d 00 08 	lw r13,(sp+8)
  8601b0:	37 9c 00 10 	addi sp,sp,16
  8601b4:	c3 a0 00 00 	ret

008601b8 <isr_init>:

void isr_init()
{
  8601b8:	78 01 00 86 	mvhi r1,0x86
  8601bc:	78 02 00 86 	mvhi r2,0x86
  8601c0:	38 21 05 c4 	ori r1,r1,0x5c4
  8601c4:	38 42 01 50 	ori r2,r2,0x150
		if (pending & 0x01) (*isr_table[i])();
		pending >>= 1;
	}
}

void isr_init()
  8601c8:	34 23 00 80 	addi r3,r1,128
{
	int i;
	for(i=0; i<32; i++)
		isr_table[i] = &isr_null;
  8601cc:	58 22 00 00 	sw (r1+0),r2
  8601d0:	34 21 00 04 	addi r1,r1,4
}

void isr_init()
{
	int i;
	for(i=0; i<32; i++)
  8601d4:	5c 23 ff fe 	bne r1,r3,8601cc <isr_init+0x14>
		isr_table[i] = &isr_null;
}
  8601d8:	c3 a0 00 00 	ret

008601dc <isr_register>:

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
  8601dc:	78 03 00 86 	mvhi r3,0x86
  8601e0:	3c 21 00 02 	sli r1,r1,2
  8601e4:	38 63 05 c4 	ori r3,r3,0x5c4
  8601e8:	b4 61 18 00 	add r3,r3,r1
  8601ec:	58 62 00 00 	sw (r3+0),r2
}
  8601f0:	c3 a0 00 00 	ret

008601f4 <isr_unregister>:

void isr_unregister(int irq)
{
	isr_table[irq] = &isr_null;
  8601f4:	78 03 00 86 	mvhi r3,0x86
  8601f8:	3c 21 00 02 	sli r1,r1,2
  8601fc:	38 63 05 c4 	ori r3,r3,0x5c4
  860200:	78 02 00 86 	mvhi r2,0x86
  860204:	b4 61 18 00 	add r3,r3,r1
  860208:	38 42 01 50 	ori r2,r2,0x150
  86020c:	58 62 00 00 	sw (r3+0),r2
}
  860210:	c3 a0 00 00 	ret

00860214 <msleep>:
void msleep(uint32_t msec)
{
	uint32_t tcr;

	// Use timer0.1
	timer0->compare1 = (FCPU/1000)*msec;
  860214:	78 04 00 86 	mvhi r4,0x86
  860218:	38 84 05 80 	ori r4,r4,0x580
  86021c:	28 83 00 00 	lw r3,(r4+0)
  860220:	78 02 00 86 	mvhi r2,0x86
  860224:	38 42 05 bc 	ori r2,r2,0x5bc
  860228:	28 42 00 00 	lw r2,(r2+0)
  86022c:	88 23 08 00 	mul r1,r1,r3
  860230:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
  860234:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
  860238:	34 01 00 08 	mvi r1,8
  86023c:	58 41 00 0c 	sw (r2+12),r1

	do {
		//halt();
 		tcr = timer0->tcr1;
  860240:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
  860244:	20 21 00 01 	andi r1,r1,0x1
  860248:	44 20 ff fe 	be r1,r0,860240 <msleep+0x2c>
}
  86024c:	c3 a0 00 00 	ret

00860250 <nsleep>:
uint32_t nsleep(uint32_t nsec)
{
	uint32_t tcr;

	// Use timer0.1    
	timer0->compare1 = (FCPU/1000000)*nsec;
  860250:	78 02 00 86 	mvhi r2,0x86
  860254:	38 42 05 bc 	ori r2,r2,0x5bc
  860258:	28 42 00 00 	lw r2,(r2+0)
  86025c:	08 21 00 64 	muli r1,r1,100
  860260:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
  860264:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
  860268:	34 01 00 08 	mvi r1,8
  86026c:	58 41 00 0c 	sw (r2+12),r1

	do {
		//halt();
 		tcr = timer0->tcr1;
  860270:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
  860274:	20 21 00 01 	andi r1,r1,0x1
  860278:	44 20 ff fe 	be r1,r0,860270 <nsleep+0x20>

  return timer0->counter1;
  86027c:	28 41 00 14 	lw r1,(r2+20)
}
  860280:	c3 a0 00 00 	ret

00860284 <m1sleep>:
void m1sleep(uint32_t msec)
{
	uint32_t tcr;

	// Use timer0.1
	timer1->compare1 = (FCPU/1000)*msec;
  860284:	78 04 00 86 	mvhi r4,0x86
  860288:	38 84 05 80 	ori r4,r4,0x580
  86028c:	28 83 00 00 	lw r3,(r4+0)
  860290:	78 02 00 86 	mvhi r2,0x86
  860294:	38 42 05 b8 	ori r2,r2,0x5b8
  860298:	28 42 00 00 	lw r2,(r2+0)
  86029c:	88 23 08 00 	mul r1,r1,r3
  8602a0:	58 41 00 10 	sw (r2+16),r1
	timer1->counter1 = 0;
  8602a4:	58 40 00 14 	sw (r2+20),r0
	timer1->tcr1 = TIMER_EN;
  8602a8:	34 01 00 08 	mvi r1,8
  8602ac:	58 41 00 0c 	sw (r2+12),r1

	do {
		//halt();
 		tcr = timer1->tcr1;
  8602b0:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
  8602b4:	20 21 00 01 	andi r1,r1,0x1
  8602b8:	44 20 ff fe 	be r1,r0,8602b0 <m1sleep+0x2c>
}
  8602bc:	c3 a0 00 00 	ret

008602c0 <flancopos>:

uint32_t flancopos()                                // devuelve el valor del flanco negativo
{
	uint32_t tcr;
	// Use timer0.1
	timer0->counter1 = 0;                       // pone el contador en 0 
  8602c0:	78 01 00 86 	mvhi r1,0x86
  8602c4:	38 21 05 bc 	ori r1,r1,0x5bc
  8602c8:	28 22 00 00 	lw r2,(r1+0)
	timer0->tcr1 = TIMER_EN;                    // habilita el timer 0 
        timer1->tcr0 = 0  ;                         // pone tcr0 timer 1 en 0   
  8602cc:	78 01 00 86 	mvhi r1,0x86
  8602d0:	38 21 05 b8 	ori r1,r1,0x5b8
  8602d4:	28 21 00 00 	lw r1,(r1+0)

uint32_t flancopos()                                // devuelve el valor del flanco negativo
{
	uint32_t tcr;
	// Use timer0.1
	timer0->counter1 = 0;                       // pone el contador en 0 
  8602d8:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;                    // habilita el timer 0 
  8602dc:	34 03 00 08 	mvi r3,8
  8602e0:	58 43 00 0c 	sw (r2+12),r3
        timer1->tcr0 = 0  ;                         // pone tcr0 timer 1 en 0   
  8602e4:	58 20 00 00 	sw (r1+0),r0

        return timer1->counter0;                    // devuelve el contador0 del timer1   
  8602e8:	28 21 00 08 	lw r1,(r1+8)
   
}
  8602ec:	c3 a0 00 00 	ret

008602f0 <flanconeg>:
uint32_t flanconeg()                                // devuelve el valor del flanco positivo
{
	uint32_t tiempo;
	// Use timer0.1
        timer0->tcr1 = 0;                           // pone tcrq del timer 0 en cero  
  8602f0:	78 02 00 86 	mvhi r2,0x86
  8602f4:	38 42 05 bc 	ori r2,r2,0x5bc
        timer1->counter0 = 0;                       // pone el contador0 en el timer 1
  8602f8:	78 01 00 86 	mvhi r1,0x86
}
uint32_t flanconeg()                                // devuelve el valor del flanco positivo
{
	uint32_t tiempo;
	// Use timer0.1
        timer0->tcr1 = 0;                           // pone tcrq del timer 0 en cero  
  8602fc:	28 42 00 00 	lw r2,(r2+0)
        timer1->counter0 = 0;                       // pone el contador0 en el timer 1
  860300:	38 21 05 b8 	ori r1,r1,0x5b8
  860304:	28 21 00 00 	lw r1,(r1+0)
}
uint32_t flanconeg()                                // devuelve el valor del flanco positivo
{
	uint32_t tiempo;
	// Use timer0.1
        timer0->tcr1 = 0;                           // pone tcrq del timer 0 en cero  
  860308:	58 40 00 0c 	sw (r2+12),r0
        timer1->counter0 = 0;                       // pone el contador0 en el timer 1
        timer1->tcr0 = TIMER_EN;                    // habilita el timer 1
  86030c:	34 03 00 08 	mvi r3,8
uint32_t flanconeg()                                // devuelve el valor del flanco positivo
{
	uint32_t tiempo;
	// Use timer0.1
        timer0->tcr1 = 0;                           // pone tcrq del timer 0 en cero  
        timer1->counter0 = 0;                       // pone el contador0 en el timer 1
  860310:	58 20 00 08 	sw (r1+8),r0
        timer1->tcr0 = TIMER_EN;                    // habilita el timer 1
  860314:	58 23 00 00 	sw (r1+0),r3
         
	
	return timer0->counter1;                    // devuelve el contador1 del timer0    
  860318:	28 41 00 14 	lw r1,(r2+20)
	
}
  86031c:	c3 a0 00 00 	ret

00860320 <uart_init>:
	//uart0->lcr = 0x03;  // Line Control Register:    8N1
	//uart0->mcr = 0x00;  // Modem Control Register

	// Setup Divisor register (Fclk / Baud)
	//uart0->div = (FCPU/(57600*16));
}
  860320:	c3 a0 00 00 	ret

00860324 <prueba1>:
         }          

}

void prueba1()                         // genera un tren de pulsos flanco positivo y negativo 4 ms
{
  860324:	37 9c ff f8 	addi sp,sp,-8
  860328:	5b 8b 00 08 	sw (sp+8),r11
  86032c:	5b 9d 00 04 	sw (sp+4),ra
      gpio0->write=0x00;   
  860330:	78 0b 00 86 	mvhi r11,0x86
  860334:	39 6b 05 b4 	ori r11,r11,0x5b4
  860338:	29 62 00 00 	lw r2,(r11+0)
      msleep(4);
  86033c:	34 01 00 04 	mvi r1,4

}

void prueba1()                         // genera un tren de pulsos flanco positivo y negativo 4 ms
{
      gpio0->write=0x00;   
  860340:	58 40 00 04 	sw (r2+4),r0
      msleep(4);
  860344:	fb ff ff b4 	calli 860214 <msleep>
      gpio0->write=0x01;
  860348:	29 62 00 00 	lw r2,(r11+0)
  86034c:	34 03 00 01 	mvi r3,1
      msleep(4);
  860350:	34 01 00 04 	mvi r1,4

void prueba1()                         // genera un tren de pulsos flanco positivo y negativo 4 ms
{
      gpio0->write=0x00;   
      msleep(4);
      gpio0->write=0x01;
  860354:	58 43 00 04 	sw (r2+4),r3
      msleep(4);
  860358:	fb ff ff af 	calli 860214 <msleep>
}
  86035c:	2b 9d 00 04 	lw ra,(sp+4)
  860360:	2b 8b 00 08 	lw r11,(sp+8)
  860364:	37 9c 00 08 	addi sp,sp,8
  860368:	c3 a0 00 00 	ret

0086036c <uart_getchar>:
/***************************************************************************
 * UART Functions
 */

char uart_getchar()
{   
  86036c:	78 01 00 86 	mvhi r1,0x86
  860370:	38 21 05 ac 	ori r1,r1,0x5ac
  860374:	28 22 00 00 	lw r2,(r1+0)
	while (! (uart0->ucr & UART_DR)) ;
  860378:	28 41 00 00 	lw r1,(r2+0)
  86037c:	20 21 00 01 	andi r1,r1,0x1
  860380:	44 20 ff fe 	be r1,r0,860378 <uart_getchar+0xc>
	return uart0->rxtx;
  860384:	28 41 00 04 	lw r1,(r2+4)
}
  860388:	20 21 00 ff 	andi r1,r1,0xff
  86038c:	c3 a0 00 00 	ret

00860390 <uart_getint>:
int uart_getint()
{
  860390:	78 01 00 86 	mvhi r1,0x86
  860394:	38 21 05 ac 	ori r1,r1,0x5ac
  860398:	28 22 00 00 	lw r2,(r1+0)
 while (! (uart0->ucr & UART_DR)) ;
  86039c:	28 41 00 00 	lw r1,(r2+0)
  8603a0:	20 21 00 01 	andi r1,r1,0x1
  8603a4:	44 20 ff fe 	be r1,r0,86039c <uart_getint+0xc>
	return uart0->rxtx;
  8603a8:	28 41 00 04 	lw r1,(r2+4)

}
  8603ac:	c3 a0 00 00 	ret

008603b0 <uart_putchar1>:

void uart_putchar1(char f) //obtener caracter de la variable 
{
  8603b0:	78 02 00 86 	mvhi r2,0x86
  8603b4:	38 42 05 b0 	ori r2,r2,0x5b0
  8603b8:	28 43 00 00 	lw r3,(r2+0)
  8603bc:	20 21 00 ff 	andi r1,r1,0xff
	while (uart1->ucr & UART_BUSY) ;
  8603c0:	28 62 00 00 	lw r2,(r3+0)
  8603c4:	20 42 00 10 	andi r2,r2,0x10
  8603c8:	5c 40 ff fe 	bne r2,r0,8603c0 <uart_putchar1+0x10>
	uart1->rxtx = f;
  8603cc:	58 61 00 04 	sw (r3+4),r1
}
  8603d0:	c3 a0 00 00 	ret

008603d4 <uart_getchar1>:

char uart_getchar1()
{   
  8603d4:	78 01 00 86 	mvhi r1,0x86
  8603d8:	38 21 05 b0 	ori r1,r1,0x5b0
  8603dc:	28 22 00 00 	lw r2,(r1+0)
	while (! (uart1->ucr & UART_DR)) ;
  8603e0:	28 41 00 00 	lw r1,(r2+0)
  8603e4:	20 21 00 01 	andi r1,r1,0x1
  8603e8:	44 20 ff fe 	be r1,r0,8603e0 <uart_getchar1+0xc>
	return uart1->rxtx;
  8603ec:	28 41 00 04 	lw r1,(r2+4)
}
  8603f0:	20 21 00 ff 	andi r1,r1,0xff
  8603f4:	c3 a0 00 00 	ret

008603f8 <uart_putchar>:

void uart_putchar(char c)
{
  8603f8:	78 02 00 86 	mvhi r2,0x86
  8603fc:	38 42 05 ac 	ori r2,r2,0x5ac
  860400:	28 43 00 00 	lw r3,(r2+0)
  860404:	20 21 00 ff 	andi r1,r1,0xff
	while (uart0->ucr & UART_BUSY) ;
  860408:	28 62 00 00 	lw r2,(r3+0)
  86040c:	20 42 00 10 	andi r2,r2,0x10
  860410:	5c 40 ff fe 	bne r2,r0,860408 <uart_putchar+0x10>
	uart0->rxtx = c;
  860414:	58 61 00 04 	sw (r3+4),r1
}
  860418:	c3 a0 00 00 	ret

0086041c <uart_putint>:
void uart_putint(int d)
{
  86041c:	78 02 00 86 	mvhi r2,0x86
  860420:	38 42 05 ac 	ori r2,r2,0x5ac
  860424:	28 43 00 00 	lw r3,(r2+0)
	while (uart0->ucr & UART_BUSY) ;
  860428:	28 62 00 00 	lw r2,(r3+0)
  86042c:	20 42 00 10 	andi r2,r2,0x10
  860430:	5c 40 ff fe 	bne r2,r0,860428 <uart_putint+0xc>
	uart0->rxtx = d;
  860434:	58 61 00 04 	sw (r3+4),r1
}
  860438:	c3 a0 00 00 	ret

0086043c <uart_putstr>:

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
  86043c:	40 24 00 00 	lbu r4,(r1+0)
  860440:	44 80 00 0b 	be r4,r0,86046c <uart_putstr+0x30>
  860444:	78 02 00 86 	mvhi r2,0x86
  860448:	38 42 05 ac 	ori r2,r2,0x5ac
  86044c:	28 43 00 00 	lw r3,(r2+0)
	return uart1->rxtx;
}

void uart_putchar(char c)
{
	while (uart0->ucr & UART_BUSY) ;
  860450:	28 62 00 00 	lw r2,(r3+0)
  860454:	20 42 00 10 	andi r2,r2,0x10
  860458:	5c 40 ff fe 	bne r2,r0,860450 <uart_putstr+0x14>
	uart0->rxtx = c;
  86045c:	58 64 00 04 	sw (r3+4),r4
void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
		uart_putchar(*c);
		c++;
  860460:	34 21 00 01 	addi r1,r1,1
}

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
  860464:	40 24 00 00 	lbu r4,(r1+0)
  860468:	5c 82 ff fa 	bne r4,r2,860450 <uart_putstr+0x14>
  86046c:	c3 a0 00 00 	ret

00860470 <prueba>:
/***************************************************************************
 * GPIO Funciones pruebas
 */

void prueba()                          // Si se activa el pin6 del GPIO prenda el led1
{ 
  860470:	37 9c ff f4 	addi sp,sp,-12
  860474:	5b 8b 00 0c 	sw (sp+12),r11
  860478:	5b 8c 00 08 	sw (sp+8),r12
  86047c:	5b 9d 00 04 	sw (sp+4),ra
     uint32_t out1;
     uint32_t entrada;
                          
     entrada = gpio0->read;
  860480:	78 0b 00 86 	mvhi r11,0x86
  860484:	39 6b 05 b4 	ori r11,r11,0x5b4
  860488:	29 62 00 00 	lw r2,(r11+0)
     uart_putstr('a');
  86048c:	34 01 00 61 	mvi r1,97
void prueba()                          // Si se activa el pin6 del GPIO prenda el led1
{ 
     uint32_t out1;
     uint32_t entrada;
                          
     entrada = gpio0->read;
  860490:	28 4c 00 00 	lw r12,(r2+0)
     uart_putstr('a');
  860494:	fb ff ff ea 	calli 86043c <uart_putstr>
     gpio0->write=0x00;   
  860498:	29 61 00 00 	lw r1,(r11+0)
                        
      if(entrada==0x40)
  86049c:	34 02 00 40 	mvi r2,64
     uint32_t out1;
     uint32_t entrada;
                          
     entrada = gpio0->read;
     uart_putstr('a');
     gpio0->write=0x00;   
  8604a0:	58 20 00 04 	sw (r1+4),r0
                        
      if(entrada==0x40)
  8604a4:	45 82 00 06 	be r12,r2,8604bc <prueba+0x4c>
            out1 = 0x01;
            gpio0->write = out1;                     
            msleep(100);
         }          

}
  8604a8:	2b 9d 00 04 	lw ra,(sp+4)
  8604ac:	2b 8b 00 0c 	lw r11,(sp+12)
  8604b0:	2b 8c 00 08 	lw r12,(sp+8)
  8604b4:	37 9c 00 0c 	addi sp,sp,12
  8604b8:	c3 a0 00 00 	ret
     gpio0->write=0x00;   
                        
      if(entrada==0x40)
         {
            out1 = 0x01;
            gpio0->write = out1;                     
  8604bc:	34 02 00 01 	mvi r2,1
  8604c0:	58 22 00 04 	sw (r1+4),r2
            msleep(100);
  8604c4:	34 01 00 64 	mvi r1,100
  8604c8:	fb ff ff 53 	calli 860214 <msleep>
         }          

}
  8604cc:	2b 9d 00 04 	lw ra,(sp+4)
  8604d0:	2b 8b 00 0c 	lw r11,(sp+12)
  8604d4:	2b 8c 00 08 	lw r12,(sp+8)
  8604d8:	37 9c 00 0c 	addi sp,sp,12
  8604dc:	c3 a0 00 00 	ret

008604e0 <sensor>:
/***************************************************************************
 *Sensor functions
 */

void sensor()
{
  8604e0:	37 9c ff ec 	addi sp,sp,-20
  8604e4:	5b 8b 00 14 	sw (sp+20),r11
  8604e8:	5b 8c 00 10 	sw (sp+16),r12
  8604ec:	5b 8d 00 0c 	sw (sp+12),r13
  8604f0:	5b 8e 00 08 	sw (sp+8),r14
  8604f4:	5b 9d 00 04 	sw (sp+4),ra
uint32_t l,t;


t=18;                                       //milisegundos señal low  
        
gpio0->write = 0x00;                        //señal de reset
  8604f8:	78 0c 00 86 	mvhi r12,0x86
  8604fc:	39 8c 05 b4 	ori r12,r12,0x5b4
  860500:	29 82 00 00 	lw r2,(r12+0)
msleep(t);
  860504:	34 01 00 12 	mvi r1,18
uint32_t l,t;


t=18;                                       //milisegundos señal low  
        
gpio0->write = 0x00;                        //señal de reset
  860508:	58 40 00 04 	sw (r2+4),r0
msleep(t);
  86050c:	fb ff ff 42 	calli 860214 <msleep>
gpio0->write = 0x40;                         
  860510:	29 82 00 00 	lw r2,(r12+0)
  860514:	34 01 00 40 	mvi r1,64
gpio0->dir=0x0F;
  860518:	34 03 00 0f 	mvi r3,15

t=18;                                       //milisegundos señal low  
        
gpio0->write = 0x00;                        //señal de reset
msleep(t);
gpio0->write = 0x40;                         
  86051c:	58 41 00 04 	sw (r2+4),r1
gpio0->dir=0x0F;
  860520:	58 43 00 08 	sw (r2+8),r3
l=gpio0->read;
  860524:	28 4b 00 00 	lw r11,(r2+0)

while (l == 0x40)                          // espera hasta que el sensor responda
  860528:	5d 61 00 0a 	bne r11,r1,860550 <sensor+0x70>
  86052c:	78 0d 00 86 	mvhi r13,0x86
  860530:	39 ad 05 84 	ori r13,r13,0x584
  860534:	34 0e 00 40 	mvi r14,64
  860538:	e0 00 00 02 	bi 860540 <sensor+0x60>
  86053c:	29 82 00 00 	lw r2,(r12+0)
{
  l=gpio0->read;
  860540:	28 4b 00 00 	lw r11,(r2+0)
  uart_putstr("esperando respuesta");
  860544:	b9 a0 08 00 	mv r1,r13
  860548:	fb ff ff bd 	calli 86043c <uart_putstr>
msleep(t);
gpio0->write = 0x40;                         
gpio0->dir=0x0F;
l=gpio0->read;

while (l == 0x40)                          // espera hasta que el sensor responda
  86054c:	45 6e ff fc 	be r11,r14,86053c <sensor+0x5c>
{
  l=gpio0->read;
  uart_putstr("esperando respuesta");
}
if(l==0x00)
  860550:	5d 60 00 04 	bne r11,r0,860560 <sensor+0x80>
uart_putstr("responde el sensor"); 
  860554:	78 01 00 86 	mvhi r1,0x86
  860558:	38 21 05 98 	ori r1,r1,0x598
  86055c:	fb ff ff b8 	calli 86043c <uart_putstr>

} 
  860560:	2b 9d 00 04 	lw ra,(sp+4)
  860564:	2b 8b 00 14 	lw r11,(sp+20)
  860568:	2b 8c 00 10 	lw r12,(sp+16)
  86056c:	2b 8d 00 0c 	lw r13,(sp+12)
  860570:	2b 8e 00 08 	lw r14,(sp+8)
  860574:	37 9c 00 14 	addi sp,sp,20
  860578:	c3 a0 00 00 	ret
