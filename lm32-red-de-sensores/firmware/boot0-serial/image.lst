
image:     formato del fichero elf32-lm32

Secciones:
Ind Nombre        Tamaño    VMA       LMA       Desp fich Alin
  0 .text         00000668  00860000  00860000  00000054  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  1 .rodata       00000008  00860668  00860668  000006bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000014  00860670  00860670  000006c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000090  00860684  00860684  000006d8  2**2
                  ALLOC
  4 .debug_abbrev 0000036d  00000000  00000000  000006d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007c0  00000000  00000000  00000a45  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000005c5  00000000  00000000  00001205  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000190  00000000  00000000  000017cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 000001e2  00000000  00000000  0000195c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_pubtypes 00000085  00000000  00000000  00001b3e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000040  00000000  00000000  00001bc3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000257  00000000  00000000  00001c03  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .comment      00000011  00000000  00000000  00001e5a  2**0
                  CONTENTS, READONLY
 13 .debug_loc    0000010e  00000000  00000000  00001e6b  2**0
                  CONTENTS, READONLY, DEBUGGING

Desensamblado de la sección .text:

00860000 <_ftext>:
  860000:	98 00 00 00 	xor r0,r0,r0
  860004:	d0 00 00 00 	wcsr IE,r0
  860008:	78 01 00 86 	mvhi r1,0x86
  86000c:	38 21 00 00 	ori r1,r1,0x0
  860010:	d0 e1 00 00 	wcsr EBA,r1
  860014:	f8 00 00 3b 	calli 860100 <_crt0>
  860018:	34 00 00 00 	nop
  86001c:	34 00 00 00 	nop

00860020 <_breakpoint_handler>:
  860020:	34 00 00 00 	nop
  860024:	34 00 00 00 	nop
  860028:	34 00 00 00 	nop
  86002c:	34 00 00 00 	nop
  860030:	34 00 00 00 	nop
  860034:	34 00 00 00 	nop
  860038:	34 00 00 00 	nop
  86003c:	34 00 00 00 	nop

00860040 <_ibuserror_handler>:
  860040:	34 00 00 00 	nop
  860044:	34 00 00 00 	nop
  860048:	34 00 00 00 	nop
  86004c:	34 00 00 00 	nop
  860050:	34 00 00 00 	nop
  860054:	34 00 00 00 	nop
  860058:	34 00 00 00 	nop
  86005c:	34 00 00 00 	nop

00860060 <_watchpoint_handler>:
  860060:	34 00 00 00 	nop
  860064:	34 00 00 00 	nop
  860068:	34 00 00 00 	nop
  86006c:	34 00 00 00 	nop
  860070:	34 00 00 00 	nop
  860074:	34 00 00 00 	nop
  860078:	34 00 00 00 	nop
  86007c:	34 00 00 00 	nop

00860080 <_dbuserror_handler>:
  860080:	34 00 00 00 	nop
  860084:	34 00 00 00 	nop
  860088:	34 00 00 00 	nop
  86008c:	34 00 00 00 	nop
  860090:	34 00 00 00 	nop
  860094:	34 00 00 00 	nop
  860098:	34 00 00 00 	nop
  86009c:	34 00 00 00 	nop

008600a0 <_divzero_handler>:
  8600a0:	34 00 00 00 	nop
  8600a4:	34 00 00 00 	nop
  8600a8:	34 00 00 00 	nop
  8600ac:	34 00 00 00 	nop
  8600b0:	34 00 00 00 	nop
  8600b4:	34 00 00 00 	nop
  8600b8:	34 00 00 00 	nop
  8600bc:	34 00 00 00 	nop

008600c0 <_interrupt_handler>:
  8600c0:	5b 9d 00 00 	sw (sp+0),ra
  8600c4:	f8 00 00 2b 	calli 860170 <_save_all>
  8600c8:	90 40 08 00 	rcsr r1,IP
  8600cc:	f8 00 00 5d 	calli 860240 <irq_handler>
  8600d0:	78 01 ff ff 	mvhi r1,0xffff
  8600d4:	38 21 ff ff 	ori r1,r1,0xffff
  8600d8:	d0 41 00 00 	wcsr IP,r1
  8600dc:	e0 00 00 35 	bi 8601b0 <_restore_all_and_eret>

008600e0 <_scall_handler>:
  8600e0:	34 00 00 00 	nop
  8600e4:	34 00 00 00 	nop
  8600e8:	34 00 00 00 	nop
  8600ec:	34 00 00 00 	nop
  8600f0:	34 00 00 00 	nop
  8600f4:	34 00 00 00 	nop
  8600f8:	34 00 00 00 	nop
  8600fc:	34 00 00 00 	nop

00860100 <_crt0>:
  860100:	78 1c 00 86 	mvhi sp,0x86
  860104:	3b 9c 0f fc 	ori sp,sp,0xffc
  860108:	78 1a 00 86 	mvhi gp,0x86
  86010c:	3b 5a 06 90 	ori gp,gp,0x690
  860110:	78 01 00 86 	mvhi r1,0x86
  860114:	38 21 06 84 	ori r1,r1,0x684
  860118:	78 03 00 86 	mvhi r3,0x86
  86011c:	38 63 07 14 	ori r3,r3,0x714

00860120 <.clearBSS>:
  860120:	44 23 00 04 	be r1,r3,860130 <.callMain>
  860124:	58 20 00 00 	sw (r1+0),r0
  860128:	34 21 00 04 	addi r1,r1,4
  86012c:	e3 ff ff fd 	bi 860120 <.clearBSS>

00860130 <.callMain>:
  860130:	34 01 00 00 	mvi r1,0
  860134:	34 02 00 00 	mvi r2,0
  860138:	34 03 00 00 	mvi r3,0
  86013c:	f8 00 00 30 	calli 8601fc <main>

00860140 <irq_enable>:
  860140:	34 01 00 01 	mvi r1,1
  860144:	d0 01 00 00 	wcsr IE,r1
  860148:	c3 a0 00 00 	ret

0086014c <irq_disable>:
  86014c:	34 01 00 00 	mvi r1,0
  860150:	d0 01 00 00 	wcsr IE,r1
  860154:	c3 a0 00 00 	ret

00860158 <irq_set_mask>:
  860158:	d0 21 00 00 	wcsr IM,r1
  86015c:	c3 a0 00 00 	ret

00860160 <irq_get_mask>:
  860160:	90 20 08 00 	rcsr r1,IM
  860164:	c3 a0 00 00 	ret

00860168 <jump>:
  860168:	c0 20 00 00 	b r1

0086016c <halt>:
  86016c:	e0 00 00 00 	bi 86016c <halt>

00860170 <_save_all>:
  860170:	37 9c ff 80 	addi sp,sp,-128
  860174:	5b 81 00 04 	sw (sp+4),r1
  860178:	5b 82 00 08 	sw (sp+8),r2
  86017c:	5b 83 00 0c 	sw (sp+12),r3
  860180:	5b 84 00 10 	sw (sp+16),r4
  860184:	5b 85 00 14 	sw (sp+20),r5
  860188:	5b 86 00 18 	sw (sp+24),r6
  86018c:	5b 87 00 1c 	sw (sp+28),r7
  860190:	5b 9e 00 78 	sw (sp+120),ea
  860194:	5b 9f 00 7c 	sw (sp+124),ba
  860198:	2b 81 00 80 	lw r1,(sp+128)
  86019c:	5b 81 00 74 	sw (sp+116),r1
  8601a0:	bb 80 08 00 	mv r1,sp
  8601a4:	34 21 00 80 	addi r1,r1,128
  8601a8:	5b 81 00 70 	sw (sp+112),r1
  8601ac:	c3 a0 00 00 	ret

008601b0 <_restore_all_and_eret>:
  8601b0:	2b 81 00 04 	lw r1,(sp+4)
  8601b4:	2b 82 00 08 	lw r2,(sp+8)
  8601b8:	2b 83 00 0c 	lw r3,(sp+12)
  8601bc:	2b 84 00 10 	lw r4,(sp+16)
  8601c0:	2b 85 00 14 	lw r5,(sp+20)
  8601c4:	2b 86 00 18 	lw r6,(sp+24)
  8601c8:	2b 87 00 1c 	lw r7,(sp+28)
  8601cc:	2b 88 00 20 	lw r8,(sp+32)
  8601d0:	2b 89 00 24 	lw r9,(sp+36)
  8601d4:	2b 8a 00 28 	lw r10,(sp+40)
  8601d8:	2b 9d 00 74 	lw ra,(sp+116)
  8601dc:	2b 9e 00 78 	lw ea,(sp+120)
  8601e0:	2b 9f 00 7c 	lw ba,(sp+124)
  8601e4:	2b 9c 00 70 	lw sp,(sp+112)
  8601e8:	c3 c0 00 00 	eret

008601ec <get_sp>:
  8601ec:	bb 80 08 00 	mv r1,sp
  8601f0:	c3 a0 00 00 	ret

008601f4 <get_gp>:
  8601f4:	bb 40 08 00 	mv r1,gp
  8601f8:	c3 a0 00 00 	ret

008601fc <main>:

uint32_t tem;
uint32_t data;
int contador;
int main()
{
  8601fc:	37 9c ff fc 	addi sp,sp,-4
  860200:	5b 9d 00 04 	sw (sp+4),ra
        gpio0->dir=0xff;
  860204:	78 01 00 86 	mvhi r1,0x86
  860208:	38 21 06 78 	ori r1,r1,0x678
  86020c:	28 23 00 00 	lw r3,(r1+0)
        contador=0;
  860210:	78 02 00 86 	mvhi r2,0x86
uint32_t tem;
uint32_t data;
int contador;
int main()
{
        gpio0->dir=0xff;
  860214:	34 01 00 ff 	mvi r1,255
  860218:	58 61 00 08 	sw (r3+8),r1
        contador=0;
  86021c:	38 42 06 8c 	ori r2,r2,0x68c
        uint32_t x2=0;                           // valor del contador en segundos flanco negativo
        uint32_t tiempo;                         // valor del contador
        uint32_t i=0;
 
	c='u';   
         gpio0->write = 0x01;                        // Initialize UART
  860220:	34 04 00 01 	mvi r4,1
         msleep(1);
  860224:	34 01 00 01 	mvi r1,1
        uint32_t x2=0;                           // valor del contador en segundos flanco negativo
        uint32_t tiempo;                         // valor del contador
        uint32_t i=0;
 
	c='u';   
         gpio0->write = 0x01;                        // Initialize UART
  860228:	58 64 00 04 	sw (r3+4),r4
uint32_t data;
int contador;
int main()
{
        gpio0->dir=0xff;
        contador=0;
  86022c:	58 40 00 00 	sw (r2+0),r0
        uint32_t tiempo;                         // valor del contador
        uint32_t i=0;
 
	c='u';   
         gpio0->write = 0x01;                        // Initialize UART
         msleep(1);
  860230:	f8 00 00 3f 	calli 86032c <msleep>
      
	//tic_init();
            
        //gpio0->write = 0x00;
       
        sensor();
  860234:	f8 00 00 5b 	calli 8603a0 <sensor>
  860238:	e0 00 00 00 	bi 860238 <main+0x3c>

0086023c <isr_null>:
/***************************************************************************
 * IRQ handling
 */
void isr_null()
{
}
  86023c:	c3 a0 00 00 	ret

00860240 <irq_handler>:

        
         contador=contador + 1; 
                                 
    
        tem =  timer0->counter0;
  860240:	78 01 00 86 	mvhi r1,0x86
  860244:	38 21 06 80 	ori r1,r1,0x680
  860248:	28 25 00 00 	lw r5,(r1+0)
         uint32_t entrada;  
      
        //timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;

        
         contador=contador + 1; 
  86024c:	78 02 00 86 	mvhi r2,0x86
  860250:	38 42 06 8c 	ori r2,r2,0x68c
                                 
    
        tem =  timer0->counter0;
 
        uart_putchar(data); 
  860254:	78 03 00 86 	mvhi r3,0x86
         uint32_t entrada;  
      
        //timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;

        
         contador=contador + 1; 
  860258:	28 46 00 00 	lw r6,(r2+0)
                                 
    
        tem =  timer0->counter0;
 
        uart_putchar(data); 
  86025c:	38 63 06 90 	ori r3,r3,0x690
  860260:	78 01 00 86 	mvhi r1,0x86

        
         contador=contador + 1; 
                                 
    
        tem =  timer0->counter0;
  860264:	28 a7 00 08 	lw r7,(r5+8)
 
        uart_putchar(data); 
  860268:	28 68 00 00 	lw r8,(r3+0)
  86026c:	38 21 06 70 	ori r1,r1,0x670

        
         contador=contador + 1; 
                                 
    
        tem =  timer0->counter0;
  860270:	78 04 00 86 	mvhi r4,0x86
 
        uart_putchar(data); 
  860274:	28 21 00 00 	lw r1,(r1+0)

        
         contador=contador + 1; 
                                 
    
        tem =  timer0->counter0;
  860278:	38 84 06 88 	ori r4,r4,0x688
         uint32_t entrada;  
      
        //timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;

        
         contador=contador + 1; 
  86027c:	34 c6 00 01 	addi r6,r6,1
                                 
    
        tem =  timer0->counter0;
  860280:	58 87 00 00 	sw (r4+0),r7
         uint32_t entrada;  
      
        //timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;

        
         contador=contador + 1; 
  860284:	58 46 00 00 	sw (r2+0),r6
                                 
    
        tem =  timer0->counter0;
 
        uart_putchar(data); 
  860288:	21 04 00 ff 	andi r4,r8,0xff
	return uart1->rxtx;
}

void uart_putchar(char c)
{
	while (uart0->ucr & UART_BUSY) ;
  86028c:	28 22 00 00 	lw r2,(r1+0)
  860290:	20 42 00 10 	andi r2,r2,0x10
  860294:	5c 40 ff fe 	bne r2,r0,86028c <irq_handler+0x4c>
	uart0->rxtx = c;
  860298:	58 24 00 04 	sw (r1+4),r4
  
                    gpio = ((tem <= 0xBB8)&&(tem >= 0x1f40))? 1:0;  
                     data = data  + gpio;
                
                 
                   if(contador< 0x21)
  86029c:	34 02 00 20 	mvi r2,32
                     data  = data << 1;
                       else
                         uart_putchar(tem);
  8602a0:	20 e7 00 ff 	andi r7,r7,0xff
  
                    gpio = ((tem <= 0xBB8)&&(tem >= 0x1f40))? 1:0;  
                     data = data  + gpio;
                
                 
                   if(contador< 0x21)
  8602a4:	48 c2 00 05 	bg r6,r2,8602b8 <irq_handler+0x78>
                     data  = data << 1;
  8602a8:	3d 08 00 01 	sli r8,r8,1
                       else
                         uart_putchar(tem);

                         timer0->counter0 = 0;     
  8602ac:	58 a0 00 08 	sw (r5+8),r0
                    gpio = ((tem <= 0xBB8)&&(tem >= 0x1f40))? 1:0;  
                     data = data  + gpio;
                
                 
                   if(contador< 0x21)
                     data  = data << 1;
  8602b0:	58 68 00 00 	sw (r3+0),r8
                       else
                         uart_putchar(tem);

                         timer0->counter0 = 0;     
                 }
  8602b4:	c3 a0 00 00 	ret
	return uart1->rxtx;
}

void uart_putchar(char c)
{
	while (uart0->ucr & UART_BUSY) ;
  8602b8:	28 22 00 00 	lw r2,(r1+0)
  8602bc:	20 42 00 10 	andi r2,r2,0x10
  8602c0:	5c 40 ff fe 	bne r2,r0,8602b8 <irq_handler+0x78>
	uart0->rxtx = c;
  8602c4:	58 27 00 04 	sw (r1+4),r7
                   if(contador< 0x21)
                     data  = data << 1;
                       else
                         uart_putchar(tem);

                         timer0->counter0 = 0;     
  8602c8:	58 a0 00 08 	sw (r5+8),r0
                 }
  8602cc:	c3 a0 00 00 	ret

008602d0 <isr_init>:

void isr_init()
{
  8602d0:	78 01 00 86 	mvhi r1,0x86
  8602d4:	78 02 00 86 	mvhi r2,0x86
  8602d8:	38 21 06 94 	ori r1,r1,0x694
  8602dc:	38 42 02 3c 	ori r2,r2,0x23c
                         uart_putchar(tem);

                         timer0->counter0 = 0;     
                 }

void isr_init()
  8602e0:	34 23 00 80 	addi r3,r1,128
{
	int i;
	for(i=0; i<32; i++)
		isr_table[i] = &isr_null;
  8602e4:	58 22 00 00 	sw (r1+0),r2
  8602e8:	34 21 00 04 	addi r1,r1,4
                 }

void isr_init()
{
	int i;
	for(i=0; i<32; i++)
  8602ec:	5c 23 ff fe 	bne r1,r3,8602e4 <isr_init+0x14>
		isr_table[i] = &isr_null;
}
  8602f0:	c3 a0 00 00 	ret

008602f4 <isr_register>:

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
  8602f4:	78 03 00 86 	mvhi r3,0x86
  8602f8:	3c 21 00 02 	sli r1,r1,2
  8602fc:	38 63 06 94 	ori r3,r3,0x694
  860300:	b4 61 18 00 	add r3,r3,r1
  860304:	58 62 00 00 	sw (r3+0),r2
}
  860308:	c3 a0 00 00 	ret

0086030c <isr_unregister>:

void isr_unregister(int irq)
{
	isr_table[irq] = &isr_null;
  86030c:	78 03 00 86 	mvhi r3,0x86
  860310:	3c 21 00 02 	sli r1,r1,2
  860314:	38 63 06 94 	ori r3,r3,0x694
  860318:	78 02 00 86 	mvhi r2,0x86
  86031c:	b4 61 18 00 	add r3,r3,r1
  860320:	38 42 02 3c 	ori r2,r2,0x23c
  860324:	58 62 00 00 	sw (r3+0),r2
}
  860328:	c3 a0 00 00 	ret

0086032c <msleep>:
void msleep(uint32_t msec)
{
	uint32_t tcr;
        uint32_t tcr1;
	// Use timer0.1
	timer0->compare1 = (FCPU/1000)*msec;
  86032c:	78 04 00 86 	mvhi r4,0x86
  860330:	38 84 06 68 	ori r4,r4,0x668
  860334:	28 83 00 00 	lw r3,(r4+0)
  860338:	78 02 00 86 	mvhi r2,0x86
  86033c:	38 42 06 80 	ori r2,r2,0x680
  860340:	28 42 00 00 	lw r2,(r2+0)
  860344:	88 23 08 00 	mul r1,r1,r3
  860348:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
  86034c:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
  860350:	34 01 00 08 	mvi r1,8
  860354:	58 41 00 0c 	sw (r2+12),r1
         tcr1 = timer0->compare1;
  860358:	28 41 00 10 	lw r1,(r2+16)
	do {
		//halt();
 		tcr = timer0->tcr1;
  86035c:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
  860360:	20 21 00 01 	andi r1,r1,0x1
  860364:	44 20 ff fe 	be r1,r0,86035c <msleep+0x30>
}
  860368:	c3 a0 00 00 	ret

0086036c <nsleep>:
uint32_t nsleep(uint32_t nsec)
{
	uint32_t tcr;
        
	// Use timer0.1    
	timer0->compare1 = (FCPU/1000000)*nsec;
  86036c:	78 02 00 86 	mvhi r2,0x86
  860370:	38 42 06 80 	ori r2,r2,0x680
  860374:	28 42 00 00 	lw r2,(r2+0)
  860378:	08 21 00 64 	muli r1,r1,100
  86037c:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
  860380:	58 40 00 14 	sw (r2+20),r0
        
	timer0->tcr1 = TIMER_EN;
  860384:	34 01 00 08 	mvi r1,8
  860388:	58 41 00 0c 	sw (r2+12),r1

	do {
		//halt();
 		tcr = timer0->tcr1;
  86038c:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
  860390:	20 21 00 01 	andi r1,r1,0x1
  860394:	44 20 ff fe 	be r1,r0,86038c <nsleep+0x20>

  return timer0->counter1;
  860398:	28 41 00 14 	lw r1,(r2+20)
}
  86039c:	c3 a0 00 00 	ret

008603a0 <sensor>:
/***************************************************************************
 *Sensor functions
 */

void sensor()
{
  8603a0:	37 9c ff f8 	addi sp,sp,-8
  8603a4:	5b 8b 00 08 	sw (sp+8),r11
  8603a8:	5b 9d 00 04 	sw (sp+4),ra



t=18;                                       //milisegundos señal low  
      
gpio0->write = 0x00;                        //señal de reset
  8603ac:	78 0b 00 86 	mvhi r11,0x86
  8603b0:	39 6b 06 78 	ori r11,r11,0x678
  8603b4:	29 62 00 00 	lw r2,(r11+0)
msleep(18);
  8603b8:	34 01 00 12 	mvi r1,18



t=18;                                       //milisegundos señal low  
      
gpio0->write = 0x00;                        //señal de reset
  8603bc:	58 40 00 04 	sw (r2+4),r0
msleep(18);
  8603c0:	fb ff ff db 	calli 86032c <msleep>
gpio0->write = 0x01; 
  8603c4:	29 62 00 00 	lw r2,(r11+0)
gpio0->dir=0x00;
 

timer0->tcr0 = TIMER_EN | TIMER_IRQEN | TIMER_pin;
  8603c8:	78 01 00 86 	mvhi r1,0x86
  8603cc:	38 21 06 80 	ori r1,r1,0x680

t=18;                                       //milisegundos señal low  
      
gpio0->write = 0x00;                        //señal de reset
msleep(18);
gpio0->write = 0x01; 
  8603d0:	34 03 00 01 	mvi r3,1
gpio0->dir=0x00;
 

timer0->tcr0 = TIMER_EN | TIMER_IRQEN | TIMER_pin;
  8603d4:	28 21 00 00 	lw r1,(r1+0)

t=18;                                       //milisegundos señal low  
      
gpio0->write = 0x00;                        //señal de reset
msleep(18);
gpio0->write = 0x01; 
  8603d8:	58 43 00 04 	sw (r2+4),r3
gpio0->dir=0x00;
  8603dc:	58 40 00 08 	sw (r2+8),r0
 

timer0->tcr0 = TIMER_EN | TIMER_IRQEN | TIMER_pin;
  8603e0:	34 02 00 1a 	mvi r2,26
  8603e4:	58 22 00 00 	sw (r1+0),r2
nsleep(160);
  8603e8:	34 01 00 a0 	mvi r1,160
  8603ec:	fb ff ff e0 	calli 86036c <nsleep>
irq_enable();   
  8603f0:	fb ff ff 54 	calli 860140 <irq_enable>
irq_set_mask(0x04);
  8603f4:	34 01 00 04 	mvi r1,4
  8603f8:	fb ff ff 58 	calli 860158 <irq_set_mask>


} 
  8603fc:	2b 9d 00 04 	lw ra,(sp+4)
  860400:	2b 8b 00 08 	lw r11,(sp+8)
  860404:	37 9c 00 08 	addi sp,sp,8
  860408:	c3 a0 00 00 	ret

0086040c <m1sleep>:
void m1sleep(uint32_t msec)
{
	uint32_t tcr;

	// Use timer0.1
	timer1->compare1 = (FCPU/1000)*msec;
  86040c:	78 04 00 86 	mvhi r4,0x86
  860410:	38 84 06 68 	ori r4,r4,0x668
  860414:	28 83 00 00 	lw r3,(r4+0)
  860418:	78 02 00 86 	mvhi r2,0x86
  86041c:	38 42 06 7c 	ori r2,r2,0x67c
  860420:	28 42 00 00 	lw r2,(r2+0)
  860424:	88 23 08 00 	mul r1,r1,r3
  860428:	58 41 00 10 	sw (r2+16),r1
	timer1->counter1 = 0;
  86042c:	58 40 00 14 	sw (r2+20),r0
	timer1->tcr1 = TIMER_EN;
  860430:	34 01 00 08 	mvi r1,8
  860434:	58 41 00 0c 	sw (r2+12),r1

	do {
		//halt();
 		tcr = timer1->tcr1;
  860438:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
  86043c:	20 21 00 01 	andi r1,r1,0x1
  860440:	44 20 ff fe 	be r1,r0,860438 <m1sleep+0x2c>
}
  860444:	c3 a0 00 00 	ret

00860448 <flancopos>:

void flancopos()                                // devuelve el valor del flanco negativo
{
	uint32_t tcr;
	// Use timer0.1
	timer0->counter1 = 0;                       // pone el contador en 0 
  860448:	78 01 00 86 	mvhi r1,0x86
  86044c:	38 21 06 80 	ori r1,r1,0x680
  860450:	28 21 00 00 	lw r1,(r1+0)
	timer0->tcr1 = TIMER_EN;                    // habilita el timer 0 
  860454:	34 02 00 08 	mvi r2,8

void flancopos()                                // devuelve el valor del flanco negativo
{
	uint32_t tcr;
	// Use timer0.1
	timer0->counter1 = 0;                       // pone el contador en 0 
  860458:	58 20 00 14 	sw (r1+20),r0
	timer0->tcr1 = TIMER_EN;                    // habilita el timer 0 
  86045c:	58 22 00 0c 	sw (r1+12),r2
                 
   
}
  860460:	c3 a0 00 00 	ret

00860464 <flanconeg>:
uint32_t flanconeg()                                // devuelve el valor del flanco positivo
{
	uint32_t tiempo;
	// Use timer0.1
        timer0->tcr1 = 0;                           // pone tcrq del timer 0 en cero  
  860464:	78 01 00 86 	mvhi r1,0x86
  860468:	38 21 06 80 	ori r1,r1,0x680
  86046c:	28 21 00 00 	lw r1,(r1+0)
  860470:	58 20 00 0c 	sw (r1+12),r0
       	
	return timer0->counter1;                    // devuelve el contador1 del timer0    
  860474:	28 21 00 14 	lw r1,(r1+20)
	
}
  860478:	c3 a0 00 00 	ret

0086047c <tic_init>:


void tic_init()
{
	// Setup timer0.0
	timer0->compare0 = (FCPU/1000)*500;
  86047c:	78 01 00 86 	mvhi r1,0x86
  860480:	78 03 00 86 	mvhi r3,0x86
  860484:	38 21 06 80 	ori r1,r1,0x680
  860488:	38 63 06 6c 	ori r3,r3,0x66c
  86048c:	28 21 00 00 	lw r1,(r1+0)
  860490:	28 62 00 00 	lw r2,(r3+0)
  860494:	58 22 00 04 	sw (r1+4),r2
	timer0->counter0 = 0;
  860498:	58 20 00 08 	sw (r1+8),r0
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
  86049c:	34 02 00 0e 	mvi r2,14
  8604a0:	58 22 00 00 	sw (r1+0),r2
}
  8604a4:	c3 a0 00 00 	ret

008604a8 <uart_init>:
	//uart0->lcr = 0x03;  // Line Control Register:    8N1
	//uart0->mcr = 0x00;  // Modem Control Register

	// Setup Divisor register (Fclk / Baud)
	//uart0->div = (FCPU/(57600*16));
}
  8604a8:	c3 a0 00 00 	ret

008604ac <prueba1>:
         }          

}

void prueba1()                         // genera un tren de pulsos flanco positivo y negativo 4 ms
{
  8604ac:	37 9c ff f8 	addi sp,sp,-8
  8604b0:	5b 8b 00 08 	sw (sp+8),r11
  8604b4:	5b 9d 00 04 	sw (sp+4),ra
      gpio0->write=0x00;   
  8604b8:	78 0b 00 86 	mvhi r11,0x86
  8604bc:	39 6b 06 78 	ori r11,r11,0x678
  8604c0:	29 62 00 00 	lw r2,(r11+0)
      msleep(19);
  8604c4:	34 01 00 13 	mvi r1,19

}

void prueba1()                         // genera un tren de pulsos flanco positivo y negativo 4 ms
{
      gpio0->write=0x00;   
  8604c8:	58 40 00 04 	sw (r2+4),r0
      msleep(19);
  8604cc:	fb ff ff 98 	calli 86032c <msleep>
      gpio0->write=0x01;
  8604d0:	29 62 00 00 	lw r2,(r11+0)
  8604d4:	34 03 00 01 	mvi r3,1
      msleep(6);
  8604d8:	34 01 00 06 	mvi r1,6

void prueba1()                         // genera un tren de pulsos flanco positivo y negativo 4 ms
{
      gpio0->write=0x00;   
      msleep(19);
      gpio0->write=0x01;
  8604dc:	58 43 00 04 	sw (r2+4),r3
      msleep(6);
  8604e0:	fb ff ff 93 	calli 86032c <msleep>
}
  8604e4:	2b 9d 00 04 	lw ra,(sp+4)
  8604e8:	2b 8b 00 08 	lw r11,(sp+8)
  8604ec:	37 9c 00 08 	addi sp,sp,8
  8604f0:	c3 a0 00 00 	ret

008604f4 <uart_getchar>:
/***************************************************************************
 * UART Functions
 */

char uart_getchar()
{   
  8604f4:	78 01 00 86 	mvhi r1,0x86
  8604f8:	38 21 06 70 	ori r1,r1,0x670
  8604fc:	28 22 00 00 	lw r2,(r1+0)
	while (! (uart0->ucr & UART_DR)) ;
  860500:	28 41 00 00 	lw r1,(r2+0)
  860504:	20 21 00 01 	andi r1,r1,0x1
  860508:	44 20 ff fe 	be r1,r0,860500 <uart_getchar+0xc>
	return uart0->rxtx;
  86050c:	28 41 00 04 	lw r1,(r2+4)
}
  860510:	20 21 00 ff 	andi r1,r1,0xff
  860514:	c3 a0 00 00 	ret

00860518 <uart_getint>:
int uart_getint()
{
  860518:	78 01 00 86 	mvhi r1,0x86
  86051c:	38 21 06 70 	ori r1,r1,0x670
  860520:	28 22 00 00 	lw r2,(r1+0)
 while (! (uart0->ucr & UART_DR)) ;
  860524:	28 41 00 00 	lw r1,(r2+0)
  860528:	20 21 00 01 	andi r1,r1,0x1
  86052c:	44 20 ff fe 	be r1,r0,860524 <uart_getint+0xc>
	return uart0->rxtx;
  860530:	28 41 00 04 	lw r1,(r2+4)

}
  860534:	c3 a0 00 00 	ret

00860538 <uart_putchar1>:

void uart_putchar1(char f) //obtener caracter de la variable 
{
  860538:	78 02 00 86 	mvhi r2,0x86
  86053c:	38 42 06 74 	ori r2,r2,0x674
  860540:	28 43 00 00 	lw r3,(r2+0)
  860544:	20 21 00 ff 	andi r1,r1,0xff
	while (uart1->ucr & UART_BUSY) ;
  860548:	28 62 00 00 	lw r2,(r3+0)
  86054c:	20 42 00 10 	andi r2,r2,0x10
  860550:	5c 40 ff fe 	bne r2,r0,860548 <uart_putchar1+0x10>
	uart1->rxtx = f;
  860554:	58 61 00 04 	sw (r3+4),r1
}
  860558:	c3 a0 00 00 	ret

0086055c <uart_getchar1>:

char uart_getchar1()
{   
  86055c:	78 01 00 86 	mvhi r1,0x86
  860560:	38 21 06 74 	ori r1,r1,0x674
  860564:	28 22 00 00 	lw r2,(r1+0)
	while (! (uart1->ucr & UART_DR)) ;
  860568:	28 41 00 00 	lw r1,(r2+0)
  86056c:	20 21 00 01 	andi r1,r1,0x1
  860570:	44 20 ff fe 	be r1,r0,860568 <uart_getchar1+0xc>
	return uart1->rxtx;
  860574:	28 41 00 04 	lw r1,(r2+4)
}
  860578:	20 21 00 ff 	andi r1,r1,0xff
  86057c:	c3 a0 00 00 	ret

00860580 <uart_putchar>:

void uart_putchar(char c)
{
  860580:	78 02 00 86 	mvhi r2,0x86
  860584:	38 42 06 70 	ori r2,r2,0x670
  860588:	28 43 00 00 	lw r3,(r2+0)
  86058c:	20 21 00 ff 	andi r1,r1,0xff
	while (uart0->ucr & UART_BUSY) ;
  860590:	28 62 00 00 	lw r2,(r3+0)
  860594:	20 42 00 10 	andi r2,r2,0x10
  860598:	5c 40 ff fe 	bne r2,r0,860590 <uart_putchar+0x10>
	uart0->rxtx = c;
  86059c:	58 61 00 04 	sw (r3+4),r1
}
  8605a0:	c3 a0 00 00 	ret

008605a4 <uart_putint>:
void uart_putint(int d)
{
  8605a4:	78 02 00 86 	mvhi r2,0x86
  8605a8:	38 42 06 70 	ori r2,r2,0x670
  8605ac:	28 43 00 00 	lw r3,(r2+0)
	while (uart0->ucr & UART_BUSY) ;
  8605b0:	28 62 00 00 	lw r2,(r3+0)
  8605b4:	20 42 00 10 	andi r2,r2,0x10
  8605b8:	5c 40 ff fe 	bne r2,r0,8605b0 <uart_putint+0xc>
	uart0->rxtx = d;
  8605bc:	58 61 00 04 	sw (r3+4),r1
}
  8605c0:	c3 a0 00 00 	ret

008605c4 <uart_putstr>:

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
  8605c4:	40 24 00 00 	lbu r4,(r1+0)
  8605c8:	44 80 00 0b 	be r4,r0,8605f4 <uart_putstr+0x30>
  8605cc:	78 02 00 86 	mvhi r2,0x86
  8605d0:	38 42 06 70 	ori r2,r2,0x670
  8605d4:	28 43 00 00 	lw r3,(r2+0)
	return uart1->rxtx;
}

void uart_putchar(char c)
{
	while (uart0->ucr & UART_BUSY) ;
  8605d8:	28 62 00 00 	lw r2,(r3+0)
  8605dc:	20 42 00 10 	andi r2,r2,0x10
  8605e0:	5c 40 ff fe 	bne r2,r0,8605d8 <uart_putstr+0x14>
	uart0->rxtx = c;
  8605e4:	58 64 00 04 	sw (r3+4),r4
void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
		uart_putchar(*c);
		c++;
  8605e8:	34 21 00 01 	addi r1,r1,1
}

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
  8605ec:	40 24 00 00 	lbu r4,(r1+0)
  8605f0:	5c 82 ff fa 	bne r4,r2,8605d8 <uart_putstr+0x14>
  8605f4:	c3 a0 00 00 	ret

008605f8 <prueba>:
/***************************************************************************
 * GPIO Funciones pruebas
 */

void prueba()                          // Si se activa el pin6 del GPIO prenda el led1
{ 
  8605f8:	37 9c ff f4 	addi sp,sp,-12
  8605fc:	5b 8b 00 0c 	sw (sp+12),r11
  860600:	5b 8c 00 08 	sw (sp+8),r12
  860604:	5b 9d 00 04 	sw (sp+4),ra
     uint32_t out1;
     uint32_t entrada;
                          
     entrada = gpio0->read;
  860608:	78 0b 00 86 	mvhi r11,0x86
  86060c:	39 6b 06 78 	ori r11,r11,0x678
  860610:	29 62 00 00 	lw r2,(r11+0)
     uart_putstr('a');
  860614:	34 01 00 61 	mvi r1,97
void prueba()                          // Si se activa el pin6 del GPIO prenda el led1
{ 
     uint32_t out1;
     uint32_t entrada;
                          
     entrada = gpio0->read;
  860618:	28 4c 00 00 	lw r12,(r2+0)
     uart_putstr('a');
  86061c:	fb ff ff ea 	calli 8605c4 <uart_putstr>
     gpio0->write=0x00;   
  860620:	29 61 00 00 	lw r1,(r11+0)
                        
      if(entrada==0x40)
  860624:	34 02 00 40 	mvi r2,64
     uint32_t out1;
     uint32_t entrada;
                          
     entrada = gpio0->read;
     uart_putstr('a');
     gpio0->write=0x00;   
  860628:	58 20 00 04 	sw (r1+4),r0
                        
      if(entrada==0x40)
  86062c:	45 82 00 06 	be r12,r2,860644 <prueba+0x4c>
            out1 = 0x01;
            gpio0->write = out1;                     
            msleep(100);
         }          

}
  860630:	2b 9d 00 04 	lw ra,(sp+4)
  860634:	2b 8b 00 0c 	lw r11,(sp+12)
  860638:	2b 8c 00 08 	lw r12,(sp+8)
  86063c:	37 9c 00 0c 	addi sp,sp,12
  860640:	c3 a0 00 00 	ret
     gpio0->write=0x00;   
                        
      if(entrada==0x40)
         {
            out1 = 0x01;
            gpio0->write = out1;                     
  860644:	34 02 00 01 	mvi r2,1
  860648:	58 22 00 04 	sw (r1+4),r2
            msleep(100);
  86064c:	34 01 00 64 	mvi r1,100
  860650:	fb ff ff 37 	calli 86032c <msleep>
         }          

}
  860654:	2b 9d 00 04 	lw ra,(sp+4)
  860658:	2b 8b 00 0c 	lw r11,(sp+12)
  86065c:	2b 8c 00 08 	lw r12,(sp+8)
  860660:	37 9c 00 0c 	addi sp,sp,12
  860664:	c3 a0 00 00 	ret
