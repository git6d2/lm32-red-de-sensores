
image:     file format elf32-lm32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000778  00000000  00000000  00000054  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  1 .rodata       00000004  00000778  00000778  000007cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000010  0000077c  0000077c  000007d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000084  0000078c  0000078c  000007e0  2**2
                  ALLOC
  4 .debug_abbrev 00000267  00000000  00000000  000007e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006ab  00000000  00000000  00000a47  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000005f5  00000000  00000000  000010f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000150  00000000  00000000  000016e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000364  00000000  00000000  00001838  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_pubnames 00000170  00000000  00000000  00001b9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_pubtypes 00000090  00000000  00000000  00001d0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000040  00000000  00000000  00001d9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0000022d  00000000  00000000  00001ddc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .comment      00000011  00000000  00000000  00002009  2**0
                  CONTENTS, READONLY
 14 .debug_ranges 00000018  00000000  00000000  0000201a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_ftext>:
   0:	98 00 00 00 	xor r0,r0,r0
   4:	d0 00 00 00 	wcsr IE,r0
   8:	78 01 00 00 	mvhi r1,0x0
   c:	38 21 00 00 	ori r1,r1,0x0
  10:	d0 e1 00 00 	wcsr EBA,r1
  14:	f8 00 00 3b 	calli 100 <_crt0>
  18:	34 00 00 00 	nop
  1c:	34 00 00 00 	nop

00000020 <_breakpoint_handler>:
  20:	34 00 00 00 	nop
  24:	34 00 00 00 	nop
  28:	34 00 00 00 	nop
  2c:	34 00 00 00 	nop
  30:	34 00 00 00 	nop
  34:	34 00 00 00 	nop
  38:	34 00 00 00 	nop
  3c:	34 00 00 00 	nop

00000040 <_ibuserror_handler>:
  40:	34 00 00 00 	nop
  44:	34 00 00 00 	nop
  48:	34 00 00 00 	nop
  4c:	34 00 00 00 	nop
  50:	34 00 00 00 	nop
  54:	34 00 00 00 	nop
  58:	34 00 00 00 	nop
  5c:	34 00 00 00 	nop

00000060 <_watchpoint_handler>:
  60:	34 00 00 00 	nop
  64:	34 00 00 00 	nop
  68:	34 00 00 00 	nop
  6c:	34 00 00 00 	nop
  70:	34 00 00 00 	nop
  74:	34 00 00 00 	nop
  78:	34 00 00 00 	nop
  7c:	34 00 00 00 	nop

00000080 <_dbuserror_handler>:
  80:	34 00 00 00 	nop
  84:	34 00 00 00 	nop
  88:	34 00 00 00 	nop
  8c:	34 00 00 00 	nop
  90:	34 00 00 00 	nop
  94:	34 00 00 00 	nop
  98:	34 00 00 00 	nop
  9c:	34 00 00 00 	nop

000000a0 <_divzero_handler>:
  a0:	34 00 00 00 	nop
  a4:	34 00 00 00 	nop
  a8:	34 00 00 00 	nop
  ac:	34 00 00 00 	nop
  b0:	34 00 00 00 	nop
  b4:	34 00 00 00 	nop
  b8:	34 00 00 00 	nop
  bc:	34 00 00 00 	nop

000000c0 <_interrupt_handler>:
  c0:	5b 9d 00 00 	sw (sp+0),ra
  c4:	f8 00 00 2b 	calli 170 <_save_all>
  c8:	90 40 08 00 	rcsr r1,IP
  cc:	f8 00 01 01 	calli 4d0 <irq_handler>
  d0:	78 01 ff ff 	mvhi r1,0xffff
  d4:	38 21 ff ff 	ori r1,r1,0xffff
  d8:	d0 41 00 00 	wcsr IP,r1
  dc:	e0 00 00 38 	bi 1bc <_restore_all_and_eret>

000000e0 <_scall_handler>:
  e0:	34 00 00 00 	nop
  e4:	34 00 00 00 	nop
  e8:	34 00 00 00 	nop
  ec:	34 00 00 00 	nop
  f0:	34 00 00 00 	nop
  f4:	34 00 00 00 	nop
  f8:	34 00 00 00 	nop
  fc:	34 00 00 00 	nop

00000100 <_crt0>:
 100:	78 1c 00 00 	mvhi sp,0x0
 104:	3b 9c 0f fc 	ori sp,sp,0xffc
 108:	78 1a 00 00 	mvhi gp,0x0
 10c:	3b 5a 07 90 	ori gp,gp,0x790
 110:	78 01 00 00 	mvhi r1,0x0
 114:	38 21 07 8c 	ori r1,r1,0x78c
 118:	78 03 00 00 	mvhi r3,0x0
 11c:	38 63 08 10 	ori r3,r3,0x810

00000120 <.clearBSS>:
 120:	44 23 00 04 	be r1,r3,130 <.callMain>
 124:	58 20 00 00 	sw (r1+0),r0
 128:	34 21 00 04 	addi r1,r1,4
 12c:	e3 ff ff fd 	bi 120 <.clearBSS>

00000130 <.callMain>:
 130:	34 01 00 00 	mvi r1,0
 134:	34 02 00 00 	mvi r2,0
 138:	34 03 00 00 	mvi r3,0
 13c:	f8 00 00 a5 	calli 3d0 <main>

00000140 <irq_enable>:
 140:	34 01 00 01 	mvi r1,1
 144:	d0 01 00 00 	wcsr IE,r1
 148:	c3 a0 00 00 	ret

0000014c <irq_disable>:
 14c:	34 01 00 00 	mvi r1,0
 150:	d0 01 00 00 	wcsr IE,r1
 154:	c3 a0 00 00 	ret

00000158 <irq_set_mask>:
 158:	d0 21 00 00 	wcsr IM,r1
 15c:	c3 a0 00 00 	ret

00000160 <irq_get_mask>:
 160:	90 20 08 00 	rcsr r1,IM
 164:	c3 a0 00 00 	ret

00000168 <jump>:
 168:	c0 20 00 00 	b r1

0000016c <halt>:
 16c:	e0 00 00 00 	bi 16c <halt>

00000170 <_save_all>:
 170:	37 9c ff 80 	addi sp,sp,-128
 174:	5b 81 00 04 	sw (sp+4),r1
 178:	5b 82 00 08 	sw (sp+8),r2
 17c:	5b 83 00 0c 	sw (sp+12),r3
 180:	5b 84 00 10 	sw (sp+16),r4
 184:	5b 85 00 14 	sw (sp+20),r5
 188:	5b 86 00 18 	sw (sp+24),r6
 18c:	5b 87 00 1c 	sw (sp+28),r7
 190:	5b 88 00 20 	sw (sp+32),r8
 194:	5b 89 00 24 	sw (sp+36),r9
 198:	5b 8a 00 28 	sw (sp+40),r10
 19c:	5b 9e 00 78 	sw (sp+120),ea
 1a0:	5b 9f 00 7c 	sw (sp+124),ba
 1a4:	2b 81 00 80 	lw r1,(sp+128)
 1a8:	5b 81 00 74 	sw (sp+116),r1
 1ac:	bb 80 08 00 	mv r1,sp
 1b0:	34 21 00 80 	addi r1,r1,128
 1b4:	5b 81 00 70 	sw (sp+112),r1
 1b8:	c3 a0 00 00 	ret

000001bc <_restore_all_and_eret>:
 1bc:	2b 81 00 04 	lw r1,(sp+4)
 1c0:	2b 82 00 08 	lw r2,(sp+8)
 1c4:	2b 83 00 0c 	lw r3,(sp+12)
 1c8:	2b 84 00 10 	lw r4,(sp+16)
 1cc:	2b 85 00 14 	lw r5,(sp+20)
 1d0:	2b 86 00 18 	lw r6,(sp+24)
 1d4:	2b 87 00 1c 	lw r7,(sp+28)
 1d8:	2b 88 00 20 	lw r8,(sp+32)
 1dc:	2b 89 00 24 	lw r9,(sp+36)
 1e0:	2b 8a 00 28 	lw r10,(sp+40)
 1e4:	2b 9d 00 74 	lw ra,(sp+116)
 1e8:	2b 9e 00 78 	lw ea,(sp+120)
 1ec:	2b 9f 00 7c 	lw ba,(sp+124)
 1f0:	2b 9c 00 70 	lw sp,(sp+112)
 1f4:	c3 c0 00 00 	eret

000001f8 <get_sp>:
 1f8:	bb 80 08 00 	mv r1,sp
 1fc:	c3 a0 00 00 	ret

00000200 <get_gp>:
 200:	bb 40 08 00 	mv r1,gp
 204:	c3 a0 00 00 	ret

00000208 <midi>:
//********************************************************************************************
// Función de lectura de SPI, lectura de GPIO, y envío de información por UART
//********************************************************************************************

void midi(int cs)
{
 208:	37 9c fe a8 	addi sp,sp,-344
 20c:	5b 8b 00 18 	sw (sp+24),r11
 210:	5b 8c 00 14 	sw (sp+20),r12
 214:	5b 8d 00 10 	sw (sp+16),r13
 218:	5b 8e 00 0c 	sw (sp+12),r14
 21c:	5b 8f 00 08 	sw (sp+8),r15
 220:	5b 9d 00 04 	sw (sp+4),ra
	if (instr <= 127) // Indica que es un instrumento General MIDI (Envio por el canal 1) - Notas de la octava 3
	{	
		if (cs==1)
		{
		 nota = 72; // DO 
		 max=max*4;
 224:	37 8b 00 1c 	addi r11,sp,28
//********************************************************************************************
// Función de lectura de SPI, lectura de GPIO, y envío de información por UART
//********************************************************************************************

void midi(int cs)
{
 228:	b8 20 78 00 	mv r15,r1
	if (instr <= 127) // Indica que es un instrumento General MIDI (Envio por el canal 1) - Notas de la octava 3
	{	
		if (cs==1)
		{
		 nota = 72; // DO 
		 max=max*4;
 22c:	20 2e 00 ff 	andi r14,r1,0xff

//********************************************************************************************
// Función de lectura de SPI, lectura de GPIO, y envío de información por UART
//********************************************************************************************

void midi(int cs)
 230:	37 8d 01 5c 	addi r13,sp,348
 234:	b9 60 60 00 	mv r12,r11
	int i, sel_p, nota;
	uint8_t instr;
	
	for (i=0;i<=79;i++) // Captura de información proveniente de ADC en vector de 80 posiciones
	{
		b[i]=spi_readByte(cs);
 238:	b9 c0 08 00 	mv r1,r14
 23c:	f8 00 00 e9 	calli 5e0 <spi_readByte>
 240:	59 81 00 00 	sw (r12+0),r1
	        nsleep(100); 
 244:	35 8c 00 04 	addi r12,r12,4
 248:	34 01 00 64 	mvi r1,100
 24c:	f8 00 01 0e 	calli 684 <nsleep>
{
	uint32_t b[80], max=0; 
	int i, sel_p, nota;
	uint8_t instr;
	
	for (i=0;i<=79;i++) // Captura de información proveniente de ADC en vector de 80 posiciones
 250:	5d 8d ff fa 	bne r12,r13,238 <midi+0x30>
 254:	34 0c 00 00 	mvi r12,0
 258:	29 62 00 00 	lw r2,(r11+0)
 25c:	35 6b 00 04 	addi r11,r11,4
 260:	51 82 00 02 	bgeu r12,r2,268 <midi+0x60>
 264:	b8 40 60 00 	mv r12,r2
	{
		b[i]=spi_readByte(cs);
	        nsleep(100); 
	}
	for (i=0;i<=79;i++) // Busqueda del valor maximo de la señal recibida, determina el velocity en el mensaje MIDI
 268:	5d 6d ff fc 	bne r11,r13,258 <midi+0x50>
		if(b[i] > max)
		    
		max=b[i];
		 
	}
	instr = gpio_read(); // Lectura de GPIO para determinación de instrumento musical
 26c:	f8 00 00 f1 	calli 630 <gpio_read>
 270:	b8 20 68 00 	mv r13,r1

// El Modo Bateria asigna el canal 10 para el envío de información y sonidos de bateria 
// El modo General MIDI asigna el canal 1 para el envío de información y notas musicales de la octava 3
// Para ambos modos se utiliza una funciónde corrección que permite ajustar la sensibilidad de los piezoelectricos (i.e. max=max*k)

	if (instr > 127) 
 274:	b0 20 08 00 	sextb r1,r1
 278:	4c 20 00 17 	bge r1,r0,2d4 <midi+0xcc>
	{
		if (cs==1)
 27c:	34 01 00 01 	mvi r1,1
 280:	45 e1 00 4b 	be r15,r1,3ac <midi+0x1a4>
		{
		 sel_p = 35; // Bombo
		 max=max*4; 
		}
		if (cs==2)
 284:	34 01 00 02 	mvi r1,2
 288:	45 e1 00 3e 	be r15,r1,380 <midi+0x178>
		{
		 sel_p = 38; // Redoblante 
		max=max*4;
		}
		if (cs==4)
 28c:	34 01 00 04 	mvi r1,4
 290:	5d e1 00 4a 	bne r15,r1,3b8 <midi+0x1b0>
		{
		 sel_p = 49; // Hi-Hat 
		 max=max*4;
 294:	3d 8c 00 02 	sli r12,r12,2
		 sel_p = 38; // Redoblante 
		max=max*4;
		}
		if (cs==4)
		{
		 sel_p = 49; // Hi-Hat 
 298:	34 0b 00 31 	mvi r11,49
		}

// El mensaje MIDI cuenta con dos partes: 1)Mensaje de activación de nota, 2) Mensaje de descativación de nota

		//Mensaje de activación de nota
		uart_putchar(153); //Activacion de nota por canal 10
 29c:	34 01 00 99 	mvi r1,153
 2a0:	f8 00 01 20 	calli 720 <uart_putchar>
		uart_putchar(sel_p); // Selección de sección de bateria (bombo, redoblante, platillo, etc)
 2a4:	21 6b 00 ff 	andi r11,r11,0xff
 2a8:	b9 60 08 00 	mv r1,r11
 2ac:	f8 00 01 1d 	calli 720 <uart_putchar>
		uart_putchar(max); //Velocity del golpe
 2b0:	34 01 00 7f 	mvi r1,127
 2b4:	50 2c 00 02 	bgeu r1,r12,2bc <midi+0xb4>
 2b8:	34 0c 00 7f 	mvi r12,127
 2bc:	21 81 00 ff 	andi r1,r12,0xff
 2c0:	f8 00 01 18 	calli 720 <uart_putchar>
		msleep(20);
 2c4:	34 01 00 14 	mvi r1,20
 2c8:	f8 00 00 e0 	calli 648 <msleep>
		// Mensaje de desactivacion de nota
		uart_putchar(137); //Activacion de nota pr canal 10
 2cc:	34 01 00 89 	mvi r1,137
 2d0:	e0 00 00 19 	bi 334 <midi+0x12c>
		uart_putchar(sel_p); // Selección de sección de bateria
		uart_putchar(0); //Velocity del golpe
	}
	if (instr <= 127) // Indica que es un instrumento General MIDI (Envio por el canal 1) - Notas de la octava 3
	{	
		if (cs==1)
 2d4:	34 01 00 01 	mvi r1,1
 2d8:	45 e1 00 27 	be r15,r1,374 <midi+0x16c>
		{
		 nota = 72; // DO 
		 max=max*4;
		}
		if (cs==2)
 2dc:	34 01 00 02 	mvi r1,2
 2e0:	45 e1 00 22 	be r15,r1,368 <midi+0x160>
		{
		 nota = 74; // RE 
		 max=max*4;
		}
		if (cs==4)
 2e4:	34 01 00 04 	mvi r1,4
 2e8:	5d e1 00 29 	bne r15,r1,38c <midi+0x184>
		{
		 nota = 76; // MI 
		max=max*4;
 2ec:	3d 8c 00 02 	sli r12,r12,2
 2f0:	34 0b 00 4c 	mvi r11,76
		if (max>127)
		{
		max=127;
		}
		// Mensaje cambio de intrumento
		uart_putchar(192);
 2f4:	34 01 00 c0 	mvi r1,192
 2f8:	f8 00 01 0a 	calli 720 <uart_putchar>
		uart_putchar(instr);
 2fc:	b9 a0 08 00 	mv r1,r13
 300:	f8 00 01 08 	calli 720 <uart_putchar>
		// Mensaje Activación de Nota Musical
		uart_putchar(144);
 304:	34 01 00 90 	mvi r1,144
 308:	f8 00 01 06 	calli 720 <uart_putchar>
		uart_putchar(nota);
 30c:	b9 60 08 00 	mv r1,r11
 310:	f8 00 01 04 	calli 720 <uart_putchar>
		uart_putchar(max);
 314:	34 01 00 7f 	mvi r1,127
 318:	50 2c 00 02 	bgeu r1,r12,320 <midi+0x118>
 31c:	34 0c 00 7f 	mvi r12,127
 320:	21 81 00 ff 	andi r1,r12,0xff
 324:	f8 00 00 ff 	calli 720 <uart_putchar>
		msleep(250);
 328:	34 01 00 fa 	mvi r1,250
 32c:	f8 00 00 c7 	calli 648 <msleep>
		// Mensaje de desactivacion de nota
		uart_putchar(128);
 330:	34 01 00 80 	mvi r1,128
 334:	f8 00 00 fb 	calli 720 <uart_putchar>
		uart_putchar(nota);
 338:	b9 60 08 00 	mv r1,r11
 33c:	f8 00 00 f9 	calli 720 <uart_putchar>
		uart_putchar(0);
 340:	34 01 00 00 	mvi r1,0
 344:	f8 00 00 f7 	calli 720 <uart_putchar>

	}
		
}
 348:	2b 9d 00 04 	lw ra,(sp+4)
 34c:	2b 8b 00 18 	lw r11,(sp+24)
 350:	2b 8c 00 14 	lw r12,(sp+20)
 354:	2b 8d 00 10 	lw r13,(sp+16)
 358:	2b 8e 00 0c 	lw r14,(sp+12)
 35c:	2b 8f 00 08 	lw r15,(sp+8)
 360:	37 9c 01 58 	addi sp,sp,344
 364:	c3 a0 00 00 	ret
		 max=max*4;
		}
		if (cs==2)
		{
		 nota = 74; // RE 
		 max=max*4;
 368:	3d 8c 00 02 	sli r12,r12,2
 36c:	34 0b 00 4a 	mvi r11,74
 370:	e3 ff ff e1 	bi 2f4 <midi+0xec>
	if (instr <= 127) // Indica que es un instrumento General MIDI (Envio por el canal 1) - Notas de la octava 3
	{	
		if (cs==1)
		{
		 nota = 72; // DO 
		 max=max*4;
 374:	3d 8c 00 02 	sli r12,r12,2
 378:	34 0b 00 48 	mvi r11,72
 37c:	e3 ff ff de 	bi 2f4 <midi+0xec>
		 max=max*4; 
		}
		if (cs==2)
		{
		 sel_p = 38; // Redoblante 
		max=max*4;
 380:	3d 8c 00 02 	sli r12,r12,2
		 sel_p = 35; // Bombo
		 max=max*4; 
		}
		if (cs==2)
		{
		 sel_p = 38; // Redoblante 
 384:	34 0b 00 26 	mvi r11,38
 388:	e3 ff ff c5 	bi 29c <midi+0x94>
		if (cs==4)
		{
		 nota = 76; // MI 
		max=max*4;
		}
		if (cs==8)
 38c:	34 01 00 08 	mvi r1,8
 390:	34 0b 00 48 	mvi r11,72
 394:	5d e1 ff d8 	bne r15,r1,2f4 <midi+0xec>
		{
		 nota = 77; // FA
		max=max*14; 
 398:	3d 81 00 01 	sli r1,r12,1
 39c:	3d 8c 00 04 	sli r12,r12,4
 3a0:	34 0b 00 4d 	mvi r11,77
 3a4:	c9 81 60 00 	sub r12,r12,r1
 3a8:	e3 ff ff d3 	bi 2f4 <midi+0xec>
	if (instr > 127) 
	{
		if (cs==1)
		{
		 sel_p = 35; // Bombo
		 max=max*4; 
 3ac:	3d 8c 00 02 	sli r12,r12,2
 3b0:	34 0b 00 23 	mvi r11,35
 3b4:	e3 ff ff ba 	bi 29c <midi+0x94>
		if (cs==4)
		{
		 sel_p = 49; // Hi-Hat 
		 max=max*4;
		}
		if (cs==8)
 3b8:	34 01 00 08 	mvi r1,8
 3bc:	34 0b 00 23 	mvi r11,35
 3c0:	5d e1 ff b7 	bne r15,r1,29c <midi+0x94>
		{
		 sel_p = 42; // Crash 
		max=max*14;
 3c4:	09 8c 00 0e 	muli r12,r12,14
		 sel_p = 49; // Hi-Hat 
		 max=max*4;
		}
		if (cs==8)
		{
		 sel_p = 42; // Crash 
 3c8:	34 0b 00 2a 	mvi r11,42
 3cc:	e3 ff ff b4 	bi 29c <midi+0x94>

000003d0 <main>:

//**************************************************************************************************
// Función principal del codigo - Inicialización de SPI y lectura //
//**************************************************************************************************
int main()
{	
 3d0:	37 9c ff e4 	addi sp,sp,-28
 3d4:	5b 8b 00 1c 	sw (sp+28),r11
 3d8:	5b 8c 00 18 	sw (sp+24),r12
 3dc:	5b 8d 00 14 	sw (sp+20),r13
 3e0:	5b 8e 00 10 	sw (sp+16),r14
 3e4:	5b 8f 00 0c 	sw (sp+12),r15
 3e8:	5b 90 00 08 	sw (sp+8),r16
 3ec:	5b 9d 00 04 	sw (sp+4),ra
	uint32_t a1, a2, a3, a4; // Cuatro esclavos (ADC) son seleccionados
	int j; 
	
	spi_init(255); // Constante de división para generación de reloj del SPI - Freq(sclk)=192KHz
 3f0:	34 01 00 ff 	mvi r1,255
 3f4:	f8 00 00 67 	calli 590 <spi_init>
	for(;;)
	{	nsleep(100);
 3f8:	34 0f 00 01 	mvi r15,1
		//Ciclo de Lectura de SPI para los cuatro esclavos
		//Si el valor de lectura equivale a un valor decimal mayor a 5 (aproximadamente 65mV)
		//Se ingresa a la función MIDI para captura de información, analisis, y envío. 

		for (j=0;j<=3;j++)
 3fc:	34 0d 00 03 	mvi r13,3
				a2=spi_readByte(2);	
				if(a2>5) 
				midi(2);
			}

			if(j==2)
 400:	34 10 00 02 	mvi r16,2
			}

			if(j==3)
			{
				a4=spi_readByte(8);		
				if(a4>5) 
 404:	34 0e 00 05 	mvi r14,5
	uint32_t a1, a2, a3, a4; // Cuatro esclavos (ADC) son seleccionados
	int j; 
	
	spi_init(255); // Constante de división para generación de reloj del SPI - Freq(sclk)=192KHz
	for(;;)
	{	nsleep(100);
 408:	34 01 00 64 	mvi r1,100
 40c:	34 0b 00 00 	mvi r11,0
 410:	f8 00 00 9d 	calli 684 <nsleep>
 414:	34 0c 00 01 	mvi r12,1
		//Si el valor de lectura equivale a un valor decimal mayor a 5 (aproximadamente 65mV)
		//Se ingresa a la función MIDI para captura de información, analisis, y envío. 

		for (j=0;j<=3;j++)
		{
			if(j==0)
 418:	45 60 00 0e 	be r11,r0,450 <main+0x80>
			{
				a1=spi_readByte(1);	
				if(a1>5) 
				midi(1);
			}
			if(j==1)
 41c:	45 6f 00 1a 	be r11,r15,484 <main+0xb4>
				a2=spi_readByte(2);	
				if(a2>5) 
				midi(2);
			}

			if(j==2)
 420:	45 70 00 04 	be r11,r16,430 <main+0x60>
				a3=spi_readByte(4);		
				if(a3>5) 
				midi(4);
			}

			if(j==3)
 424:	45 6d 00 12 	be r11,r13,46c <main+0x9c>
	{	nsleep(100);
		//Ciclo de Lectura de SPI para los cuatro esclavos
		//Si el valor de lectura equivale a un valor decimal mayor a 5 (aproximadamente 65mV)
		//Se ingresa a la función MIDI para captura de información, analisis, y envío. 

		for (j=0;j<=3;j++)
 428:	4d ac 00 07 	bge r13,r12,444 <main+0x74>
 42c:	e3 ff ff f7 	bi 408 <main+0x38>
				midi(2);
			}

			if(j==2)
			{
				a3=spi_readByte(4);		
 430:	34 01 00 04 	mvi r1,4
 434:	f8 00 00 6b 	calli 5e0 <spi_readByte>
				if(a3>5) 
 438:	51 c1 00 03 	bgeu r14,r1,444 <main+0x74>
				midi(4);
 43c:	34 01 00 04 	mvi r1,4
 440:	fb ff ff 72 	calli 208 <midi>
	uint32_t a1, a2, a3, a4; // Cuatro esclavos (ADC) son seleccionados
	int j; 
	
	spi_init(255); // Constante de división para generación de reloj del SPI - Freq(sclk)=192KHz
	for(;;)
	{	nsleep(100);
 444:	35 6b 00 01 	addi r11,r11,1
 448:	35 8c 00 01 	addi r12,r12,1
		//Si el valor de lectura equivale a un valor decimal mayor a 5 (aproximadamente 65mV)
		//Se ingresa a la función MIDI para captura de información, analisis, y envío. 

		for (j=0;j<=3;j++)
		{
			if(j==0)
 44c:	5d 60 ff f4 	bne r11,r0,41c <main+0x4c>
			{
				a1=spi_readByte(1);	
 450:	34 01 00 01 	mvi r1,1
 454:	f8 00 00 63 	calli 5e0 <spi_readByte>
				if(a1>5) 
 458:	51 c1 ff f4 	bgeu r14,r1,428 <main+0x58>
				midi(1);
 45c:	34 01 00 01 	mvi r1,1
 460:	fb ff ff 6a 	calli 208 <midi>
	{	nsleep(100);
		//Ciclo de Lectura de SPI para los cuatro esclavos
		//Si el valor de lectura equivale a un valor decimal mayor a 5 (aproximadamente 65mV)
		//Se ingresa a la función MIDI para captura de información, analisis, y envío. 

		for (j=0;j<=3;j++)
 464:	4d ac ff f8 	bge r13,r12,444 <main+0x74>
 468:	e3 ff ff e8 	bi 408 <main+0x38>
				midi(4);
			}

			if(j==3)
			{
				a4=spi_readByte(8);		
 46c:	34 01 00 08 	mvi r1,8
 470:	f8 00 00 5c 	calli 5e0 <spi_readByte>
				if(a4>5) 
 474:	51 c1 ff ed 	bgeu r14,r1,428 <main+0x58>
				midi(8);
 478:	34 01 00 08 	mvi r1,8
 47c:	fb ff ff 63 	calli 208 <midi>
 480:	e3 ff ff e2 	bi 408 <main+0x38>
				if(a1>5) 
				midi(1);
			}
			if(j==1)
			{
				a2=spi_readByte(2);	
 484:	34 01 00 02 	mvi r1,2
 488:	f8 00 00 56 	calli 5e0 <spi_readByte>
				if(a2>5) 
 48c:	51 c1 ff e7 	bgeu r14,r1,428 <main+0x58>
				midi(2);
 490:	34 01 00 02 	mvi r1,2
 494:	fb ff ff 5d 	calli 208 <midi>
	{	nsleep(100);
		//Ciclo de Lectura de SPI para los cuatro esclavos
		//Si el valor de lectura equivale a un valor decimal mayor a 5 (aproximadamente 65mV)
		//Se ingresa a la función MIDI para captura de información, analisis, y envío. 

		for (j=0;j<=3;j++)
 498:	4d ac ff eb 	bge r13,r12,444 <main+0x74>
 49c:	e3 ff ff db 	bi 408 <main+0x38>

000004a0 <isr_null>:
/***************************************************************************
 * IRQ handling
 */
void isr_null()
{
}
 4a0:	c3 a0 00 00 	ret

000004a4 <tic_isr>:

uint32_t tic_msec;

void tic_isr()
{
	tic_msec++;
 4a4:	78 01 00 00 	mvhi r1,0x0
 4a8:	38 21 08 0c 	ori r1,r1,0x80c
 4ac:	28 23 00 00 	lw r3,(r1+0)
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 4b0:	78 02 00 00 	mvhi r2,0x0
 4b4:	38 42 07 80 	ori r2,r2,0x780
 4b8:	28 42 00 00 	lw r2,(r2+0)

uint32_t tic_msec;

void tic_isr()
{
	tic_msec++;
 4bc:	34 63 00 01 	addi r3,r3,1
 4c0:	58 23 00 00 	sw (r1+0),r3
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 4c4:	34 01 00 0e 	mvi r1,14
 4c8:	58 41 00 00 	sw (r2+0),r1
}
 4cc:	c3 a0 00 00 	ret

000004d0 <irq_handler>:
void isr_null()
{
}

void irq_handler(uint32_t pending)
{
 4d0:	37 9c ff f0 	addi sp,sp,-16
 4d4:	5b 8b 00 10 	sw (sp+16),r11
 4d8:	5b 8c 00 0c 	sw (sp+12),r12
 4dc:	5b 8d 00 08 	sw (sp+8),r13
 4e0:	5b 9d 00 04 	sw (sp+4),ra
 4e4:	78 0b 00 00 	mvhi r11,0x0
 4e8:	39 6b 07 8c 	ori r11,r11,0x78c
 4ec:	b8 20 60 00 	mv r12,r1
 */
void isr_null()
{
}

void irq_handler(uint32_t pending)
 4f0:	35 6d 00 80 	addi r13,r11,128
 4f4:	e0 00 00 04 	bi 504 <irq_handler+0x34>
{
	int i;

	for(i=0; i<32; i++) {
		if (pending & 0x01) (*isr_table[i])();
 4f8:	35 6b 00 04 	addi r11,r11,4

void irq_handler(uint32_t pending)
{
	int i;

	for(i=0; i<32; i++) {
 4fc:	45 6d 00 08 	be r11,r13,51c <irq_handler+0x4c>
		if (pending & 0x01) (*isr_table[i])();
		pending >>= 1;
 500:	01 8c 00 01 	srui r12,r12,1
void irq_handler(uint32_t pending)
{
	int i;

	for(i=0; i<32; i++) {
		if (pending & 0x01) (*isr_table[i])();
 504:	21 81 00 01 	andi r1,r12,0x1
 508:	44 20 ff fc 	be r1,r0,4f8 <irq_handler+0x28>
 50c:	29 61 00 00 	lw r1,(r11+0)
 510:	35 6b 00 04 	addi r11,r11,4
 514:	d8 20 00 00 	call r1

void irq_handler(uint32_t pending)
{
	int i;

	for(i=0; i<32; i++) {
 518:	5d 6d ff fa 	bne r11,r13,500 <irq_handler+0x30>
		if (pending & 0x01) (*isr_table[i])();
		pending >>= 1;
	}
}
 51c:	2b 9d 00 04 	lw ra,(sp+4)
 520:	2b 8b 00 10 	lw r11,(sp+16)
 524:	2b 8c 00 0c 	lw r12,(sp+12)
 528:	2b 8d 00 08 	lw r13,(sp+8)
 52c:	37 9c 00 10 	addi sp,sp,16
 530:	c3 a0 00 00 	ret

00000534 <isr_init>:

void isr_init()
{
 534:	78 01 00 00 	mvhi r1,0x0
 538:	78 02 00 00 	mvhi r2,0x0
 53c:	38 21 07 8c 	ori r1,r1,0x78c
 540:	38 42 04 a0 	ori r2,r2,0x4a0
		if (pending & 0x01) (*isr_table[i])();
		pending >>= 1;
	}
}

void isr_init()
 544:	34 23 00 80 	addi r3,r1,128
{
	int i;
	for(i=0; i<32; i++)
		isr_table[i] = &isr_null;
 548:	58 22 00 00 	sw (r1+0),r2
 54c:	34 21 00 04 	addi r1,r1,4
}

void isr_init()
{
	int i;
	for(i=0; i<32; i++)
 550:	5c 23 ff fe 	bne r1,r3,548 <isr_init+0x14>
		isr_table[i] = &isr_null;
}
 554:	c3 a0 00 00 	ret

00000558 <isr_register>:

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
 558:	78 03 00 00 	mvhi r3,0x0
 55c:	3c 21 00 02 	sli r1,r1,2
 560:	38 63 07 8c 	ori r3,r3,0x78c
 564:	b4 61 18 00 	add r3,r3,r1
 568:	58 62 00 00 	sw (r3+0),r2
}
 56c:	c3 a0 00 00 	ret

00000570 <isr_unregister>:

void isr_unregister(int irq)
{
	isr_table[irq] = &isr_null;
 570:	78 03 00 00 	mvhi r3,0x0
 574:	3c 21 00 02 	sli r1,r1,2
 578:	38 63 07 8c 	ori r3,r3,0x78c
 57c:	78 02 00 00 	mvhi r2,0x0
 580:	b4 61 18 00 	add r3,r3,r1
 584:	38 42 04 a0 	ori r2,r2,0x4a0
 588:	58 62 00 00 	sw (r3+0),r2
}
 58c:	c3 a0 00 00 	ret

00000590 <spi_init>:
//**************************************************************************

void spi_init(uint32_t constdiv)
{

	spi0->DEVIDE = constdiv; // Definición de la frecuencia del reloj sclk
 590:	78 02 00 00 	mvhi r2,0x0
 594:	38 42 07 88 	ori r2,r2,0x788
 598:	28 42 00 00 	lw r2,(r2+0)
 59c:	58 41 00 14 	sw (r2+20),r1
	
	// Parametros iniciales del registro de control
	spi0->CTRL |= 0x0A << CHAR_LEN; 
 5a0:	28 41 00 10 	lw r1,(r2+16)
 5a4:	38 21 00 0a 	ori r1,r1,0xa
 5a8:	58 41 00 10 	sw (r2+16),r1
	spi0->CTRL |= 0x00 << GO_BSY;
 5ac:	28 41 00 10 	lw r1,(r2+16)
 5b0:	58 41 00 10 	sw (r2+16),r1
	spi0->CTRL |= 0x00 << Rx_NEG;
 5b4:	28 41 00 10 	lw r1,(r2+16)
 5b8:	58 41 00 10 	sw (r2+16),r1
	spi0->CTRL |= 0x00 << Tx_NEG;
 5bc:	28 41 00 10 	lw r1,(r2+16)
 5c0:	58 41 00 10 	sw (r2+16),r1
	spi0->CTRL |= 0x00 << LSB;
 5c4:	28 41 00 10 	lw r1,(r2+16)
 5c8:	58 41 00 10 	sw (r2+16),r1
	spi0->CTRL |= 0x00 << IE;
 5cc:	28 41 00 10 	lw r1,(r2+16)
 5d0:	58 41 00 10 	sw (r2+16),r1
	spi0->CTRL |= 0x00 << ASS;
 5d4:	28 41 00 10 	lw r1,(r2+16)
 5d8:	58 41 00 10 	sw (r2+16),r1
}
 5dc:	c3 a0 00 00 	ret

000005e0 <spi_readByte>:

uint32_t spi_readByte(uint8_t cs){
	spi0->SS = cs; // Selección del esclavo al cual se le va a pedir información
 5e0:	78 02 00 00 	mvhi r2,0x0
 5e4:	38 42 07 88 	ori r2,r2,0x788
 5e8:	28 42 00 00 	lw r2,(r2+0)
	spi0->CTRL |= 0x00 << LSB;
	spi0->CTRL |= 0x00 << IE;
	spi0->CTRL |= 0x00 << ASS;
}

uint32_t spi_readByte(uint8_t cs){
 5ec:	20 21 00 ff 	andi r1,r1,0xff
	spi0->SS = cs; // Selección del esclavo al cual se le va a pedir información
 5f0:	58 41 00 18 	sw (r2+24),r1
	spi0->CTRL |= EN << GO_BSY; // Señal ENABLE para inicio de lectura
 5f4:	28 41 00 10 	lw r1,(r2+16)
 5f8:	38 21 01 00 	ori r1,r1,0x100
 5fc:	58 41 00 10 	sw (r2+16),r1
	while((spi0->CTRL >> GO_BSY) & EN);
 600:	28 41 00 10 	lw r1,(r2+16)
 604:	20 21 01 00 	andi r1,r1,0x100
 608:	5c 20 ff fe 	bne r1,r0,600 <spi_readByte+0x20>
	spi0->SS = 0;
 60c:	58 40 00 18 	sw (r2+24),r0
	return spi0->RxTx0; //Retorno de información por el registro RXTX0
 610:	28 41 00 00 	lw r1,(r2+0)
	
}
 614:	c3 a0 00 00 	ret

00000618 <gpio_init>:
// Estructura del periferico GPIO
//*************************************************************************

void gpio_init()
{
	gpio0->dir=0x0ff;
 618:	78 01 00 00 	mvhi r1,0x0
 61c:	38 21 07 84 	ori r1,r1,0x784
 620:	28 21 00 00 	lw r1,(r1+0)
 624:	34 02 00 ff 	mvi r2,255
 628:	58 22 00 08 	sw (r1+8),r2
}
 62c:	c3 a0 00 00 	ret

00000630 <gpio_read>:

uint8_t gpio_read()
{
	return gpio0->read;
 630:	78 01 00 00 	mvhi r1,0x0
 634:	38 21 07 84 	ori r1,r1,0x784
 638:	28 21 00 00 	lw r1,(r1+0)
 63c:	28 21 00 00 	lw r1,(r1+0)
}
 640:	20 21 00 ff 	andi r1,r1,0xff
 644:	c3 a0 00 00 	ret

00000648 <msleep>:
void msleep(uint32_t msec)
{
	uint32_t tcr;

	// Use timer0.1
	timer0->compare1 = (FCPU/1000)*msec;
 648:	78 04 00 00 	mvhi r4,0x0
 64c:	38 84 07 78 	ori r4,r4,0x778
 650:	28 83 00 00 	lw r3,(r4+0)
 654:	78 02 00 00 	mvhi r2,0x0
 658:	38 42 07 80 	ori r2,r2,0x780
 65c:	28 42 00 00 	lw r2,(r2+0)
 660:	88 23 08 00 	mul r1,r1,r3
 664:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
 668:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 66c:	34 01 00 08 	mvi r1,8
 670:	58 41 00 0c 	sw (r2+12),r1

	do {
		//halt();
 		tcr = timer0->tcr1;
 674:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 678:	20 21 00 01 	andi r1,r1,0x1
 67c:	44 20 ff fe 	be r1,r0,674 <msleep+0x2c>
}
 680:	c3 a0 00 00 	ret

00000684 <nsleep>:
void nsleep(uint32_t nsec)
{
	uint32_t tcr;

	// Use timer0.1
	timer0->compare1 = (FCPU/1000000)*nsec;
 684:	78 02 00 00 	mvhi r2,0x0
 688:	38 42 07 80 	ori r2,r2,0x780
 68c:	28 42 00 00 	lw r2,(r2+0)
 690:	08 21 00 64 	muli r1,r1,100
 694:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
 698:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 69c:	34 01 00 08 	mvi r1,8
 6a0:	58 41 00 0c 	sw (r2+12),r1

	do {
		//halt();
 		tcr = timer0->tcr1;
 6a4:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 6a8:	20 21 00 01 	andi r1,r1,0x1
 6ac:	44 20 ff fe 	be r1,r0,6a4 <nsleep+0x20>
}
 6b0:	c3 a0 00 00 	ret

000006b4 <tic_init>:
void tic_init()
{
	tic_msec = 0;

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
 6b4:	78 01 00 00 	mvhi r1,0x0
 6b8:	38 21 07 80 	ori r1,r1,0x780
 6bc:	28 23 00 00 	lw r3,(r1+0)
 6c0:	34 02 27 10 	mvi r2,10000
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
}

void tic_init()
{
	tic_msec = 0;
 6c4:	78 01 00 00 	mvhi r1,0x0

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
 6c8:	58 62 00 04 	sw (r3+4),r2
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
}

void tic_init()
{
	tic_msec = 0;
 6cc:	38 21 08 0c 	ori r1,r1,0x80c

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
	timer0->counter0 = 0;
 6d0:	58 60 00 08 	sw (r3+8),r0
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
}

void tic_init()
{
	tic_msec = 0;
 6d4:	58 20 00 00 	sw (r1+0),r0
		isr_table[i] = &isr_null;
}

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
 6d8:	78 02 00 00 	mvhi r2,0x0
 6dc:	78 01 00 00 	mvhi r1,0x0
	tic_msec = 0;

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
	timer0->counter0 = 0;
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 6e0:	34 04 00 0e 	mvi r4,14
 6e4:	58 64 00 00 	sw (r3+0),r4
		isr_table[i] = &isr_null;
}

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
 6e8:	38 21 07 8c 	ori r1,r1,0x78c
 6ec:	38 42 04 a4 	ori r2,r2,0x4a4
 6f0:	58 22 00 04 	sw (r1+4),r2
	timer0->compare0 = (FCPU/10000);
	timer0->counter0 = 0;
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;

	isr_register(1, &tic_isr);
}
 6f4:	c3 a0 00 00 	ret

000006f8 <uart_init>:


//***************************************************************************
// Estructura del periferico UART 
//***************************************************************************
void uart_init(){}
 6f8:	c3 a0 00 00 	ret

000006fc <uart_getchar>:

char uart_getchar()
{   
 6fc:	78 01 00 00 	mvhi r1,0x0
 700:	38 21 07 7c 	ori r1,r1,0x77c
 704:	28 22 00 00 	lw r2,(r1+0)
	while (! (uart0->ucr & UART_DR)) ;
 708:	28 41 00 00 	lw r1,(r2+0)
 70c:	20 21 00 01 	andi r1,r1,0x1
 710:	44 20 ff fe 	be r1,r0,708 <uart_getchar+0xc>
	return uart0->rxtx;
 714:	28 41 00 04 	lw r1,(r2+4)
}
 718:	20 21 00 ff 	andi r1,r1,0xff
 71c:	c3 a0 00 00 	ret

00000720 <uart_putchar>:

void uart_putchar(char c)
{
 720:	78 02 00 00 	mvhi r2,0x0
 724:	38 42 07 7c 	ori r2,r2,0x77c
 728:	28 43 00 00 	lw r3,(r2+0)
 72c:	20 21 00 ff 	andi r1,r1,0xff
	while (uart0->ucr & UART_BUSY) ;
 730:	28 62 00 00 	lw r2,(r3+0)
 734:	20 42 00 10 	andi r2,r2,0x10
 738:	5c 40 ff fe 	bne r2,r0,730 <uart_putchar+0x10>
	uart0->rxtx = c;
 73c:	58 61 00 04 	sw (r3+4),r1
}
 740:	c3 a0 00 00 	ret

00000744 <uart_putstr>:

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
 744:	40 24 00 00 	lbu r4,(r1+0)
 748:	44 80 00 0b 	be r4,r0,774 <uart_putstr+0x30>
 74c:	78 02 00 00 	mvhi r2,0x0
 750:	38 42 07 7c 	ori r2,r2,0x77c
 754:	28 43 00 00 	lw r3,(r2+0)
	return uart0->rxtx;
}

void uart_putchar(char c)
{
	while (uart0->ucr & UART_BUSY) ;
 758:	28 62 00 00 	lw r2,(r3+0)
 75c:	20 42 00 10 	andi r2,r2,0x10
 760:	5c 40 ff fe 	bne r2,r0,758 <uart_putstr+0x14>
	uart0->rxtx = c;
 764:	58 64 00 04 	sw (r3+4),r4
void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
		uart_putchar(*c);
		c++;
 768:	34 21 00 01 	addi r1,r1,1
}

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
 76c:	40 24 00 00 	lbu r4,(r1+0)
 770:	5c 82 ff fa 	bne r4,r2,758 <uart_putstr+0x14>
 774:	c3 a0 00 00 	ret
