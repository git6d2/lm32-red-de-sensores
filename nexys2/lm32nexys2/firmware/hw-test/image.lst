
image:     formato del fichero elf32-lm32

Secciones:
Ind Nombre        Tama침o    VMA       LMA       Desp fich Alin
  0 .text         0000056c  00000000  00000000  00000054  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  1 .rodata       00000004  0000056c  0000056c  000005c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000010  00000570  00000570  000005c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000084  00000580  00000580  000005d4  2**2
                  ALLOC
  4 .debug_abbrev 000002b6  00000000  00000000  000005d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006d4  00000000  00000000  0000088a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000413  00000000  00000000  00000f5e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000150  00000000  00000000  00001374  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 0000016a  00000000  00000000  000014c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_pubtypes 0000008f  00000000  00000000  0000162e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000040  00000000  00000000  000016bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000203  00000000  00000000  000016fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .comment      00000011  00000000  00000000  00001900  2**0
                  CONTENTS, READONLY
 13 .debug_loc    0000017c  00000000  00000000  00001911  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000018  00000000  00000000  00001a8d  2**0
                  CONTENTS, READONLY, DEBUGGING

Desensamblado de la secci칩n .text:

00000000 <_ftext>:
   0:	98 00 00 00 	xor r0,r0,r0
   4:	d0 00 00 00 	wcsr IE,r0
   8:	78 01 00 00 	mvhi r1,0x0
   c:	38 21 00 00 	ori r1,r1,0x0
  10:	d0 e1 00 00 	wcsr EBA,r1
  14:	f8 00 00 3b 	calli 100 <_crt0>
  18:	34 00 00 00 	nop
  1c:	34 00 00 00 	nop

00000020 <_breakpoint_handler>:
  20:	34 00 00 00 	nop
  24:	34 00 00 00 	nop
  28:	34 00 00 00 	nop
  2c:	34 00 00 00 	nop
  30:	34 00 00 00 	nop
  34:	34 00 00 00 	nop
  38:	34 00 00 00 	nop
  3c:	34 00 00 00 	nop

00000040 <_ibuserror_handler>:
  40:	34 00 00 00 	nop
  44:	34 00 00 00 	nop
  48:	34 00 00 00 	nop
  4c:	34 00 00 00 	nop
  50:	34 00 00 00 	nop
  54:	34 00 00 00 	nop
  58:	34 00 00 00 	nop
  5c:	34 00 00 00 	nop

00000060 <_watchpoint_handler>:
  60:	34 00 00 00 	nop
  64:	34 00 00 00 	nop
  68:	34 00 00 00 	nop
  6c:	34 00 00 00 	nop
  70:	34 00 00 00 	nop
  74:	34 00 00 00 	nop
  78:	34 00 00 00 	nop
  7c:	34 00 00 00 	nop

00000080 <_dbuserror_handler>:
  80:	34 00 00 00 	nop
  84:	34 00 00 00 	nop
  88:	34 00 00 00 	nop
  8c:	34 00 00 00 	nop
  90:	34 00 00 00 	nop
  94:	34 00 00 00 	nop
  98:	34 00 00 00 	nop
  9c:	34 00 00 00 	nop

000000a0 <_divzero_handler>:
  a0:	34 00 00 00 	nop
  a4:	34 00 00 00 	nop
  a8:	34 00 00 00 	nop
  ac:	34 00 00 00 	nop
  b0:	34 00 00 00 	nop
  b4:	34 00 00 00 	nop
  b8:	34 00 00 00 	nop
  bc:	34 00 00 00 	nop

000000c0 <_interrupt_handler>:
  c0:	5b 9d 00 00 	sw (sp+0),ra
  c4:	f8 00 00 2b 	calli 170 <_save_all>
  c8:	90 40 08 00 	rcsr r1,IP
  cc:	f8 00 00 6b 	calli 278 <irq_handler>
  d0:	78 01 ff ff 	mvhi r1,0xffff
  d4:	38 21 ff ff 	ori r1,r1,0xffff
  d8:	d0 41 00 00 	wcsr IP,r1
  dc:	e0 00 00 38 	bi 1bc <_restore_all_and_eret>

000000e0 <_scall_handler>:
  e0:	34 00 00 00 	nop
  e4:	34 00 00 00 	nop
  e8:	34 00 00 00 	nop
  ec:	34 00 00 00 	nop
  f0:	34 00 00 00 	nop
  f4:	34 00 00 00 	nop
  f8:	34 00 00 00 	nop
  fc:	34 00 00 00 	nop

00000100 <_crt0>:
 100:	78 1c 00 00 	mvhi sp,0x0
 104:	3b 9c 0f fc 	ori sp,sp,0xffc
 108:	78 1a 00 00 	mvhi gp,0x0
 10c:	3b 5a 05 80 	ori gp,gp,0x580
 110:	78 01 00 00 	mvhi r1,0x0
 114:	38 21 05 80 	ori r1,r1,0x580
 118:	78 03 00 00 	mvhi r3,0x0
 11c:	38 63 06 04 	ori r3,r3,0x604

00000120 <.clearBSS>:
 120:	44 23 00 04 	be r1,r3,130 <.callMain>
 124:	58 20 00 00 	sw (r1+0),r0
 128:	34 21 00 04 	addi r1,r1,4
 12c:	e3 ff ff fd 	bi 120 <.clearBSS>

00000130 <.callMain>:
 130:	34 01 00 00 	mvi r1,0
 134:	34 02 00 00 	mvi r2,0
 138:	34 03 00 00 	mvi r3,0
 13c:	f8 00 00 33 	calli 208 <main>

00000140 <irq_enable>:
 140:	34 01 00 01 	mvi r1,1
 144:	d0 01 00 00 	wcsr IE,r1
 148:	c3 a0 00 00 	ret

0000014c <irq_disable>:
 14c:	34 01 00 00 	mvi r1,0
 150:	d0 01 00 00 	wcsr IE,r1
 154:	c3 a0 00 00 	ret

00000158 <irq_set_mask>:
 158:	d0 21 00 00 	wcsr IM,r1
 15c:	c3 a0 00 00 	ret

00000160 <irq_get_mask>:
 160:	90 20 08 00 	rcsr r1,IM
 164:	c3 a0 00 00 	ret

00000168 <jump>:
 168:	c0 20 00 00 	b r1

0000016c <halt>:
 16c:	e0 00 00 00 	bi 16c <halt>

00000170 <_save_all>:
 170:	37 9c ff 80 	addi sp,sp,-128
 174:	5b 81 00 04 	sw (sp+4),r1
 178:	5b 82 00 08 	sw (sp+8),r2
 17c:	5b 83 00 0c 	sw (sp+12),r3
 180:	5b 84 00 10 	sw (sp+16),r4
 184:	5b 85 00 14 	sw (sp+20),r5
 188:	5b 86 00 18 	sw (sp+24),r6
 18c:	5b 87 00 1c 	sw (sp+28),r7
 190:	5b 88 00 20 	sw (sp+32),r8
 194:	5b 89 00 24 	sw (sp+36),r9
 198:	5b 8a 00 28 	sw (sp+40),r10
 19c:	5b 9e 00 78 	sw (sp+120),ea
 1a0:	5b 9f 00 7c 	sw (sp+124),ba
 1a4:	2b 81 00 80 	lw r1,(sp+128)
 1a8:	5b 81 00 74 	sw (sp+116),r1
 1ac:	bb 80 08 00 	mv r1,sp
 1b0:	34 21 00 80 	addi r1,r1,128
 1b4:	5b 81 00 70 	sw (sp+112),r1
 1b8:	c3 a0 00 00 	ret

000001bc <_restore_all_and_eret>:
 1bc:	2b 81 00 04 	lw r1,(sp+4)
 1c0:	2b 82 00 08 	lw r2,(sp+8)
 1c4:	2b 83 00 0c 	lw r3,(sp+12)
 1c8:	2b 84 00 10 	lw r4,(sp+16)
 1cc:	2b 85 00 14 	lw r5,(sp+20)
 1d0:	2b 86 00 18 	lw r6,(sp+24)
 1d4:	2b 87 00 1c 	lw r7,(sp+28)
 1d8:	2b 88 00 20 	lw r8,(sp+32)
 1dc:	2b 89 00 24 	lw r9,(sp+36)
 1e0:	2b 8a 00 28 	lw r10,(sp+40)
 1e4:	2b 9d 00 74 	lw ra,(sp+116)
 1e8:	2b 9e 00 78 	lw ea,(sp+120)
 1ec:	2b 9f 00 7c 	lw ba,(sp+124)
 1f0:	2b 9c 00 70 	lw sp,(sp+112)
 1f4:	c3 c0 00 00 	eret

000001f8 <get_sp>:
 1f8:	bb 80 08 00 	mv r1,sp
 1fc:	c3 a0 00 00 	ret

00000200 <get_gp>:
 200:	bb 40 08 00 	mv r1,gp
 204:	c3 a0 00 00 	ret

00000208 <main>:

//**************************************************************************************************
// Funci칩n principal del codigo - Inicializaci칩n de SPI y lectura //
//**************************************************************************************************
int main()
{
 208:	37 9c ff fc 	addi sp,sp,-4
 20c:	5b 9d 00 04 	sw (sp+4),ra
uint32_t out;

gpio0->dir=0x0F;
 210:	78 01 00 00 	mvhi r1,0x0
 214:	38 21 05 78 	ori r1,r1,0x578
 218:	28 21 00 00 	lw r1,(r1+0)
 21c:	34 02 00 0f 	mvi r2,15
 220:	58 22 00 08 	sw (r1+8),r2

prueba();
 224:	f8 00 00 85 	calli 438 <prueba>
	



		
}
 228:	2b 9d 00 04 	lw ra,(sp+4)
 22c:	37 9c 00 04 	addi sp,sp,4
 230:	c3 a0 00 00 	ret

00000234 <isr_null>:
/***************************************************************************
 * IRQ handling
 */
void isr_null()
{
}
 234:	c3 a0 00 00 	ret

00000238 <read>:
void read()
{

uint32_t a;

  a=gpio0->read ;
 238:	78 01 00 00 	mvhi r1,0x0
 23c:	38 21 05 78 	ori r1,r1,0x578
 240:	28 21 00 00 	lw r1,(r1+0)
 244:	28 21 00 00 	lw r1,(r1+0)
return a;

}
 248:	c3 a0 00 00 	ret

0000024c <tic_isr>:

uint32_t tic_msec;

void tic_isr()
{
	tic_msec++;
 24c:	78 01 00 00 	mvhi r1,0x0
 250:	38 21 06 00 	ori r1,r1,0x600
 254:	28 23 00 00 	lw r3,(r1+0)
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 258:	78 02 00 00 	mvhi r2,0x0
 25c:	38 42 05 74 	ori r2,r2,0x574
 260:	28 42 00 00 	lw r2,(r2+0)

uint32_t tic_msec;

void tic_isr()
{
	tic_msec++;
 264:	34 63 00 01 	addi r3,r3,1
 268:	58 23 00 00 	sw (r1+0),r3
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 26c:	34 01 00 0e 	mvi r1,14
 270:	58 41 00 00 	sw (r2+0),r1
}
 274:	c3 a0 00 00 	ret

00000278 <irq_handler>:
void isr_null()
{
}

void irq_handler(uint32_t pending)
{
 278:	37 9c ff f0 	addi sp,sp,-16
 27c:	5b 8b 00 10 	sw (sp+16),r11
 280:	5b 8c 00 0c 	sw (sp+12),r12
 284:	5b 8d 00 08 	sw (sp+8),r13
 288:	5b 9d 00 04 	sw (sp+4),ra
 28c:	78 0b 00 00 	mvhi r11,0x0
 290:	39 6b 05 80 	ori r11,r11,0x580
 294:	b8 20 60 00 	mv r12,r1
 */
void isr_null()
{
}

void irq_handler(uint32_t pending)
 298:	35 6d 00 80 	addi r13,r11,128
 29c:	e0 00 00 04 	bi 2ac <irq_handler+0x34>
{
	int i;

	for(i=0; i<32; i++) {
		if (pending & 0x01) (*isr_table[i])();
 2a0:	35 6b 00 04 	addi r11,r11,4

void irq_handler(uint32_t pending)
{
	int i;

	for(i=0; i<32; i++) {
 2a4:	45 6d 00 08 	be r11,r13,2c4 <irq_handler+0x4c>
		if (pending & 0x01) (*isr_table[i])();
		pending >>= 1;
 2a8:	01 8c 00 01 	srui r12,r12,1
void irq_handler(uint32_t pending)
{
	int i;

	for(i=0; i<32; i++) {
		if (pending & 0x01) (*isr_table[i])();
 2ac:	21 81 00 01 	andi r1,r12,0x1
 2b0:	44 20 ff fc 	be r1,r0,2a0 <irq_handler+0x28>
 2b4:	29 61 00 00 	lw r1,(r11+0)
 2b8:	35 6b 00 04 	addi r11,r11,4
 2bc:	d8 20 00 00 	call r1

void irq_handler(uint32_t pending)
{
	int i;

	for(i=0; i<32; i++) {
 2c0:	5d 6d ff fa 	bne r11,r13,2a8 <irq_handler+0x30>
		if (pending & 0x01) (*isr_table[i])();
		pending >>= 1;
	}
}
 2c4:	2b 9d 00 04 	lw ra,(sp+4)
 2c8:	2b 8b 00 10 	lw r11,(sp+16)
 2cc:	2b 8c 00 0c 	lw r12,(sp+12)
 2d0:	2b 8d 00 08 	lw r13,(sp+8)
 2d4:	37 9c 00 10 	addi sp,sp,16
 2d8:	c3 a0 00 00 	ret

000002dc <isr_init>:

void isr_init()
{
 2dc:	78 01 00 00 	mvhi r1,0x0
 2e0:	78 02 00 00 	mvhi r2,0x0
 2e4:	38 21 05 80 	ori r1,r1,0x580
 2e8:	38 42 02 34 	ori r2,r2,0x234
		if (pending & 0x01) (*isr_table[i])();
		pending >>= 1;
	}
}

void isr_init()
 2ec:	34 23 00 80 	addi r3,r1,128
{
	int i;
	for(i=0; i<32; i++)
		isr_table[i] = &isr_null;
 2f0:	58 22 00 00 	sw (r1+0),r2
 2f4:	34 21 00 04 	addi r1,r1,4
}

void isr_init()
{
	int i;
	for(i=0; i<32; i++)
 2f8:	5c 23 ff fe 	bne r1,r3,2f0 <isr_init+0x14>
		isr_table[i] = &isr_null;
}
 2fc:	c3 a0 00 00 	ret

00000300 <isr_register>:

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
 300:	78 03 00 00 	mvhi r3,0x0
 304:	3c 21 00 02 	sli r1,r1,2
 308:	38 63 05 80 	ori r3,r3,0x580
 30c:	b4 61 18 00 	add r3,r3,r1
 310:	58 62 00 00 	sw (r3+0),r2
}
 314:	c3 a0 00 00 	ret

00000318 <isr_unregister>:

void isr_unregister(int irq)
{
	isr_table[irq] = &isr_null;
 318:	78 03 00 00 	mvhi r3,0x0
 31c:	3c 21 00 02 	sli r1,r1,2
 320:	38 63 05 80 	ori r3,r3,0x580
 324:	78 02 00 00 	mvhi r2,0x0
 328:	b4 61 18 00 	add r3,r3,r1
 32c:	38 42 02 34 	ori r2,r2,0x234
 330:	58 62 00 00 	sw (r3+0),r2
}
 334:	c3 a0 00 00 	ret

00000338 <spi_init>:
//**************************************************************************

void spi_init(uint32_t constdiv)
{

	spi0->DEVIDE = constdiv; // Definici칩n de la frecuencia del reloj sclk
 338:	78 02 00 00 	mvhi r2,0x0
 33c:	38 42 05 7c 	ori r2,r2,0x57c
 340:	28 42 00 00 	lw r2,(r2+0)
 344:	58 41 00 14 	sw (r2+20),r1
	
	// Parametros iniciales del registro de control
	spi0->CTRL |= 0x0A << CHAR_LEN; 
 348:	28 41 00 10 	lw r1,(r2+16)
 34c:	38 21 00 0a 	ori r1,r1,0xa
 350:	58 41 00 10 	sw (r2+16),r1
	spi0->CTRL |= 0x00 << GO_BSY;
 354:	28 41 00 10 	lw r1,(r2+16)
 358:	58 41 00 10 	sw (r2+16),r1
	spi0->CTRL |= 0x00 << Rx_NEG;
 35c:	28 41 00 10 	lw r1,(r2+16)
 360:	58 41 00 10 	sw (r2+16),r1
	spi0->CTRL |= 0x00 << Tx_NEG;
 364:	28 41 00 10 	lw r1,(r2+16)
 368:	58 41 00 10 	sw (r2+16),r1
	spi0->CTRL |= 0x00 << LSB;
 36c:	28 41 00 10 	lw r1,(r2+16)
 370:	58 41 00 10 	sw (r2+16),r1
	spi0->CTRL |= 0x00 << IE;
 374:	28 41 00 10 	lw r1,(r2+16)
 378:	58 41 00 10 	sw (r2+16),r1
	spi0->CTRL |= 0x00 << ASS;
 37c:	28 41 00 10 	lw r1,(r2+16)
 380:	58 41 00 10 	sw (r2+16),r1
}
 384:	c3 a0 00 00 	ret

00000388 <spi_readByte>:

uint32_t spi_readByte(uint8_t cs){
	spi0->SS = cs; // Selecci칩n del esclavo al cual se le va a pedir informaci칩n
 388:	78 02 00 00 	mvhi r2,0x0
 38c:	38 42 05 7c 	ori r2,r2,0x57c
 390:	28 42 00 00 	lw r2,(r2+0)
	spi0->CTRL |= 0x00 << LSB;
	spi0->CTRL |= 0x00 << IE;
	spi0->CTRL |= 0x00 << ASS;
}

uint32_t spi_readByte(uint8_t cs){
 394:	20 21 00 ff 	andi r1,r1,0xff
	spi0->SS = cs; // Selecci칩n del esclavo al cual se le va a pedir informaci칩n
 398:	58 41 00 18 	sw (r2+24),r1
	spi0->CTRL |= EN << GO_BSY; // Se침al ENABLE para inicio de lectura
 39c:	28 41 00 10 	lw r1,(r2+16)
 3a0:	38 21 01 00 	ori r1,r1,0x100
 3a4:	58 41 00 10 	sw (r2+16),r1
	while((spi0->CTRL >> GO_BSY) & EN);
 3a8:	28 41 00 10 	lw r1,(r2+16)
 3ac:	20 21 01 00 	andi r1,r1,0x100
 3b0:	5c 20 ff fe 	bne r1,r0,3a8 <spi_readByte+0x20>
	spi0->SS = 0;
 3b4:	58 40 00 18 	sw (r2+24),r0
	return spi0->RxTx0; //Retorno de informaci칩n por el registro RXTX0
 3b8:	28 41 00 00 	lw r1,(r2+0)
	
}
 3bc:	c3 a0 00 00 	ret

000003c0 <msleep>:
void msleep(uint32_t msec)
{
	uint32_t tcr;

	// Use timer0.1
	timer0->compare1 = (FCPU/1000)*msec;
 3c0:	78 04 00 00 	mvhi r4,0x0
 3c4:	38 84 05 6c 	ori r4,r4,0x56c
 3c8:	28 83 00 00 	lw r3,(r4+0)
 3cc:	78 02 00 00 	mvhi r2,0x0
 3d0:	38 42 05 74 	ori r2,r2,0x574
 3d4:	28 42 00 00 	lw r2,(r2+0)
 3d8:	88 23 08 00 	mul r1,r1,r3
 3dc:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
 3e0:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 3e4:	34 01 00 08 	mvi r1,8
 3e8:	58 41 00 0c 	sw (r2+12),r1

	do {
		//halt();
 		tcr = timer0->tcr1;
 3ec:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 3f0:	20 21 00 01 	andi r1,r1,0x1
 3f4:	44 20 ff fe 	be r1,r0,3ec <msleep+0x2c>
}
 3f8:	c3 a0 00 00 	ret

000003fc <sensor>:

          }
}

void sensor()
{
 3fc:	37 9c ff f8 	addi sp,sp,-8
 400:	5b 8b 00 08 	sw (sp+8),r11
 404:	5b 9d 00 04 	sw (sp+4),ra

uint32_t l,t;
t=18;       //milisegundos se침al low  
        
gpio0->write = 0x00;
 408:	78 0b 00 00 	mvhi r11,0x0
 40c:	39 6b 05 78 	ori r11,r11,0x578
 410:	29 62 00 00 	lw r2,(r11+0)
msleep(t);
 414:	34 01 00 12 	mvi r1,18
{

uint32_t l,t;
t=18;       //milisegundos se침al low  
        
gpio0->write = 0x00;
 418:	58 40 00 04 	sw (r2+4),r0
msleep(t);
 41c:	fb ff ff e9 	calli 3c0 <msleep>
gpio0->write = 0x80;
 420:	29 61 00 00 	lw r1,(r11+0)
 424:	34 02 00 80 	mvi r2,128
 428:	58 22 00 04 	sw (r1+4),r2
l=gpio0->read;
 42c:	28 22 00 00 	lw r2,(r1+0)
 430:	28 22 00 00 	lw r2,(r1+0)
 434:	e3 ff ff fe 	bi 42c <sensor+0x30>

00000438 <prueba>:

/***************************************************************************
 * GPIO functions
 */
void prueba()
{ 
 438:	37 9c ff f0 	addi sp,sp,-16
 43c:	5b 8b 00 10 	sw (sp+16),r11
 440:	5b 8c 00 0c 	sw (sp+12),r12
 444:	5b 8d 00 08 	sw (sp+8),r13
 448:	5b 9d 00 04 	sw (sp+4),ra
                uint32_t out1;
                uint32_t i;
                uint32_t entrada;
       

        for(i=0; i<6; i++)  {
 44c:	78 0c 00 00 	mvhi r12,0x0
 450:	78 0b 00 00 	mvhi r11,0x0
 454:	39 8c 02 38 	ori r12,r12,0x238
 458:	39 6b 05 78 	ori r11,r11,0x578
                         entrada = read();
                      
                  if(entrada=0x80)
                      {
                        out1 = 0x15;
                      gpio0->write = out1;
 45c:	34 0d 00 15 	mvi r13,21
                uint32_t entrada;
       

        for(i=0; i<6; i++)  {
                       
                         entrada = read();
 460:	d9 80 00 00 	call r12
                      
                  if(entrada=0x80)
                      {
                        out1 = 0x15;
                      gpio0->write = out1;
 464:	29 62 00 00 	lw r2,(r11+0)
                        

                        msleep(100);
 468:	34 01 00 64 	mvi r1,100
                         entrada = read();
                      
                  if(entrada=0x80)
                      {
                        out1 = 0x15;
                      gpio0->write = out1;
 46c:	58 4d 00 04 	sw (r2+4),r13
                        

                        msleep(100);
 470:	fb ff ff d4 	calli 3c0 <msleep>
 474:	e3 ff ff fb 	bi 460 <prueba+0x28>

00000478 <nsleep>:
void nsleep(uint32_t nsec)
{
	uint32_t tcr;

	// Use timer0.1
	timer0->compare1 = (FCPU/1000000)*nsec;
 478:	78 02 00 00 	mvhi r2,0x0
 47c:	38 42 05 74 	ori r2,r2,0x574
 480:	28 42 00 00 	lw r2,(r2+0)
 484:	08 21 00 64 	muli r1,r1,100
 488:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
 48c:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 490:	34 01 00 08 	mvi r1,8
 494:	58 41 00 0c 	sw (r2+12),r1

	do {
		//halt();
 		tcr = timer0->tcr1;
 498:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 49c:	20 21 00 01 	andi r1,r1,0x1
 4a0:	44 20 ff fe 	be r1,r0,498 <nsleep+0x20>
}
 4a4:	c3 a0 00 00 	ret

000004a8 <tic_init>:
void tic_init()
{
	tic_msec = 0;

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
 4a8:	78 01 00 00 	mvhi r1,0x0
 4ac:	38 21 05 74 	ori r1,r1,0x574
 4b0:	28 23 00 00 	lw r3,(r1+0)
 4b4:	34 02 27 10 	mvi r2,10000
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
}

void tic_init()
{
	tic_msec = 0;
 4b8:	78 01 00 00 	mvhi r1,0x0

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
 4bc:	58 62 00 04 	sw (r3+4),r2
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
}

void tic_init()
{
	tic_msec = 0;
 4c0:	38 21 06 00 	ori r1,r1,0x600

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
	timer0->counter0 = 0;
 4c4:	58 60 00 08 	sw (r3+8),r0
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
}

void tic_init()
{
	tic_msec = 0;
 4c8:	58 20 00 00 	sw (r1+0),r0
		isr_table[i] = &isr_null;
}

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
 4cc:	78 02 00 00 	mvhi r2,0x0
 4d0:	78 01 00 00 	mvhi r1,0x0
	tic_msec = 0;

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
	timer0->counter0 = 0;
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 4d4:	34 04 00 0e 	mvi r4,14
 4d8:	58 64 00 00 	sw (r3+0),r4
		isr_table[i] = &isr_null;
}

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
 4dc:	38 21 05 80 	ori r1,r1,0x580
 4e0:	38 42 02 4c 	ori r2,r2,0x24c
 4e4:	58 22 00 04 	sw (r1+4),r2
	timer0->compare0 = (FCPU/10000);
	timer0->counter0 = 0;
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;

	isr_register(1, &tic_isr);
}
 4e8:	c3 a0 00 00 	ret

000004ec <uart_init>:


//***************************************************************************
// Estructura del periferico UART 
//***************************************************************************
void uart_init(){}
 4ec:	c3 a0 00 00 	ret

000004f0 <uart_getchar>:

char uart_getchar()
{   
 4f0:	78 01 00 00 	mvhi r1,0x0
 4f4:	38 21 05 70 	ori r1,r1,0x570
 4f8:	28 22 00 00 	lw r2,(r1+0)
	while (! (uart0->ucr & UART_DR)) ;
 4fc:	28 41 00 00 	lw r1,(r2+0)
 500:	20 21 00 01 	andi r1,r1,0x1
 504:	44 20 ff fe 	be r1,r0,4fc <uart_getchar+0xc>
	return uart0->rxtx;
 508:	28 41 00 04 	lw r1,(r2+4)
}
 50c:	20 21 00 ff 	andi r1,r1,0xff
 510:	c3 a0 00 00 	ret

00000514 <uart_putchar>:

void uart_putchar(char c)
{
 514:	78 02 00 00 	mvhi r2,0x0
 518:	38 42 05 70 	ori r2,r2,0x570
 51c:	28 43 00 00 	lw r3,(r2+0)
 520:	20 21 00 ff 	andi r1,r1,0xff
	while (uart0->ucr & UART_BUSY) ;
 524:	28 62 00 00 	lw r2,(r3+0)
 528:	20 42 00 10 	andi r2,r2,0x10
 52c:	5c 40 ff fe 	bne r2,r0,524 <uart_putchar+0x10>
	uart0->rxtx = c;
 530:	58 61 00 04 	sw (r3+4),r1
}
 534:	c3 a0 00 00 	ret

00000538 <uart_putstr>:

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
 538:	40 24 00 00 	lbu r4,(r1+0)
 53c:	44 80 00 0b 	be r4,r0,568 <uart_putstr+0x30>
 540:	78 02 00 00 	mvhi r2,0x0
 544:	38 42 05 70 	ori r2,r2,0x570
 548:	28 43 00 00 	lw r3,(r2+0)
	return uart0->rxtx;
}

void uart_putchar(char c)
{
	while (uart0->ucr & UART_BUSY) ;
 54c:	28 62 00 00 	lw r2,(r3+0)
 550:	20 42 00 10 	andi r2,r2,0x10
 554:	5c 40 ff fe 	bne r2,r0,54c <uart_putstr+0x14>
	uart0->rxtx = c;
 558:	58 64 00 04 	sw (r3+4),r4
void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
		uart_putchar(*c);
		c++;
 55c:	34 21 00 01 	addi r1,r1,1
}

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
 560:	40 24 00 00 	lbu r4,(r1+0)
 564:	5c 82 ff fa 	bne r4,r2,54c <uart_putstr+0x14>
 568:	c3 a0 00 00 	ret
