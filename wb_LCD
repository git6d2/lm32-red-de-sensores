//---------------------------------------------------------------------------
//
// Wishbone LCD
//
// descripcion de registros
//
//    0x00 LCD_DB
//    0x04 LCD_RS
//    0x08 LCD_E 
//
//---------------------------------------------------------------------------

module wb_lcd (
   input              clk,
   input              reset,
   // Wishbone interface
   input              wb_stb_i,
   input              wb_cyc_i,
   output             wb_ack_o,
   input              wb_we_i,
   input       [31:0] wb_adr_i,
   input        [3:0] wb_sel_i,
   input       [31:0] wb_dat_i,
   output reg  [31:0] wb_dat_o,
   // LCD Output
    output reg   LCD_E,
    output reg   LCD_RS,
    output       LCD_RW,
    output reg [7:0] LCD_DB
);

//---------------------------------------------------------------------------
// 
//---------------------------------------------------------------------------
assign LCD_RW=0;

reg  ack;
assign wb_ack_o = wb_stb_i & wb_cyc_i & ack;

wire wb_rd = wb_stb_i & wb_cyc_i & ~wb_we_i;
wire wb_wr = wb_stb_i & wb_cyc_i &  wb_we_i;

  always @(posedge clk)
  begin
    if (reset) begin
      ack      <= 0;
      LCD_E    <= 0;
      LCD_RS   <= 0;
      LCD_DB   <= 0;
    end else begin

   // Handle WISHBONE access
   ack    <= 0;

   if (wb_rd & ~ack) begin           // read cycle
     ack <= 1;
     wb_dat_o <= 32'b0;
   end else if (wb_wr & ~ack ) begin // write cycle
     ack <= 1;

     case (wb_adr_i[7:0])
     'h00: LCD_DB[7:0]   <= wb_dat_i[7:0];
     'h01: LCD_RS        <= wb_dat_i[0];
     'h02: LCD_E         <= wb_dat_i[0];
     endcase
   end
    end
  end

endmodule
